<?php
/**
 * AccountManagementApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TheLogicStudio\ExactPay\ApiException;
use TheLogicStudio\ExactPay\Configuration;
use TheLogicStudio\ExactPay\HeaderSelector;
use TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * AccountManagementApi Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'accountRegisterApplePayDomains' => [
            'application/json',
        ],
        'deregisterApplePayDomains' => [
            'application/json',
        ],
        'listApplePayDomains' => [
            'application/json',
        ],
        'organizationOrganizationIdAccountAccountIdGet' => [
            'application/json',
        ],
        'organizationOrganizationIdAccountGet' => [
            'application/json',
        ],
        'organizationOrganizationIdAccountSearchGet' => [
            'application/json',
        ],
        'putUpdateAccountById' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountRegisterApplePayDomains
     *
     * Register Domain for Apple Pay
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\ApplePayDomains $apple_pay_domains An array of domains you wish to use with Apple Pay &amp;amp; ExactJS. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRegisterApplePayDomains'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\ApplePayDomains|\TheLogicStudio\ExactPay\Model\AccountRegisterApplePayDomains400Response|string|string|string|string
     */
    public function accountRegisterApplePayDomains($account_id, $apple_pay_domains, string $contentType = self::contentTypes['accountRegisterApplePayDomains'][0])
    {
        list($response) = $this->accountRegisterApplePayDomainsWithHttpInfo($account_id, $apple_pay_domains, $contentType);
        return $response;
    }

    /**
     * Operation accountRegisterApplePayDomainsWithHttpInfo
     *
     * Register Domain for Apple Pay
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\ApplePayDomains $apple_pay_domains An array of domains you wish to use with Apple Pay &amp;amp; ExactJS. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRegisterApplePayDomains'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\ApplePayDomains|\TheLogicStudio\ExactPay\Model\AccountRegisterApplePayDomains400Response|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountRegisterApplePayDomainsWithHttpInfo($account_id, $apple_pay_domains, string $contentType = self::contentTypes['accountRegisterApplePayDomains'][0])
    {
        $request = $this->accountRegisterApplePayDomainsRequest($account_id, $apple_pay_domains, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\ApplePayDomains' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\ApplePayDomains' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\ApplePayDomains', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\AccountRegisterApplePayDomains400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountRegisterApplePayDomains400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountRegisterApplePayDomains400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\ApplePayDomains';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\ApplePayDomains',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountRegisterApplePayDomains400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountRegisterApplePayDomainsAsync
     *
     * Register Domain for Apple Pay
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\ApplePayDomains $apple_pay_domains An array of domains you wish to use with Apple Pay &amp;amp; ExactJS. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRegisterApplePayDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountRegisterApplePayDomainsAsync($account_id, $apple_pay_domains, string $contentType = self::contentTypes['accountRegisterApplePayDomains'][0])
    {
        return $this->accountRegisterApplePayDomainsAsyncWithHttpInfo($account_id, $apple_pay_domains, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountRegisterApplePayDomainsAsyncWithHttpInfo
     *
     * Register Domain for Apple Pay
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\ApplePayDomains $apple_pay_domains An array of domains you wish to use with Apple Pay &amp;amp; ExactJS. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRegisterApplePayDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountRegisterApplePayDomainsAsyncWithHttpInfo($account_id, $apple_pay_domains, string $contentType = self::contentTypes['accountRegisterApplePayDomains'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\ApplePayDomains';
        $request = $this->accountRegisterApplePayDomainsRequest($account_id, $apple_pay_domains, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountRegisterApplePayDomains'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\ApplePayDomains $apple_pay_domains An array of domains you wish to use with Apple Pay &amp;amp; ExactJS. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRegisterApplePayDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountRegisterApplePayDomainsRequest($account_id, $apple_pay_domains, string $contentType = self::contentTypes['accountRegisterApplePayDomains'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountRegisterApplePayDomains'
            );
        }

        // verify the required parameter 'apple_pay_domains' is set
        if ($apple_pay_domains === null || (is_array($apple_pay_domains) && count($apple_pay_domains) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apple_pay_domains when calling accountRegisterApplePayDomains'
            );
        }


        $resourcePath = '/account/{accountId}/apple-pay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apple_pay_domains)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($apple_pay_domains));
            } else {
                $httpBody = $apple_pay_domains;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deregisterApplePayDomains
     *
     * Deregister Apple Pay Domains
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\ApplePayDomains $apple_pay_domains An array of domains you no longer wish to use with Apple Pay &amp;amp; ExactJS. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deregisterApplePayDomains'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\ApplePayDomains|string|string|string|string
     */
    public function deregisterApplePayDomains($account_id, $apple_pay_domains, string $contentType = self::contentTypes['deregisterApplePayDomains'][0])
    {
        list($response) = $this->deregisterApplePayDomainsWithHttpInfo($account_id, $apple_pay_domains, $contentType);
        return $response;
    }

    /**
     * Operation deregisterApplePayDomainsWithHttpInfo
     *
     * Deregister Apple Pay Domains
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\ApplePayDomains $apple_pay_domains An array of domains you no longer wish to use with Apple Pay &amp;amp; ExactJS. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deregisterApplePayDomains'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\ApplePayDomains|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deregisterApplePayDomainsWithHttpInfo($account_id, $apple_pay_domains, string $contentType = self::contentTypes['deregisterApplePayDomains'][0])
    {
        $request = $this->deregisterApplePayDomainsRequest($account_id, $apple_pay_domains, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\ApplePayDomains' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\ApplePayDomains' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\ApplePayDomains', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\ApplePayDomains';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\ApplePayDomains',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deregisterApplePayDomainsAsync
     *
     * Deregister Apple Pay Domains
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\ApplePayDomains $apple_pay_domains An array of domains you no longer wish to use with Apple Pay &amp;amp; ExactJS. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deregisterApplePayDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deregisterApplePayDomainsAsync($account_id, $apple_pay_domains, string $contentType = self::contentTypes['deregisterApplePayDomains'][0])
    {
        return $this->deregisterApplePayDomainsAsyncWithHttpInfo($account_id, $apple_pay_domains, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deregisterApplePayDomainsAsyncWithHttpInfo
     *
     * Deregister Apple Pay Domains
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\ApplePayDomains $apple_pay_domains An array of domains you no longer wish to use with Apple Pay &amp;amp; ExactJS. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deregisterApplePayDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deregisterApplePayDomainsAsyncWithHttpInfo($account_id, $apple_pay_domains, string $contentType = self::contentTypes['deregisterApplePayDomains'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\ApplePayDomains';
        $request = $this->deregisterApplePayDomainsRequest($account_id, $apple_pay_domains, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deregisterApplePayDomains'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\ApplePayDomains $apple_pay_domains An array of domains you no longer wish to use with Apple Pay &amp;amp; ExactJS. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deregisterApplePayDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deregisterApplePayDomainsRequest($account_id, $apple_pay_domains, string $contentType = self::contentTypes['deregisterApplePayDomains'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling deregisterApplePayDomains'
            );
        }

        // verify the required parameter 'apple_pay_domains' is set
        if ($apple_pay_domains === null || (is_array($apple_pay_domains) && count($apple_pay_domains) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apple_pay_domains when calling deregisterApplePayDomains'
            );
        }


        $resourcePath = '/account/{accountId}/apple-pay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apple_pay_domains)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($apple_pay_domains));
            } else {
                $httpBody = $apple_pay_domains;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listApplePayDomains
     *
     * List Apple Pay Domains
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listApplePayDomains'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\ApplePayDomains|string|string|string|string
     */
    public function listApplePayDomains($account_id, string $contentType = self::contentTypes['listApplePayDomains'][0])
    {
        list($response) = $this->listApplePayDomainsWithHttpInfo($account_id, $contentType);
        return $response;
    }

    /**
     * Operation listApplePayDomainsWithHttpInfo
     *
     * List Apple Pay Domains
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listApplePayDomains'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\ApplePayDomains|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function listApplePayDomainsWithHttpInfo($account_id, string $contentType = self::contentTypes['listApplePayDomains'][0])
    {
        $request = $this->listApplePayDomainsRequest($account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\ApplePayDomains' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\ApplePayDomains' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\ApplePayDomains', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\ApplePayDomains';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\ApplePayDomains',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listApplePayDomainsAsync
     *
     * List Apple Pay Domains
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listApplePayDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listApplePayDomainsAsync($account_id, string $contentType = self::contentTypes['listApplePayDomains'][0])
    {
        return $this->listApplePayDomainsAsyncWithHttpInfo($account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listApplePayDomainsAsyncWithHttpInfo
     *
     * List Apple Pay Domains
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listApplePayDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listApplePayDomainsAsyncWithHttpInfo($account_id, string $contentType = self::contentTypes['listApplePayDomains'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\ApplePayDomains';
        $request = $this->listApplePayDomainsRequest($account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listApplePayDomains'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listApplePayDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listApplePayDomainsRequest($account_id, string $contentType = self::contentTypes['listApplePayDomains'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling listApplePayDomains'
            );
        }


        $resourcePath = '/account/{accountId}/apple-pay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdAccountAccountIdGet
     *
     * Retrieve Account by ID
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountAccountIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\AccountWithGateway|string|string
     */
    public function organizationOrganizationIdAccountAccountIdGet($organization_id, $account_id, string $contentType = self::contentTypes['organizationOrganizationIdAccountAccountIdGet'][0])
    {
        list($response) = $this->organizationOrganizationIdAccountAccountIdGetWithHttpInfo($organization_id, $account_id, $contentType);
        return $response;
    }

    /**
     * Operation organizationOrganizationIdAccountAccountIdGetWithHttpInfo
     *
     * Retrieve Account by ID
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountAccountIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\AccountWithGateway|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdAccountAccountIdGetWithHttpInfo($organization_id, $account_id, string $contentType = self::contentTypes['organizationOrganizationIdAccountAccountIdGet'][0])
    {
        $request = $this->organizationOrganizationIdAccountAccountIdGetRequest($organization_id, $account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\AccountWithGateway' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountWithGateway' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountWithGateway', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\AccountWithGateway';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountWithGateway',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdAccountAccountIdGetAsync
     *
     * Retrieve Account by ID
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountAccountIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdAccountAccountIdGetAsync($organization_id, $account_id, string $contentType = self::contentTypes['organizationOrganizationIdAccountAccountIdGet'][0])
    {
        return $this->organizationOrganizationIdAccountAccountIdGetAsyncWithHttpInfo($organization_id, $account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdAccountAccountIdGetAsyncWithHttpInfo
     *
     * Retrieve Account by ID
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountAccountIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdAccountAccountIdGetAsyncWithHttpInfo($organization_id, $account_id, string $contentType = self::contentTypes['organizationOrganizationIdAccountAccountIdGet'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\AccountWithGateway';
        $request = $this->organizationOrganizationIdAccountAccountIdGetRequest($organization_id, $account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdAccountAccountIdGet'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountAccountIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdAccountAccountIdGetRequest($organization_id, $account_id, string $contentType = self::contentTypes['organizationOrganizationIdAccountAccountIdGet'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdAccountAccountIdGet'
            );
        }

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling organizationOrganizationIdAccountAccountIdGet'
            );
        }


        $resourcePath = '/organization/{organizationId}/account/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdAccountGet
     *
     * List Accounts
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]|string|string
     */
    public function organizationOrganizationIdAccountGet($organization_id, string $contentType = self::contentTypes['organizationOrganizationIdAccountGet'][0])
    {
        list($response) = $this->organizationOrganizationIdAccountGetWithHttpInfo($organization_id, $contentType);
        return $response;
    }

    /**
     * Operation organizationOrganizationIdAccountGetWithHttpInfo
     *
     * List Accounts
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdAccountGetWithHttpInfo($organization_id, string $contentType = self::contentTypes['organizationOrganizationIdAccountGet'][0])
    {
        $request = $this->organizationOrganizationIdAccountGetRequest($organization_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdAccountGetAsync
     *
     * List Accounts
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdAccountGetAsync($organization_id, string $contentType = self::contentTypes['organizationOrganizationIdAccountGet'][0])
    {
        return $this->organizationOrganizationIdAccountGetAsyncWithHttpInfo($organization_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdAccountGetAsyncWithHttpInfo
     *
     * List Accounts
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdAccountGetAsyncWithHttpInfo($organization_id, string $contentType = self::contentTypes['organizationOrganizationIdAccountGet'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]';
        $request = $this->organizationOrganizationIdAccountGetRequest($organization_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdAccountGet'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdAccountGetRequest($organization_id, string $contentType = self::contentTypes['organizationOrganizationIdAccountGet'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdAccountGet'
            );
        }


        $resourcePath = '/organization/{organizationId}/account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdAccountSearchGet
     *
     * Query Accounts
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $q Search text on name, dbaName, phone, email and onlinePresence fields (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountSearchGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]|string|string
     */
    public function organizationOrganizationIdAccountSearchGet($organization_id, $q = null, string $contentType = self::contentTypes['organizationOrganizationIdAccountSearchGet'][0])
    {
        list($response) = $this->organizationOrganizationIdAccountSearchGetWithHttpInfo($organization_id, $q, $contentType);
        return $response;
    }

    /**
     * Operation organizationOrganizationIdAccountSearchGetWithHttpInfo
     *
     * Query Accounts
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $q Search text on name, dbaName, phone, email and onlinePresence fields (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountSearchGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdAccountSearchGetWithHttpInfo($organization_id, $q = null, string $contentType = self::contentTypes['organizationOrganizationIdAccountSearchGet'][0])
    {
        $request = $this->organizationOrganizationIdAccountSearchGetRequest($organization_id, $q, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdAccountSearchGetAsync
     *
     * Query Accounts
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $q Search text on name, dbaName, phone, email and onlinePresence fields (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountSearchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdAccountSearchGetAsync($organization_id, $q = null, string $contentType = self::contentTypes['organizationOrganizationIdAccountSearchGet'][0])
    {
        return $this->organizationOrganizationIdAccountSearchGetAsyncWithHttpInfo($organization_id, $q, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdAccountSearchGetAsyncWithHttpInfo
     *
     * Query Accounts
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $q Search text on name, dbaName, phone, email and onlinePresence fields (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountSearchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdAccountSearchGetAsyncWithHttpInfo($organization_id, $q = null, string $contentType = self::contentTypes['organizationOrganizationIdAccountSearchGet'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\AccountWithoutGateway[]';
        $request = $this->organizationOrganizationIdAccountSearchGetRequest($organization_id, $q, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdAccountSearchGet'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $q Search text on name, dbaName, phone, email and onlinePresence fields (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdAccountSearchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdAccountSearchGetRequest($organization_id, $q = null, string $contentType = self::contentTypes['organizationOrganizationIdAccountSearchGet'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdAccountSearchGet'
            );
        }



        $resourcePath = '/organization/{organizationId}/account/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putUpdateAccountById
     *
     * Update Account
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableAccount $updatable_account updatable_account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putUpdateAccountById'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putUpdateAccountById($organization_id, $account_id, $updatable_account, string $contentType = self::contentTypes['putUpdateAccountById'][0])
    {
        $this->putUpdateAccountByIdWithHttpInfo($organization_id, $account_id, $updatable_account, $contentType);
    }

    /**
     * Operation putUpdateAccountByIdWithHttpInfo
     *
     * Update Account
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableAccount $updatable_account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putUpdateAccountById'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putUpdateAccountByIdWithHttpInfo($organization_id, $account_id, $updatable_account, string $contentType = self::contentTypes['putUpdateAccountById'][0])
    {
        $request = $this->putUpdateAccountByIdRequest($organization_id, $account_id, $updatable_account, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PutUpdateAccountById400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putUpdateAccountByIdAsync
     *
     * Update Account
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableAccount $updatable_account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putUpdateAccountById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putUpdateAccountByIdAsync($organization_id, $account_id, $updatable_account, string $contentType = self::contentTypes['putUpdateAccountById'][0])
    {
        return $this->putUpdateAccountByIdAsyncWithHttpInfo($organization_id, $account_id, $updatable_account, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putUpdateAccountByIdAsyncWithHttpInfo
     *
     * Update Account
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableAccount $updatable_account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putUpdateAccountById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putUpdateAccountByIdAsyncWithHttpInfo($organization_id, $account_id, $updatable_account, string $contentType = self::contentTypes['putUpdateAccountById'][0])
    {
        $returnType = '';
        $request = $this->putUpdateAccountByIdRequest($organization_id, $account_id, $updatable_account, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putUpdateAccountById'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableAccount $updatable_account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putUpdateAccountById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putUpdateAccountByIdRequest($organization_id, $account_id, $updatable_account, string $contentType = self::contentTypes['putUpdateAccountById'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling putUpdateAccountById'
            );
        }

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling putUpdateAccountById'
            );
        }

        // verify the required parameter 'updatable_account' is set
        if ($updatable_account === null || (is_array($updatable_account) && count($updatable_account) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updatable_account when calling putUpdateAccountById'
            );
        }


        $resourcePath = '/organization/{organizationId}/account/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updatable_account)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updatable_account));
            } else {
                $httpBody = $updatable_account;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
