<?php
/**
 * PaymentMethodsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TheLogicStudio\ExactPay\ApiException;
use TheLogicStudio\ExactPay\Configuration;
use TheLogicStudio\ExactPay\HeaderSelector;
use TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * PaymentMethodsApi Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentMethodsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'accountDeletePaymentMethod' => [
            'application/json',
        ],
        'accountGetPaymentMethod' => [
            'application/json',
        ],
        'accountPostPaymentMethod' => [
            'application/json',
        ],
        'accountPostVerifyMicrodeposits' => [
            'application/json',
        ],
        'deletePaymentMethod' => [
            'application/json',
        ],
        'getPaymentMethod' => [
            'application/json',
        ],
        'postPaymentMethod' => [
            'application/json',
        ],
        'postVerifyMicrodeposits' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountDeletePaymentMethod
     *
     * Delete a Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountDeletePaymentMethod($account_id, $payment_token, string $contentType = self::contentTypes['accountDeletePaymentMethod'][0])
    {
        $this->accountDeletePaymentMethodWithHttpInfo($account_id, $payment_token, $contentType);
    }

    /**
     * Operation accountDeletePaymentMethodWithHttpInfo
     *
     * Delete a Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountDeletePaymentMethodWithHttpInfo($account_id, $payment_token, string $contentType = self::contentTypes['accountDeletePaymentMethod'][0])
    {
        $request = $this->accountDeletePaymentMethodRequest($account_id, $payment_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountDeletePaymentMethodAsync
     *
     * Delete a Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountDeletePaymentMethodAsync($account_id, $payment_token, string $contentType = self::contentTypes['accountDeletePaymentMethod'][0])
    {
        return $this->accountDeletePaymentMethodAsyncWithHttpInfo($account_id, $payment_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountDeletePaymentMethodAsyncWithHttpInfo
     *
     * Delete a Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountDeletePaymentMethodAsyncWithHttpInfo($account_id, $payment_token, string $contentType = self::contentTypes['accountDeletePaymentMethod'][0])
    {
        $returnType = '';
        $request = $this->accountDeletePaymentMethodRequest($account_id, $payment_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountDeletePaymentMethod'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountDeletePaymentMethodRequest($account_id, $payment_token, string $contentType = self::contentTypes['accountDeletePaymentMethod'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountDeletePaymentMethod'
            );
        }

        // verify the required parameter 'payment_token' is set
        if ($payment_token === null || (is_array($payment_token) && count($payment_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_token when calling accountDeletePaymentMethod'
            );
        }


        $resourcePath = '/account/{accountId}/payment-method/{paymentToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_token !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentToken' . '}',
                ObjectSerializer::toPathValue($payment_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetPaymentMethod
     *
     * Retrieve a Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountGetPaymentMethod($account_id, $payment_token, string $contentType = self::contentTypes['accountGetPaymentMethod'][0])
    {
        list($response) = $this->accountGetPaymentMethodWithHttpInfo($account_id, $payment_token, $contentType);
        return $response;
    }

    /**
     * Operation accountGetPaymentMethodWithHttpInfo
     *
     * Retrieve a Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetPaymentMethodWithHttpInfo($account_id, $payment_token, string $contentType = self::contentTypes['accountGetPaymentMethod'][0])
    {
        $request = $this->accountGetPaymentMethodRequest($account_id, $payment_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetPaymentMethodAsync
     *
     * Retrieve a Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetPaymentMethodAsync($account_id, $payment_token, string $contentType = self::contentTypes['accountGetPaymentMethod'][0])
    {
        return $this->accountGetPaymentMethodAsyncWithHttpInfo($account_id, $payment_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetPaymentMethodAsyncWithHttpInfo
     *
     * Retrieve a Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetPaymentMethodAsyncWithHttpInfo($account_id, $payment_token, string $contentType = self::contentTypes['accountGetPaymentMethod'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
        $request = $this->accountGetPaymentMethodRequest($account_id, $payment_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetPaymentMethod'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountGetPaymentMethodRequest($account_id, $payment_token, string $contentType = self::contentTypes['accountGetPaymentMethod'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountGetPaymentMethod'
            );
        }

        // verify the required parameter 'payment_token' is set
        if ($payment_token === null || (is_array($payment_token) && count($payment_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_token when calling accountGetPaymentMethod'
            );
        }


        $resourcePath = '/account/{accountId}/payment-method/{paymentToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_token !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentToken' . '}',
                ObjectSerializer::toPathValue($payment_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountPostPaymentMethod
     *
     * Create Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreatePaymentMethod $create_payment_method Country code must be in CAPS (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\PaymentMethod
     */
    public function accountPostPaymentMethod($account_id, $create_payment_method = null, string $contentType = self::contentTypes['accountPostPaymentMethod'][0])
    {
        list($response) = $this->accountPostPaymentMethodWithHttpInfo($account_id, $create_payment_method, $contentType);
        return $response;
    }

    /**
     * Operation accountPostPaymentMethodWithHttpInfo
     *
     * Create Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreatePaymentMethod $create_payment_method Country code must be in CAPS (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\PaymentMethod, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountPostPaymentMethodWithHttpInfo($account_id, $create_payment_method = null, string $contentType = self::contentTypes['accountPostPaymentMethod'][0])
    {
        $request = $this->accountPostPaymentMethodRequest($account_id, $create_payment_method, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountPostPaymentMethodAsync
     *
     * Create Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreatePaymentMethod $create_payment_method Country code must be in CAPS (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPostPaymentMethodAsync($account_id, $create_payment_method = null, string $contentType = self::contentTypes['accountPostPaymentMethod'][0])
    {
        return $this->accountPostPaymentMethodAsyncWithHttpInfo($account_id, $create_payment_method, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountPostPaymentMethodAsyncWithHttpInfo
     *
     * Create Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreatePaymentMethod $create_payment_method Country code must be in CAPS (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPostPaymentMethodAsyncWithHttpInfo($account_id, $create_payment_method = null, string $contentType = self::contentTypes['accountPostPaymentMethod'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
        $request = $this->accountPostPaymentMethodRequest($account_id, $create_payment_method, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountPostPaymentMethod'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreatePaymentMethod $create_payment_method Country code must be in CAPS (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountPostPaymentMethodRequest($account_id, $create_payment_method = null, string $contentType = self::contentTypes['accountPostPaymentMethod'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountPostPaymentMethod'
            );
        }



        $resourcePath = '/account/{accountId}/payment-method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_payment_method)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_payment_method));
            } else {
                $httpBody = $create_payment_method;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountPostVerifyMicrodeposits
     *
     * Verify micro-deposits on an ACH Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\MicroDepositVerificationRequest $micro_deposit_verification_request micro_deposit_verification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostVerifyMicrodeposits'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\AchPaymentMethod|\TheLogicStudio\ExactPay\Model\PostVerifyMicrodeposits202Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountPostVerifyMicrodeposits($account_id, $payment_token, $micro_deposit_verification_request = null, string $contentType = self::contentTypes['accountPostVerifyMicrodeposits'][0])
    {
        list($response) = $this->accountPostVerifyMicrodepositsWithHttpInfo($account_id, $payment_token, $micro_deposit_verification_request, $contentType);
        return $response;
    }

    /**
     * Operation accountPostVerifyMicrodepositsWithHttpInfo
     *
     * Verify micro-deposits on an ACH Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\MicroDepositVerificationRequest $micro_deposit_verification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostVerifyMicrodeposits'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\AchPaymentMethod|\TheLogicStudio\ExactPay\Model\PostVerifyMicrodeposits202Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountPostVerifyMicrodepositsWithHttpInfo($account_id, $payment_token, $micro_deposit_verification_request = null, string $contentType = self::contentTypes['accountPostVerifyMicrodeposits'][0])
    {
        $request = $this->accountPostVerifyMicrodepositsRequest($account_id, $payment_token, $micro_deposit_verification_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\AchPaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AchPaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AchPaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\TheLogicStudio\ExactPay\Model\PostVerifyMicrodeposits202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostVerifyMicrodeposits202Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostVerifyMicrodeposits202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\AchPaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AchPaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostVerifyMicrodeposits202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountPostVerifyMicrodepositsAsync
     *
     * Verify micro-deposits on an ACH Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\MicroDepositVerificationRequest $micro_deposit_verification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostVerifyMicrodeposits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPostVerifyMicrodepositsAsync($account_id, $payment_token, $micro_deposit_verification_request = null, string $contentType = self::contentTypes['accountPostVerifyMicrodeposits'][0])
    {
        return $this->accountPostVerifyMicrodepositsAsyncWithHttpInfo($account_id, $payment_token, $micro_deposit_verification_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountPostVerifyMicrodepositsAsyncWithHttpInfo
     *
     * Verify micro-deposits on an ACH Payment Method for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\MicroDepositVerificationRequest $micro_deposit_verification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostVerifyMicrodeposits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPostVerifyMicrodepositsAsyncWithHttpInfo($account_id, $payment_token, $micro_deposit_verification_request = null, string $contentType = self::contentTypes['accountPostVerifyMicrodeposits'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\AchPaymentMethod';
        $request = $this->accountPostVerifyMicrodepositsRequest($account_id, $payment_token, $micro_deposit_verification_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountPostVerifyMicrodeposits'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\MicroDepositVerificationRequest $micro_deposit_verification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostVerifyMicrodeposits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountPostVerifyMicrodepositsRequest($account_id, $payment_token, $micro_deposit_verification_request = null, string $contentType = self::contentTypes['accountPostVerifyMicrodeposits'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountPostVerifyMicrodeposits'
            );
        }

        // verify the required parameter 'payment_token' is set
        if ($payment_token === null || (is_array($payment_token) && count($payment_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_token when calling accountPostVerifyMicrodeposits'
            );
        }



        $resourcePath = '/account/{accountId}/payment-method/{payment-token}/verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_token !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-token' . '}',
                ObjectSerializer::toPathValue($payment_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($micro_deposit_verification_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($micro_deposit_verification_request));
            } else {
                $httpBody = $micro_deposit_verification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePaymentMethod
     *
     * Delete a Payment Method
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePaymentMethod($payment_token, string $contentType = self::contentTypes['deletePaymentMethod'][0])
    {
        $this->deletePaymentMethodWithHttpInfo($payment_token, $contentType);
    }

    /**
     * Operation deletePaymentMethodWithHttpInfo
     *
     * Delete a Payment Method
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePaymentMethodWithHttpInfo($payment_token, string $contentType = self::contentTypes['deletePaymentMethod'][0])
    {
        $request = $this->deletePaymentMethodRequest($payment_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePaymentMethodAsync
     *
     * Delete a Payment Method
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentMethodAsync($payment_token, string $contentType = self::contentTypes['deletePaymentMethod'][0])
    {
        return $this->deletePaymentMethodAsyncWithHttpInfo($payment_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePaymentMethodAsyncWithHttpInfo
     *
     * Delete a Payment Method
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentMethodAsyncWithHttpInfo($payment_token, string $contentType = self::contentTypes['deletePaymentMethod'][0])
    {
        $returnType = '';
        $request = $this->deletePaymentMethodRequest($payment_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePaymentMethod'
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePaymentMethodRequest($payment_token, string $contentType = self::contentTypes['deletePaymentMethod'][0])
    {

        // verify the required parameter 'payment_token' is set
        if ($payment_token === null || (is_array($payment_token) && count($payment_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_token when calling deletePaymentMethod'
            );
        }


        $resourcePath = '/payment-method/{paymentToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_token !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentToken' . '}',
                ObjectSerializer::toPathValue($payment_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentMethod
     *
     * Retrieve a Payment Method
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\CustomerOrPaymentMethod
     */
    public function getPaymentMethod($payment_token, string $contentType = self::contentTypes['getPaymentMethod'][0])
    {
        list($response) = $this->getPaymentMethodWithHttpInfo($payment_token, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentMethodWithHttpInfo
     *
     * Retrieve a Payment Method
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\CustomerOrPaymentMethod, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentMethodWithHttpInfo($payment_token, string $contentType = self::contentTypes['getPaymentMethod'][0])
    {
        $request = $this->getPaymentMethodRequest($payment_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\CustomerOrPaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\CustomerOrPaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\CustomerOrPaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\CustomerOrPaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\CustomerOrPaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentMethodAsync
     *
     * Retrieve a Payment Method
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodAsync($payment_token, string $contentType = self::contentTypes['getPaymentMethod'][0])
    {
        return $this->getPaymentMethodAsyncWithHttpInfo($payment_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentMethodAsyncWithHttpInfo
     *
     * Retrieve a Payment Method
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodAsyncWithHttpInfo($payment_token, string $contentType = self::contentTypes['getPaymentMethod'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\CustomerOrPaymentMethod';
        $request = $this->getPaymentMethodRequest($payment_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentMethod'
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentMethodRequest($payment_token, string $contentType = self::contentTypes['getPaymentMethod'][0])
    {

        // verify the required parameter 'payment_token' is set
        if ($payment_token === null || (is_array($payment_token) && count($payment_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_token when calling getPaymentMethod'
            );
        }


        $resourcePath = '/payment-method/{paymentToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_token !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentToken' . '}',
                ObjectSerializer::toPathValue($payment_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPaymentMethod
     *
     * Create Payment Method
     *
     * @param  \TheLogicStudio\ExactPay\Model\CreatePaymentMethod $create_payment_method create_payment_method (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod406Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod428Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function postPaymentMethod($create_payment_method = null, string $contentType = self::contentTypes['postPaymentMethod'][0])
    {
        list($response) = $this->postPaymentMethodWithHttpInfo($create_payment_method, $contentType);
        return $response;
    }

    /**
     * Operation postPaymentMethodWithHttpInfo
     *
     * Create Payment Method
     *
     * @param  \TheLogicStudio\ExactPay\Model\CreatePaymentMethod $create_payment_method (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod406Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod428Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPaymentMethodWithHttpInfo($create_payment_method = null, string $contentType = self::contentTypes['postPaymentMethod'][0])
    {
        $request = $this->postPaymentMethodRequest($create_payment_method, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod406Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod406Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod406Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 428:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod428Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod428Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod428Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod406Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod428Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postPaymentMethodAsync
     *
     * Create Payment Method
     *
     * @param  \TheLogicStudio\ExactPay\Model\CreatePaymentMethod $create_payment_method (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPaymentMethodAsync($create_payment_method = null, string $contentType = self::contentTypes['postPaymentMethod'][0])
    {
        return $this->postPaymentMethodAsyncWithHttpInfo($create_payment_method, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPaymentMethodAsyncWithHttpInfo
     *
     * Create Payment Method
     *
     * @param  \TheLogicStudio\ExactPay\Model\CreatePaymentMethod $create_payment_method (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPaymentMethodAsyncWithHttpInfo($create_payment_method = null, string $contentType = self::contentTypes['postPaymentMethod'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
        $request = $this->postPaymentMethodRequest($create_payment_method, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPaymentMethod'
     *
     * @param  \TheLogicStudio\ExactPay\Model\CreatePaymentMethod $create_payment_method (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postPaymentMethodRequest($create_payment_method = null, string $contentType = self::contentTypes['postPaymentMethod'][0])
    {



        $resourcePath = '/payment-method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_payment_method)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_payment_method));
            } else {
                $httpBody = $create_payment_method;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postVerifyMicrodeposits
     *
     * Verify micro-deposits on an ACH Payment Method
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\MicroDepositVerificationRequest $micro_deposit_verification_request micro_deposit_verification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postVerifyMicrodeposits'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\AchPaymentMethod|\TheLogicStudio\ExactPay\Model\PostVerifyMicrodeposits202Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response
     */
    public function postVerifyMicrodeposits($payment_token, $micro_deposit_verification_request = null, string $contentType = self::contentTypes['postVerifyMicrodeposits'][0])
    {
        list($response) = $this->postVerifyMicrodepositsWithHttpInfo($payment_token, $micro_deposit_verification_request, $contentType);
        return $response;
    }

    /**
     * Operation postVerifyMicrodepositsWithHttpInfo
     *
     * Verify micro-deposits on an ACH Payment Method
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\MicroDepositVerificationRequest $micro_deposit_verification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postVerifyMicrodeposits'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\AchPaymentMethod|\TheLogicStudio\ExactPay\Model\PostVerifyMicrodeposits202Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postVerifyMicrodepositsWithHttpInfo($payment_token, $micro_deposit_verification_request = null, string $contentType = self::contentTypes['postVerifyMicrodeposits'][0])
    {
        $request = $this->postVerifyMicrodepositsRequest($payment_token, $micro_deposit_verification_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\AchPaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AchPaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AchPaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\TheLogicStudio\ExactPay\Model\PostVerifyMicrodeposits202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostVerifyMicrodeposits202Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostVerifyMicrodeposits202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\AchPaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AchPaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostVerifyMicrodeposits202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postVerifyMicrodepositsAsync
     *
     * Verify micro-deposits on an ACH Payment Method
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\MicroDepositVerificationRequest $micro_deposit_verification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postVerifyMicrodeposits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postVerifyMicrodepositsAsync($payment_token, $micro_deposit_verification_request = null, string $contentType = self::contentTypes['postVerifyMicrodeposits'][0])
    {
        return $this->postVerifyMicrodepositsAsyncWithHttpInfo($payment_token, $micro_deposit_verification_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postVerifyMicrodepositsAsyncWithHttpInfo
     *
     * Verify micro-deposits on an ACH Payment Method
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\MicroDepositVerificationRequest $micro_deposit_verification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postVerifyMicrodeposits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postVerifyMicrodepositsAsyncWithHttpInfo($payment_token, $micro_deposit_verification_request = null, string $contentType = self::contentTypes['postVerifyMicrodeposits'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\AchPaymentMethod';
        $request = $this->postVerifyMicrodepositsRequest($payment_token, $micro_deposit_verification_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postVerifyMicrodeposits'
     *
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\MicroDepositVerificationRequest $micro_deposit_verification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postVerifyMicrodeposits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postVerifyMicrodepositsRequest($payment_token, $micro_deposit_verification_request = null, string $contentType = self::contentTypes['postVerifyMicrodeposits'][0])
    {

        // verify the required parameter 'payment_token' is set
        if ($payment_token === null || (is_array($payment_token) && count($payment_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_token when calling postVerifyMicrodeposits'
            );
        }



        $resourcePath = '/payment-method/{payment-token}/verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_token !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-token' . '}',
                ObjectSerializer::toPathValue($payment_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($micro_deposit_verification_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($micro_deposit_verification_request));
            } else {
                $httpBody = $micro_deposit_verification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
