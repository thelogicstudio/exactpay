<?php
/**
 * AdminToolsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TheLogicStudio\ExactPay\ApiException;
use TheLogicStudio\ExactPay\Configuration;
use TheLogicStudio\ExactPay\HeaderSelector;
use TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * AdminToolsApi Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdminToolsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getListNotes' => [
            'application/json',
        ],
        'organizationOrganizationIdOnboardingOnboardingIdRecheckPut' => [
            'application/json',
        ],
        'organizationOrganizationIdOnboardingOnboardingIdRetryRulePut' => [
            'application/json',
        ],
        'organizationOrganizationIdOnboardingOnboardingIdStatusPut' => [
            'application/json',
        ],
        'postCreateNotes' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getListNotes
     *
     * List Notes
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListNotes'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\OnboardingNote[]|string|string|string|string
     */
    public function getListNotes($organization_id, $onboarding_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['getListNotes'][0])
    {
        list($response) = $this->getListNotesWithHttpInfo($organization_id, $onboarding_id, $skip, $limit, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getListNotesWithHttpInfo
     *
     * List Notes
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListNotes'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\OnboardingNote[]|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListNotesWithHttpInfo($organization_id, $onboarding_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['getListNotes'][0])
    {
        $request = $this->getListNotesRequest($organization_id, $onboarding_id, $skip, $limit, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\OnboardingNote[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\OnboardingNote[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\OnboardingNote[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\OnboardingNote[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\OnboardingNote[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListNotesAsync
     *
     * List Notes
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListNotesAsync($organization_id, $onboarding_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['getListNotes'][0])
    {
        return $this->getListNotesAsyncWithHttpInfo($organization_id, $onboarding_id, $skip, $limit, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListNotesAsyncWithHttpInfo
     *
     * List Notes
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListNotesAsyncWithHttpInfo($organization_id, $onboarding_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['getListNotes'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\OnboardingNote[]';
        $request = $this->getListNotesRequest($organization_id, $onboarding_id, $skip, $limit, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListNotes'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListNotesRequest($organization_id, $onboarding_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['getListNotes'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getListNotes'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling getListNotes'
            );
        }


        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AdminToolsApi.getListNotes, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AdminToolsApi.getListNotes, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/note';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            '$limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            '$sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', 'plain/text', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdOnboardingOnboardingIdRecheckPut
     *
     * Process Workflow
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRecheckPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationOrganizationIdOnboardingOnboardingIdRecheckPut($organization_id, $onboarding_id, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRecheckPut'][0])
    {
        $this->organizationOrganizationIdOnboardingOnboardingIdRecheckPutWithHttpInfo($organization_id, $onboarding_id, $contentType);
    }

    /**
     * Operation organizationOrganizationIdOnboardingOnboardingIdRecheckPutWithHttpInfo
     *
     * Process Workflow
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRecheckPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdOnboardingOnboardingIdRecheckPutWithHttpInfo($organization_id, $onboarding_id, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRecheckPut'][0])
    {
        $request = $this->organizationOrganizationIdOnboardingOnboardingIdRecheckPutRequest($organization_id, $onboarding_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdOnboardingOnboardingIdRecheckPutAsync
     *
     * Process Workflow
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRecheckPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdOnboardingOnboardingIdRecheckPutAsync($organization_id, $onboarding_id, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRecheckPut'][0])
    {
        return $this->organizationOrganizationIdOnboardingOnboardingIdRecheckPutAsyncWithHttpInfo($organization_id, $onboarding_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdOnboardingOnboardingIdRecheckPutAsyncWithHttpInfo
     *
     * Process Workflow
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRecheckPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdOnboardingOnboardingIdRecheckPutAsyncWithHttpInfo($organization_id, $onboarding_id, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRecheckPut'][0])
    {
        $returnType = '';
        $request = $this->organizationOrganizationIdOnboardingOnboardingIdRecheckPutRequest($organization_id, $onboarding_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdOnboardingOnboardingIdRecheckPut'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRecheckPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdOnboardingOnboardingIdRecheckPutRequest($organization_id, $onboarding_id, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRecheckPut'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdOnboardingOnboardingIdRecheckPut'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling organizationOrganizationIdOnboardingOnboardingIdRecheckPut'
            );
        }


        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/recheck';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdOnboardingOnboardingIdRetryRulePut
     *
     * Process Verification
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\OnboardingRetryRuleRequest $onboarding_retry_rule_request ruleName is an existing rule name in the workflow assigned to a merchant application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationOrganizationIdOnboardingOnboardingIdRetryRulePut($organization_id, $onboarding_id, $onboarding_retry_rule_request, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'][0])
    {
        $this->organizationOrganizationIdOnboardingOnboardingIdRetryRulePutWithHttpInfo($organization_id, $onboarding_id, $onboarding_retry_rule_request, $contentType);
    }

    /**
     * Operation organizationOrganizationIdOnboardingOnboardingIdRetryRulePutWithHttpInfo
     *
     * Process Verification
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\OnboardingRetryRuleRequest $onboarding_retry_rule_request ruleName is an existing rule name in the workflow assigned to a merchant application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdOnboardingOnboardingIdRetryRulePutWithHttpInfo($organization_id, $onboarding_id, $onboarding_retry_rule_request, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'][0])
    {
        $request = $this->organizationOrganizationIdOnboardingOnboardingIdRetryRulePutRequest($organization_id, $onboarding_id, $onboarding_retry_rule_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdOnboardingOnboardingIdRetryRulePutAsync
     *
     * Process Verification
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\OnboardingRetryRuleRequest $onboarding_retry_rule_request ruleName is an existing rule name in the workflow assigned to a merchant application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdOnboardingOnboardingIdRetryRulePutAsync($organization_id, $onboarding_id, $onboarding_retry_rule_request, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'][0])
    {
        return $this->organizationOrganizationIdOnboardingOnboardingIdRetryRulePutAsyncWithHttpInfo($organization_id, $onboarding_id, $onboarding_retry_rule_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdOnboardingOnboardingIdRetryRulePutAsyncWithHttpInfo
     *
     * Process Verification
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\OnboardingRetryRuleRequest $onboarding_retry_rule_request ruleName is an existing rule name in the workflow assigned to a merchant application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdOnboardingOnboardingIdRetryRulePutAsyncWithHttpInfo($organization_id, $onboarding_id, $onboarding_retry_rule_request, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'][0])
    {
        $returnType = '';
        $request = $this->organizationOrganizationIdOnboardingOnboardingIdRetryRulePutRequest($organization_id, $onboarding_id, $onboarding_retry_rule_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\OnboardingRetryRuleRequest $onboarding_retry_rule_request ruleName is an existing rule name in the workflow assigned to a merchant application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdOnboardingOnboardingIdRetryRulePutRequest($organization_id, $onboarding_id, $onboarding_retry_rule_request, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'
            );
        }

        // verify the required parameter 'onboarding_retry_rule_request' is set
        if ($onboarding_retry_rule_request === null || (is_array($onboarding_retry_rule_request) && count($onboarding_retry_rule_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_retry_rule_request when calling organizationOrganizationIdOnboardingOnboardingIdRetryRulePut'
            );
        }


        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/retry-rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($onboarding_retry_rule_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($onboarding_retry_rule_request));
            } else {
                $httpBody = $onboarding_retry_rule_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdOnboardingOnboardingIdStatusPut
     *
     * Update Onboarding Status
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdateOnboardingStatusRequest $update_onboarding_status_request The new status and the change reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdStatusPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationOrganizationIdOnboardingOnboardingIdStatusPut($organization_id, $onboarding_id, $update_onboarding_status_request, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdStatusPut'][0])
    {
        $this->organizationOrganizationIdOnboardingOnboardingIdStatusPutWithHttpInfo($organization_id, $onboarding_id, $update_onboarding_status_request, $contentType);
    }

    /**
     * Operation organizationOrganizationIdOnboardingOnboardingIdStatusPutWithHttpInfo
     *
     * Update Onboarding Status
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdateOnboardingStatusRequest $update_onboarding_status_request The new status and the change reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdStatusPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdOnboardingOnboardingIdStatusPutWithHttpInfo($organization_id, $onboarding_id, $update_onboarding_status_request, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdStatusPut'][0])
    {
        $request = $this->organizationOrganizationIdOnboardingOnboardingIdStatusPutRequest($organization_id, $onboarding_id, $update_onboarding_status_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdOnboardingOnboardingIdStatusPutAsync
     *
     * Update Onboarding Status
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdateOnboardingStatusRequest $update_onboarding_status_request The new status and the change reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdStatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdOnboardingOnboardingIdStatusPutAsync($organization_id, $onboarding_id, $update_onboarding_status_request, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdStatusPut'][0])
    {
        return $this->organizationOrganizationIdOnboardingOnboardingIdStatusPutAsyncWithHttpInfo($organization_id, $onboarding_id, $update_onboarding_status_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdOnboardingOnboardingIdStatusPutAsyncWithHttpInfo
     *
     * Update Onboarding Status
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdateOnboardingStatusRequest $update_onboarding_status_request The new status and the change reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdStatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdOnboardingOnboardingIdStatusPutAsyncWithHttpInfo($organization_id, $onboarding_id, $update_onboarding_status_request, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdStatusPut'][0])
    {
        $returnType = '';
        $request = $this->organizationOrganizationIdOnboardingOnboardingIdStatusPutRequest($organization_id, $onboarding_id, $update_onboarding_status_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdOnboardingOnboardingIdStatusPut'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdateOnboardingStatusRequest $update_onboarding_status_request The new status and the change reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdStatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdOnboardingOnboardingIdStatusPutRequest($organization_id, $onboarding_id, $update_onboarding_status_request, string $contentType = self::contentTypes['organizationOrganizationIdOnboardingOnboardingIdStatusPut'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdOnboardingOnboardingIdStatusPut'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling organizationOrganizationIdOnboardingOnboardingIdStatusPut'
            );
        }

        // verify the required parameter 'update_onboarding_status_request' is set
        if ($update_onboarding_status_request === null || (is_array($update_onboarding_status_request) && count($update_onboarding_status_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_onboarding_status_request when calling organizationOrganizationIdOnboardingOnboardingIdStatusPut'
            );
        }


        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_onboarding_status_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_onboarding_status_request));
            } else {
                $httpBody = $update_onboarding_status_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCreateNotes
     *
     * Add Note
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\PostCreateNotesRequest $post_create_notes_request post_create_notes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCreateNotes'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\OnboardingNote|string|string|string|string|string
     */
    public function postCreateNotes($organization_id, $onboarding_id, $post_create_notes_request = null, string $contentType = self::contentTypes['postCreateNotes'][0])
    {
        list($response) = $this->postCreateNotesWithHttpInfo($organization_id, $onboarding_id, $post_create_notes_request, $contentType);
        return $response;
    }

    /**
     * Operation postCreateNotesWithHttpInfo
     *
     * Add Note
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\PostCreateNotesRequest $post_create_notes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCreateNotes'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\OnboardingNote|string|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCreateNotesWithHttpInfo($organization_id, $onboarding_id, $post_create_notes_request = null, string $contentType = self::contentTypes['postCreateNotes'][0])
    {
        $request = $this->postCreateNotesRequest($organization_id, $onboarding_id, $post_create_notes_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\OnboardingNote' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\OnboardingNote' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\OnboardingNote', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\OnboardingNote';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\OnboardingNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCreateNotesAsync
     *
     * Add Note
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\PostCreateNotesRequest $post_create_notes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCreateNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCreateNotesAsync($organization_id, $onboarding_id, $post_create_notes_request = null, string $contentType = self::contentTypes['postCreateNotes'][0])
    {
        return $this->postCreateNotesAsyncWithHttpInfo($organization_id, $onboarding_id, $post_create_notes_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCreateNotesAsyncWithHttpInfo
     *
     * Add Note
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\PostCreateNotesRequest $post_create_notes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCreateNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCreateNotesAsyncWithHttpInfo($organization_id, $onboarding_id, $post_create_notes_request = null, string $contentType = self::contentTypes['postCreateNotes'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\OnboardingNote';
        $request = $this->postCreateNotesRequest($organization_id, $onboarding_id, $post_create_notes_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCreateNotes'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\PostCreateNotesRequest $post_create_notes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCreateNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCreateNotesRequest($organization_id, $onboarding_id, $post_create_notes_request = null, string $contentType = self::contentTypes['postCreateNotes'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling postCreateNotes'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling postCreateNotes'
            );
        }



        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/note';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', 'plain/text', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_create_notes_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_create_notes_request));
            } else {
                $httpBody = $post_create_notes_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
