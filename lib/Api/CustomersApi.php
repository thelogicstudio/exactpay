<?php
/**
 * CustomersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TheLogicStudio\ExactPay\ApiException;
use TheLogicStudio\ExactPay\Configuration;
use TheLogicStudio\ExactPay\HeaderSelector;
use TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * CustomersApi Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'accountDeleteCustomerCustomerIdPaymentMethodToken' => [
            'application/json',
        ],
        'accountDeleteCustomerId' => [
            'application/json',
        ],
        'accountGetCustomer' => [
            'application/json',
        ],
        'accountGetCustomerCustomerIdPaymentMethodToken' => [
            'application/json',
        ],
        'accountGetCustomerCustomerIdPayments' => [
            'application/json',
        ],
        'accountGetCustomerDefaultPaymentMethod' => [
            'application/json',
        ],
        'accountGetCustomerId' => [
            'application/json',
        ],
        'accountGetCustomerIdPaymentMethod' => [
            'application/json',
        ],
        'accountGetCustomerTokenPaymentMethod' => [
            'application/json',
        ],
        'accountPostCustomer' => [
            'application/json',
        ],
        'accountPostCustomerIdPaymentMethod' => [
            'application/json',
        ],
        'accountPutCustomerId' => [
            'application/json',
        ],
        'deleteCustomerCustomerIdPaymentMethodToken' => [
            'application/json',
        ],
        'deleteCustomerId' => [
            'application/json',
        ],
        'getCustomer' => [
            'application/json',
        ],
        'getCustomerCustomerIdPaymentMethodToken' => [
            'application/json',
        ],
        'getCustomerCustomerIdPayments' => [
            'application/json',
        ],
        'getCustomerId' => [
            'application/json',
        ],
        'getCustomerIdPaymentMethod' => [
            'application/json',
        ],
        'getCustomerTokenPaymentMethod' => [
            'application/json',
        ],
        'postCustomer' => [
            'application/json',
        ],
        'postCustomerIdPaymentMethod' => [
            'application/json',
        ],
        'putCustomerId' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountDeleteCustomerCustomerIdPaymentMethodToken
     *
     * Delete Payment Method Associated with Customer by Token (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountDeleteCustomerCustomerIdPaymentMethodToken($account_id, $customer_id, $payment_token, string $contentType = self::contentTypes['accountDeleteCustomerCustomerIdPaymentMethodToken'][0])
    {
        $this->accountDeleteCustomerCustomerIdPaymentMethodTokenWithHttpInfo($account_id, $customer_id, $payment_token, $contentType);
    }

    /**
     * Operation accountDeleteCustomerCustomerIdPaymentMethodTokenWithHttpInfo
     *
     * Delete Payment Method Associated with Customer by Token (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountDeleteCustomerCustomerIdPaymentMethodTokenWithHttpInfo($account_id, $customer_id, $payment_token, string $contentType = self::contentTypes['accountDeleteCustomerCustomerIdPaymentMethodToken'][0])
    {
        $request = $this->accountDeleteCustomerCustomerIdPaymentMethodTokenRequest($account_id, $customer_id, $payment_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountDeleteCustomerCustomerIdPaymentMethodToken400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountDeleteCustomerCustomerIdPaymentMethodTokenAsync
     *
     * Delete Payment Method Associated with Customer by Token (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountDeleteCustomerCustomerIdPaymentMethodTokenAsync($account_id, $customer_id, $payment_token, string $contentType = self::contentTypes['accountDeleteCustomerCustomerIdPaymentMethodToken'][0])
    {
        return $this->accountDeleteCustomerCustomerIdPaymentMethodTokenAsyncWithHttpInfo($account_id, $customer_id, $payment_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountDeleteCustomerCustomerIdPaymentMethodTokenAsyncWithHttpInfo
     *
     * Delete Payment Method Associated with Customer by Token (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountDeleteCustomerCustomerIdPaymentMethodTokenAsyncWithHttpInfo($account_id, $customer_id, $payment_token, string $contentType = self::contentTypes['accountDeleteCustomerCustomerIdPaymentMethodToken'][0])
    {
        $returnType = '';
        $request = $this->accountDeleteCustomerCustomerIdPaymentMethodTokenRequest($account_id, $customer_id, $payment_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountDeleteCustomerCustomerIdPaymentMethodToken'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountDeleteCustomerCustomerIdPaymentMethodTokenRequest($account_id, $customer_id, $payment_token, string $contentType = self::contentTypes['accountDeleteCustomerCustomerIdPaymentMethodToken'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountDeleteCustomerCustomerIdPaymentMethodToken'
            );
        }

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling accountDeleteCustomerCustomerIdPaymentMethodToken'
            );
        }

        // verify the required parameter 'payment_token' is set
        if ($payment_token === null || (is_array($payment_token) && count($payment_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_token when calling accountDeleteCustomerCustomerIdPaymentMethodToken'
            );
        }


        $resourcePath = '/account/{accountId}/customer/{customerId}/payment-method/{paymentToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_token !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentToken' . '}',
                ObjectSerializer::toPathValue($payment_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountDeleteCustomerId
     *
     * Delete Customer by ID (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteCustomerId'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountDeleteCustomerId($account_id, $customer_id, string $contentType = self::contentTypes['accountDeleteCustomerId'][0])
    {
        $this->accountDeleteCustomerIdWithHttpInfo($account_id, $customer_id, $contentType);
    }

    /**
     * Operation accountDeleteCustomerIdWithHttpInfo
     *
     * Delete Customer by ID (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteCustomerId'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountDeleteCustomerIdWithHttpInfo($account_id, $customer_id, string $contentType = self::contentTypes['accountDeleteCustomerId'][0])
    {
        $request = $this->accountDeleteCustomerIdRequest($account_id, $customer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountDeleteCustomerIdAsync
     *
     * Delete Customer by ID (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountDeleteCustomerIdAsync($account_id, $customer_id, string $contentType = self::contentTypes['accountDeleteCustomerId'][0])
    {
        return $this->accountDeleteCustomerIdAsyncWithHttpInfo($account_id, $customer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountDeleteCustomerIdAsyncWithHttpInfo
     *
     * Delete Customer by ID (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountDeleteCustomerIdAsyncWithHttpInfo($account_id, $customer_id, string $contentType = self::contentTypes['accountDeleteCustomerId'][0])
    {
        $returnType = '';
        $request = $this->accountDeleteCustomerIdRequest($account_id, $customer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountDeleteCustomerId'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountDeleteCustomerIdRequest($account_id, $customer_id, string $contentType = self::contentTypes['accountDeleteCustomerId'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountDeleteCustomerId'
            );
        }

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling accountDeleteCustomerId'
            );
        }


        $resourcePath = '/account/{accountId}/customer/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetCustomer
     *
     * Query Customers (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomer'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Customer[]|\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountGetCustomer($account_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['accountGetCustomer'][0])
    {
        list($response) = $this->accountGetCustomerWithHttpInfo($account_id, $limit, $skip, $sort, $contentType);
        return $response;
    }

    /**
     * Operation accountGetCustomerWithHttpInfo
     *
     * Query Customers (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomer'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Customer[]|\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetCustomerWithHttpInfo($account_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['accountGetCustomer'][0])
    {
        $request = $this->accountGetCustomerRequest($account_id, $limit, $skip, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\Customer[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Customer[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Customer[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Customer[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Customer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetCustomerAsync
     *
     * Query Customers (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerAsync($account_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['accountGetCustomer'][0])
    {
        return $this->accountGetCustomerAsyncWithHttpInfo($account_id, $limit, $skip, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetCustomerAsyncWithHttpInfo
     *
     * Query Customers (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerAsyncWithHttpInfo($account_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['accountGetCustomer'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Customer[]';
        $request = $this->accountGetCustomerRequest($account_id, $limit, $skip, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetCustomer'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountGetCustomerRequest($account_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['accountGetCustomer'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountGetCustomer'
            );
        }

        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomersApi.accountGetCustomer, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomersApi.accountGetCustomer, must be bigger than or equal to 0.');
        }
        



        $resourcePath = '/account/{accountId}/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            '$limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            '$sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetCustomerCustomerIdPaymentMethodToken
     *
     * Get Payment Method Associated with Customer by Token (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\NotFoundError|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountGetCustomerCustomerIdPaymentMethodToken($account_id, $customer_id, $payment_token, string $contentType = self::contentTypes['accountGetCustomerCustomerIdPaymentMethodToken'][0])
    {
        list($response) = $this->accountGetCustomerCustomerIdPaymentMethodTokenWithHttpInfo($account_id, $customer_id, $payment_token, $contentType);
        return $response;
    }

    /**
     * Operation accountGetCustomerCustomerIdPaymentMethodTokenWithHttpInfo
     *
     * Get Payment Method Associated with Customer by Token (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\NotFoundError|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetCustomerCustomerIdPaymentMethodTokenWithHttpInfo($account_id, $customer_id, $payment_token, string $contentType = self::contentTypes['accountGetCustomerCustomerIdPaymentMethodToken'][0])
    {
        $request = $this->accountGetCustomerCustomerIdPaymentMethodTokenRequest($account_id, $customer_id, $payment_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\NotFoundError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetCustomerCustomerIdPaymentMethodTokenAsync
     *
     * Get Payment Method Associated with Customer by Token (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerCustomerIdPaymentMethodTokenAsync($account_id, $customer_id, $payment_token, string $contentType = self::contentTypes['accountGetCustomerCustomerIdPaymentMethodToken'][0])
    {
        return $this->accountGetCustomerCustomerIdPaymentMethodTokenAsyncWithHttpInfo($account_id, $customer_id, $payment_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetCustomerCustomerIdPaymentMethodTokenAsyncWithHttpInfo
     *
     * Get Payment Method Associated with Customer by Token (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerCustomerIdPaymentMethodTokenAsyncWithHttpInfo($account_id, $customer_id, $payment_token, string $contentType = self::contentTypes['accountGetCustomerCustomerIdPaymentMethodToken'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
        $request = $this->accountGetCustomerCustomerIdPaymentMethodTokenRequest($account_id, $customer_id, $payment_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetCustomerCustomerIdPaymentMethodToken'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountGetCustomerCustomerIdPaymentMethodTokenRequest($account_id, $customer_id, $payment_token, string $contentType = self::contentTypes['accountGetCustomerCustomerIdPaymentMethodToken'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountGetCustomerCustomerIdPaymentMethodToken'
            );
        }

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling accountGetCustomerCustomerIdPaymentMethodToken'
            );
        }

        // verify the required parameter 'payment_token' is set
        if ($payment_token === null || (is_array($payment_token) && count($payment_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_token when calling accountGetCustomerCustomerIdPaymentMethodToken'
            );
        }


        $resourcePath = '/account/{accountId}/customer/{customerId}/payment-method/{paymentToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_token !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentToken' . '}',
                ObjectSerializer::toPathValue($payment_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetCustomerCustomerIdPayments
     *
     * Get Customer Payments (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerCustomerIdPayments'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountGetCustomerCustomerIdPayments($account_id, $customer_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['accountGetCustomerCustomerIdPayments'][0])
    {
        list($response) = $this->accountGetCustomerCustomerIdPaymentsWithHttpInfo($account_id, $customer_id, $sort, $limit, $skip, $contentType);
        return $response;
    }

    /**
     * Operation accountGetCustomerCustomerIdPaymentsWithHttpInfo
     *
     * Get Customer Payments (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerCustomerIdPayments'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetCustomerCustomerIdPaymentsWithHttpInfo($account_id, $customer_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['accountGetCustomerCustomerIdPayments'][0])
    {
        $request = $this->accountGetCustomerCustomerIdPaymentsRequest($account_id, $customer_id, $sort, $limit, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetCustomerCustomerIdPaymentsAsync
     *
     * Get Customer Payments (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerCustomerIdPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerCustomerIdPaymentsAsync($account_id, $customer_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['accountGetCustomerCustomerIdPayments'][0])
    {
        return $this->accountGetCustomerCustomerIdPaymentsAsyncWithHttpInfo($account_id, $customer_id, $sort, $limit, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetCustomerCustomerIdPaymentsAsyncWithHttpInfo
     *
     * Get Customer Payments (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerCustomerIdPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerCustomerIdPaymentsAsyncWithHttpInfo($account_id, $customer_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['accountGetCustomerCustomerIdPayments'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment[]';
        $request = $this->accountGetCustomerCustomerIdPaymentsRequest($account_id, $customer_id, $sort, $limit, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetCustomerCustomerIdPayments'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerCustomerIdPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountGetCustomerCustomerIdPaymentsRequest($account_id, $customer_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['accountGetCustomerCustomerIdPayments'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountGetCustomerCustomerIdPayments'
            );
        }

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling accountGetCustomerCustomerIdPayments'
            );
        }


        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomersApi.accountGetCustomerCustomerIdPayments, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomersApi.accountGetCustomerCustomerIdPayments, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/account/{accountId}/customer/{customerId}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            '$sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            '$limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetCustomerDefaultPaymentMethod
     *
     * Get Default Payment Method Associated to a Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerDefaultPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\NotFoundError|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountGetCustomerDefaultPaymentMethod($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerDefaultPaymentMethod'][0])
    {
        list($response) = $this->accountGetCustomerDefaultPaymentMethodWithHttpInfo($account_id, $customer_id, $contentType);
        return $response;
    }

    /**
     * Operation accountGetCustomerDefaultPaymentMethodWithHttpInfo
     *
     * Get Default Payment Method Associated to a Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerDefaultPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\NotFoundError|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetCustomerDefaultPaymentMethodWithHttpInfo($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerDefaultPaymentMethod'][0])
    {
        $request = $this->accountGetCustomerDefaultPaymentMethodRequest($account_id, $customer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\NotFoundError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetCustomerDefaultPaymentMethodAsync
     *
     * Get Default Payment Method Associated to a Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerDefaultPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerDefaultPaymentMethodAsync($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerDefaultPaymentMethod'][0])
    {
        return $this->accountGetCustomerDefaultPaymentMethodAsyncWithHttpInfo($account_id, $customer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetCustomerDefaultPaymentMethodAsyncWithHttpInfo
     *
     * Get Default Payment Method Associated to a Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerDefaultPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerDefaultPaymentMethodAsyncWithHttpInfo($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerDefaultPaymentMethod'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
        $request = $this->accountGetCustomerDefaultPaymentMethodRequest($account_id, $customer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetCustomerDefaultPaymentMethod'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerDefaultPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountGetCustomerDefaultPaymentMethodRequest($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerDefaultPaymentMethod'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountGetCustomerDefaultPaymentMethod'
            );
        }

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling accountGetCustomerDefaultPaymentMethod'
            );
        }


        $resourcePath = '/account/{accountId}/customer/{customerId}/payment-method/default';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetCustomerId
     *
     * Get Customer by ID (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerId'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Customer|\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountGetCustomerId($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerId'][0])
    {
        list($response) = $this->accountGetCustomerIdWithHttpInfo($account_id, $customer_id, $contentType);
        return $response;
    }

    /**
     * Operation accountGetCustomerIdWithHttpInfo
     *
     * Get Customer by ID (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerId'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Customer|\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetCustomerIdWithHttpInfo($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerId'][0])
    {
        $request = $this->accountGetCustomerIdRequest($account_id, $customer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\Customer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Customer' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Customer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Customer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Customer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetCustomerIdAsync
     *
     * Get Customer by ID (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerIdAsync($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerId'][0])
    {
        return $this->accountGetCustomerIdAsyncWithHttpInfo($account_id, $customer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetCustomerIdAsyncWithHttpInfo
     *
     * Get Customer by ID (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerIdAsyncWithHttpInfo($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerId'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Customer';
        $request = $this->accountGetCustomerIdRequest($account_id, $customer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetCustomerId'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountGetCustomerIdRequest($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerId'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountGetCustomerId'
            );
        }

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling accountGetCustomerId'
            );
        }


        $resourcePath = '/account/{accountId}/customer/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetCustomerIdPaymentMethod
     *
     * Query Payment Methods of a Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\PaymentMethod[]|\TheLogicStudio\ExactPay\Model\NotFoundError|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountGetCustomerIdPaymentMethod($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerIdPaymentMethod'][0])
    {
        list($response) = $this->accountGetCustomerIdPaymentMethodWithHttpInfo($account_id, $customer_id, $contentType);
        return $response;
    }

    /**
     * Operation accountGetCustomerIdPaymentMethodWithHttpInfo
     *
     * Query Payment Methods of a Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\PaymentMethod[]|\TheLogicStudio\ExactPay\Model\NotFoundError|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetCustomerIdPaymentMethodWithHttpInfo($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerIdPaymentMethod'][0])
    {
        $request = $this->accountGetCustomerIdPaymentMethodRequest($account_id, $customer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\PaymentMethod[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PaymentMethod[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PaymentMethod[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\NotFoundError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetCustomerIdPaymentMethodAsync
     *
     * Query Payment Methods of a Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerIdPaymentMethodAsync($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerIdPaymentMethod'][0])
    {
        return $this->accountGetCustomerIdPaymentMethodAsyncWithHttpInfo($account_id, $customer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetCustomerIdPaymentMethodAsyncWithHttpInfo
     *
     * Query Payment Methods of a Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerIdPaymentMethodAsyncWithHttpInfo($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerIdPaymentMethod'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod[]';
        $request = $this->accountGetCustomerIdPaymentMethodRequest($account_id, $customer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetCustomerIdPaymentMethod'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountGetCustomerIdPaymentMethodRequest($account_id, $customer_id, string $contentType = self::contentTypes['accountGetCustomerIdPaymentMethod'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountGetCustomerIdPaymentMethod'
            );
        }

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling accountGetCustomerIdPaymentMethod'
            );
        }


        $resourcePath = '/account/{accountId}/customer/{customerId}/payment-method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetCustomerTokenPaymentMethod
     *
     * Query Payment Methods for Customer by customer token (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_token Represents the token associated to the customer. This can be used as a regular Payment Method and will use the default Payment Method linked to the Customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerTokenPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\PaymentMethod[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\NotFoundError|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountGetCustomerTokenPaymentMethod($account_id, $customer_token, string $contentType = self::contentTypes['accountGetCustomerTokenPaymentMethod'][0])
    {
        list($response) = $this->accountGetCustomerTokenPaymentMethodWithHttpInfo($account_id, $customer_token, $contentType);
        return $response;
    }

    /**
     * Operation accountGetCustomerTokenPaymentMethodWithHttpInfo
     *
     * Query Payment Methods for Customer by customer token (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_token Represents the token associated to the customer. This can be used as a regular Payment Method and will use the default Payment Method linked to the Customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerTokenPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\PaymentMethod[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\NotFoundError|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetCustomerTokenPaymentMethodWithHttpInfo($account_id, $customer_token, string $contentType = self::contentTypes['accountGetCustomerTokenPaymentMethod'][0])
    {
        $request = $this->accountGetCustomerTokenPaymentMethodRequest($account_id, $customer_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\PaymentMethod[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PaymentMethod[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PaymentMethod[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\NotFoundError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetCustomerTokenPaymentMethodAsync
     *
     * Query Payment Methods for Customer by customer token (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_token Represents the token associated to the customer. This can be used as a regular Payment Method and will use the default Payment Method linked to the Customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerTokenPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerTokenPaymentMethodAsync($account_id, $customer_token, string $contentType = self::contentTypes['accountGetCustomerTokenPaymentMethod'][0])
    {
        return $this->accountGetCustomerTokenPaymentMethodAsyncWithHttpInfo($account_id, $customer_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetCustomerTokenPaymentMethodAsyncWithHttpInfo
     *
     * Query Payment Methods for Customer by customer token (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_token Represents the token associated to the customer. This can be used as a regular Payment Method and will use the default Payment Method linked to the Customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerTokenPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetCustomerTokenPaymentMethodAsyncWithHttpInfo($account_id, $customer_token, string $contentType = self::contentTypes['accountGetCustomerTokenPaymentMethod'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod[]';
        $request = $this->accountGetCustomerTokenPaymentMethodRequest($account_id, $customer_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetCustomerTokenPaymentMethod'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_token Represents the token associated to the customer. This can be used as a regular Payment Method and will use the default Payment Method linked to the Customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetCustomerTokenPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountGetCustomerTokenPaymentMethodRequest($account_id, $customer_token, string $contentType = self::contentTypes['accountGetCustomerTokenPaymentMethod'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountGetCustomerTokenPaymentMethod'
            );
        }

        // verify the required parameter 'customer_token' is set
        if ($customer_token === null || (is_array($customer_token) && count($customer_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_token when calling accountGetCustomerTokenPaymentMethod'
            );
        }


        $resourcePath = '/account/{accountId}/customer-token/{customerToken}/payment-method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_token !== null) {
            $resourcePath = str_replace(
                '{' . 'customerToken' . '}',
                ObjectSerializer::toPathValue($customer_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountPostCustomer
     *
     * Create Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCustomer'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Customer|\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountPostCustomer($account_id, $new_customer = null, string $contentType = self::contentTypes['accountPostCustomer'][0])
    {
        list($response) = $this->accountPostCustomerWithHttpInfo($account_id, $new_customer, $contentType);
        return $response;
    }

    /**
     * Operation accountPostCustomerWithHttpInfo
     *
     * Create Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCustomer'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Customer|\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountPostCustomerWithHttpInfo($account_id, $new_customer = null, string $contentType = self::contentTypes['accountPostCustomer'][0])
    {
        $request = $this->accountPostCustomerRequest($account_id, $new_customer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\Customer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Customer' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Customer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Customer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Customer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountPostCustomerAsync
     *
     * Create Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPostCustomerAsync($account_id, $new_customer = null, string $contentType = self::contentTypes['accountPostCustomer'][0])
    {
        return $this->accountPostCustomerAsyncWithHttpInfo($account_id, $new_customer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountPostCustomerAsyncWithHttpInfo
     *
     * Create Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPostCustomerAsyncWithHttpInfo($account_id, $new_customer = null, string $contentType = self::contentTypes['accountPostCustomer'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Customer';
        $request = $this->accountPostCustomerRequest($account_id, $new_customer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountPostCustomer'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountPostCustomerRequest($account_id, $new_customer = null, string $contentType = self::contentTypes['accountPostCustomer'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountPostCustomer'
            );
        }



        $resourcePath = '/account/{accountId}/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($new_customer)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($new_customer));
            } else {
                $httpBody = $new_customer;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountPostCustomerIdPaymentMethod
     *
     * Attach Payment Method to a Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\LinkTokenToCustomer $link_token_to_customer link_token_to_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\AccountPostCustomerIdPaymentMethod400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountPostCustomerIdPaymentMethod($account_id, $customer_id, $link_token_to_customer = null, string $contentType = self::contentTypes['accountPostCustomerIdPaymentMethod'][0])
    {
        list($response) = $this->accountPostCustomerIdPaymentMethodWithHttpInfo($account_id, $customer_id, $link_token_to_customer, $contentType);
        return $response;
    }

    /**
     * Operation accountPostCustomerIdPaymentMethodWithHttpInfo
     *
     * Attach Payment Method to a Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\LinkTokenToCustomer $link_token_to_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\AccountPostCustomerIdPaymentMethod400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountPostCustomerIdPaymentMethodWithHttpInfo($account_id, $customer_id, $link_token_to_customer = null, string $contentType = self::contentTypes['accountPostCustomerIdPaymentMethod'][0])
    {
        $request = $this->accountPostCustomerIdPaymentMethodRequest($account_id, $customer_id, $link_token_to_customer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\AccountPostCustomerIdPaymentMethod400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountPostCustomerIdPaymentMethod400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountPostCustomerIdPaymentMethod400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountPostCustomerIdPaymentMethod400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountPostCustomerIdPaymentMethodAsync
     *
     * Attach Payment Method to a Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\LinkTokenToCustomer $link_token_to_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPostCustomerIdPaymentMethodAsync($account_id, $customer_id, $link_token_to_customer = null, string $contentType = self::contentTypes['accountPostCustomerIdPaymentMethod'][0])
    {
        return $this->accountPostCustomerIdPaymentMethodAsyncWithHttpInfo($account_id, $customer_id, $link_token_to_customer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountPostCustomerIdPaymentMethodAsyncWithHttpInfo
     *
     * Attach Payment Method to a Customer (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\LinkTokenToCustomer $link_token_to_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPostCustomerIdPaymentMethodAsyncWithHttpInfo($account_id, $customer_id, $link_token_to_customer = null, string $contentType = self::contentTypes['accountPostCustomerIdPaymentMethod'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
        $request = $this->accountPostCustomerIdPaymentMethodRequest($account_id, $customer_id, $link_token_to_customer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountPostCustomerIdPaymentMethod'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\LinkTokenToCustomer $link_token_to_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountPostCustomerIdPaymentMethodRequest($account_id, $customer_id, $link_token_to_customer = null, string $contentType = self::contentTypes['accountPostCustomerIdPaymentMethod'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountPostCustomerIdPaymentMethod'
            );
        }

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling accountPostCustomerIdPaymentMethod'
            );
        }



        $resourcePath = '/account/{accountId}/customer/{customerId}/payment-method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($link_token_to_customer)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($link_token_to_customer));
            } else {
                $httpBody = $link_token_to_customer;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountPutCustomerId
     *
     * Update Customer by ID (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdateCustomer $update_customer update_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPutCustomerId'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountPutCustomerId($account_id, $customer_id, $update_customer = null, string $contentType = self::contentTypes['accountPutCustomerId'][0])
    {
        $this->accountPutCustomerIdWithHttpInfo($account_id, $customer_id, $update_customer, $contentType);
    }

    /**
     * Operation accountPutCustomerIdWithHttpInfo
     *
     * Update Customer by ID (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdateCustomer $update_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPutCustomerId'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountPutCustomerIdWithHttpInfo($account_id, $customer_id, $update_customer = null, string $contentType = self::contentTypes['accountPutCustomerId'][0])
    {
        $request = $this->accountPutCustomerIdRequest($account_id, $customer_id, $update_customer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountPutCustomerIdAsync
     *
     * Update Customer by ID (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdateCustomer $update_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPutCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPutCustomerIdAsync($account_id, $customer_id, $update_customer = null, string $contentType = self::contentTypes['accountPutCustomerId'][0])
    {
        return $this->accountPutCustomerIdAsyncWithHttpInfo($account_id, $customer_id, $update_customer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountPutCustomerIdAsyncWithHttpInfo
     *
     * Update Customer by ID (Partner context)
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdateCustomer $update_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPutCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPutCustomerIdAsyncWithHttpInfo($account_id, $customer_id, $update_customer = null, string $contentType = self::contentTypes['accountPutCustomerId'][0])
    {
        $returnType = '';
        $request = $this->accountPutCustomerIdRequest($account_id, $customer_id, $update_customer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountPutCustomerId'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdateCustomer $update_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPutCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountPutCustomerIdRequest($account_id, $customer_id, $update_customer = null, string $contentType = self::contentTypes['accountPutCustomerId'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountPutCustomerId'
            );
        }

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling accountPutCustomerId'
            );
        }



        $resourcePath = '/account/{accountId}/customer/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_customer)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_customer));
            } else {
                $httpBody = $update_customer;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCustomerCustomerIdPaymentMethodToken
     *
     * Delete Payment Method Associated with Customer by Token (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCustomerCustomerIdPaymentMethodToken($customer_id, $payment_token, string $contentType = self::contentTypes['deleteCustomerCustomerIdPaymentMethodToken'][0])
    {
        $this->deleteCustomerCustomerIdPaymentMethodTokenWithHttpInfo($customer_id, $payment_token, $contentType);
    }

    /**
     * Operation deleteCustomerCustomerIdPaymentMethodTokenWithHttpInfo
     *
     * Delete Payment Method Associated with Customer by Token (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomerCustomerIdPaymentMethodTokenWithHttpInfo($customer_id, $payment_token, string $contentType = self::contentTypes['deleteCustomerCustomerIdPaymentMethodToken'][0])
    {
        $request = $this->deleteCustomerCustomerIdPaymentMethodTokenRequest($customer_id, $payment_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountDeleteCustomerCustomerIdPaymentMethodToken400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomerCustomerIdPaymentMethodTokenAsync
     *
     * Delete Payment Method Associated with Customer by Token (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomerCustomerIdPaymentMethodTokenAsync($customer_id, $payment_token, string $contentType = self::contentTypes['deleteCustomerCustomerIdPaymentMethodToken'][0])
    {
        return $this->deleteCustomerCustomerIdPaymentMethodTokenAsyncWithHttpInfo($customer_id, $payment_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomerCustomerIdPaymentMethodTokenAsyncWithHttpInfo
     *
     * Delete Payment Method Associated with Customer by Token (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomerCustomerIdPaymentMethodTokenAsyncWithHttpInfo($customer_id, $payment_token, string $contentType = self::contentTypes['deleteCustomerCustomerIdPaymentMethodToken'][0])
    {
        $returnType = '';
        $request = $this->deleteCustomerCustomerIdPaymentMethodTokenRequest($customer_id, $payment_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomerCustomerIdPaymentMethodToken'
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCustomerCustomerIdPaymentMethodTokenRequest($customer_id, $payment_token, string $contentType = self::contentTypes['deleteCustomerCustomerIdPaymentMethodToken'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling deleteCustomerCustomerIdPaymentMethodToken'
            );
        }

        // verify the required parameter 'payment_token' is set
        if ($payment_token === null || (is_array($payment_token) && count($payment_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_token when calling deleteCustomerCustomerIdPaymentMethodToken'
            );
        }


        $resourcePath = '/customer/{customerId}/payment-method/{paymentToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_token !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentToken' . '}',
                ObjectSerializer::toPathValue($payment_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCustomerId
     *
     * Delete Customer by ID (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomerId'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCustomerId($customer_id, string $contentType = self::contentTypes['deleteCustomerId'][0])
    {
        $this->deleteCustomerIdWithHttpInfo($customer_id, $contentType);
    }

    /**
     * Operation deleteCustomerIdWithHttpInfo
     *
     * Delete Customer by ID (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomerId'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomerIdWithHttpInfo($customer_id, string $contentType = self::contentTypes['deleteCustomerId'][0])
    {
        $request = $this->deleteCustomerIdRequest($customer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomerIdAsync
     *
     * Delete Customer by ID (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomerIdAsync($customer_id, string $contentType = self::contentTypes['deleteCustomerId'][0])
    {
        return $this->deleteCustomerIdAsyncWithHttpInfo($customer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomerIdAsyncWithHttpInfo
     *
     * Delete Customer by ID (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomerIdAsyncWithHttpInfo($customer_id, string $contentType = self::contentTypes['deleteCustomerId'][0])
    {
        $returnType = '';
        $request = $this->deleteCustomerIdRequest($customer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomerId'
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCustomerIdRequest($customer_id, string $contentType = self::contentTypes['deleteCustomerId'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling deleteCustomerId'
            );
        }


        $resourcePath = '/customer/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomer
     *
     * Query customers (Sub-merchant context)
     *
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomer'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Customer[]|\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function getCustomer($limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getCustomer'][0])
    {
        list($response) = $this->getCustomerWithHttpInfo($limit, $skip, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerWithHttpInfo
     *
     * Query customers (Sub-merchant context)
     *
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomer'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Customer[]|\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerWithHttpInfo($limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getCustomer'][0])
    {
        $request = $this->getCustomerRequest($limit, $skip, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\Customer[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Customer[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Customer[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Customer[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Customer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerAsync
     *
     * Query customers (Sub-merchant context)
     *
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerAsync($limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getCustomer'][0])
    {
        return $this->getCustomerAsyncWithHttpInfo($limit, $skip, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerAsyncWithHttpInfo
     *
     * Query customers (Sub-merchant context)
     *
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerAsyncWithHttpInfo($limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getCustomer'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Customer[]';
        $request = $this->getCustomerRequest($limit, $skip, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomer'
     *
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerRequest($limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getCustomer'][0])
    {

        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomersApi.getCustomer, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomersApi.getCustomer, must be bigger than or equal to 0.');
        }
        



        $resourcePath = '/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            '$limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            '$sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerCustomerIdPaymentMethodToken
     *
     * Get Payment Method Associated with Customer by Token (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\NotFoundError|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function getCustomerCustomerIdPaymentMethodToken($customer_id, $payment_token, string $contentType = self::contentTypes['getCustomerCustomerIdPaymentMethodToken'][0])
    {
        list($response) = $this->getCustomerCustomerIdPaymentMethodTokenWithHttpInfo($customer_id, $payment_token, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerCustomerIdPaymentMethodTokenWithHttpInfo
     *
     * Get Payment Method Associated with Customer by Token (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\NotFoundError|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerCustomerIdPaymentMethodTokenWithHttpInfo($customer_id, $payment_token, string $contentType = self::contentTypes['getCustomerCustomerIdPaymentMethodToken'][0])
    {
        $request = $this->getCustomerCustomerIdPaymentMethodTokenRequest($customer_id, $payment_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\NotFoundError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerCustomerIdPaymentMethodTokenAsync
     *
     * Get Payment Method Associated with Customer by Token (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerCustomerIdPaymentMethodTokenAsync($customer_id, $payment_token, string $contentType = self::contentTypes['getCustomerCustomerIdPaymentMethodToken'][0])
    {
        return $this->getCustomerCustomerIdPaymentMethodTokenAsyncWithHttpInfo($customer_id, $payment_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerCustomerIdPaymentMethodTokenAsyncWithHttpInfo
     *
     * Get Payment Method Associated with Customer by Token (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerCustomerIdPaymentMethodTokenAsyncWithHttpInfo($customer_id, $payment_token, string $contentType = self::contentTypes['getCustomerCustomerIdPaymentMethodToken'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
        $request = $this->getCustomerCustomerIdPaymentMethodTokenRequest($customer_id, $payment_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerCustomerIdPaymentMethodToken'
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $payment_token Payment token Identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerCustomerIdPaymentMethodToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerCustomerIdPaymentMethodTokenRequest($customer_id, $payment_token, string $contentType = self::contentTypes['getCustomerCustomerIdPaymentMethodToken'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling getCustomerCustomerIdPaymentMethodToken'
            );
        }

        // verify the required parameter 'payment_token' is set
        if ($payment_token === null || (is_array($payment_token) && count($payment_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_token when calling getCustomerCustomerIdPaymentMethodToken'
            );
        }


        $resourcePath = '/customer/{customerId}/payment-method/{paymentToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_token !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentToken' . '}',
                ObjectSerializer::toPathValue($payment_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerCustomerIdPayments
     *
     * Get Customer Payments (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerCustomerIdPayments'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function getCustomerCustomerIdPayments($customer_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['getCustomerCustomerIdPayments'][0])
    {
        list($response) = $this->getCustomerCustomerIdPaymentsWithHttpInfo($customer_id, $sort, $limit, $skip, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerCustomerIdPaymentsWithHttpInfo
     *
     * Get Customer Payments (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerCustomerIdPayments'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerCustomerIdPaymentsWithHttpInfo($customer_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['getCustomerCustomerIdPayments'][0])
    {
        $request = $this->getCustomerCustomerIdPaymentsRequest($customer_id, $sort, $limit, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerCustomerIdPaymentsAsync
     *
     * Get Customer Payments (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerCustomerIdPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerCustomerIdPaymentsAsync($customer_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['getCustomerCustomerIdPayments'][0])
    {
        return $this->getCustomerCustomerIdPaymentsAsyncWithHttpInfo($customer_id, $sort, $limit, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerCustomerIdPaymentsAsyncWithHttpInfo
     *
     * Get Customer Payments (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerCustomerIdPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerCustomerIdPaymentsAsyncWithHttpInfo($customer_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['getCustomerCustomerIdPayments'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment[]';
        $request = $this->getCustomerCustomerIdPaymentsRequest($customer_id, $sort, $limit, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerCustomerIdPayments'
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerCustomerIdPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerCustomerIdPaymentsRequest($customer_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['getCustomerCustomerIdPayments'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling getCustomerCustomerIdPayments'
            );
        }


        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomersApi.getCustomerCustomerIdPayments, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomersApi.getCustomerCustomerIdPayments, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/customer/{customerId}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            '$sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            '$limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerId
     *
     * Get Customer by ID (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerId'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Customer|\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function getCustomerId($customer_id, string $contentType = self::contentTypes['getCustomerId'][0])
    {
        list($response) = $this->getCustomerIdWithHttpInfo($customer_id, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerIdWithHttpInfo
     *
     * Get Customer by ID (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerId'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Customer|\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerIdWithHttpInfo($customer_id, string $contentType = self::contentTypes['getCustomerId'][0])
    {
        $request = $this->getCustomerIdRequest($customer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\Customer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Customer' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Customer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Customer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Customer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerIdAsync
     *
     * Get Customer by ID (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerIdAsync($customer_id, string $contentType = self::contentTypes['getCustomerId'][0])
    {
        return $this->getCustomerIdAsyncWithHttpInfo($customer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerIdAsyncWithHttpInfo
     *
     * Get Customer by ID (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerIdAsyncWithHttpInfo($customer_id, string $contentType = self::contentTypes['getCustomerId'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Customer';
        $request = $this->getCustomerIdRequest($customer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerId'
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerIdRequest($customer_id, string $contentType = self::contentTypes['getCustomerId'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling getCustomerId'
            );
        }


        $resourcePath = '/customer/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerIdPaymentMethod
     *
     * Query Payment Methods of a Customer (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\PaymentMethod[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function getCustomerIdPaymentMethod($customer_id, string $contentType = self::contentTypes['getCustomerIdPaymentMethod'][0])
    {
        list($response) = $this->getCustomerIdPaymentMethodWithHttpInfo($customer_id, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerIdPaymentMethodWithHttpInfo
     *
     * Query Payment Methods of a Customer (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\PaymentMethod[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerIdPaymentMethodWithHttpInfo($customer_id, string $contentType = self::contentTypes['getCustomerIdPaymentMethod'][0])
    {
        $request = $this->getCustomerIdPaymentMethodRequest($customer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\PaymentMethod[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PaymentMethod[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PaymentMethod[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerIdPaymentMethodAsync
     *
     * Query Payment Methods of a Customer (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerIdPaymentMethodAsync($customer_id, string $contentType = self::contentTypes['getCustomerIdPaymentMethod'][0])
    {
        return $this->getCustomerIdPaymentMethodAsyncWithHttpInfo($customer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerIdPaymentMethodAsyncWithHttpInfo
     *
     * Query Payment Methods of a Customer (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerIdPaymentMethodAsyncWithHttpInfo($customer_id, string $contentType = self::contentTypes['getCustomerIdPaymentMethod'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod[]';
        $request = $this->getCustomerIdPaymentMethodRequest($customer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerIdPaymentMethod'
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerIdPaymentMethodRequest($customer_id, string $contentType = self::contentTypes['getCustomerIdPaymentMethod'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling getCustomerIdPaymentMethod'
            );
        }


        $resourcePath = '/customer/{customerId}/payment-method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerTokenPaymentMethod
     *
     * Query Payment Methods for Customer by customer token (Sub-merchant context)
     *
     * @param  string $customer_token Represents the token associated to the customer. This can be used as a regular Payment Method and will use the default Payment Method linked to the Customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerTokenPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\PaymentMethod[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\NotFoundError|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function getCustomerTokenPaymentMethod($customer_token, string $contentType = self::contentTypes['getCustomerTokenPaymentMethod'][0])
    {
        list($response) = $this->getCustomerTokenPaymentMethodWithHttpInfo($customer_token, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerTokenPaymentMethodWithHttpInfo
     *
     * Query Payment Methods for Customer by customer token (Sub-merchant context)
     *
     * @param  string $customer_token Represents the token associated to the customer. This can be used as a regular Payment Method and will use the default Payment Method linked to the Customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerTokenPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\PaymentMethod[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\NotFoundError|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerTokenPaymentMethodWithHttpInfo($customer_token, string $contentType = self::contentTypes['getCustomerTokenPaymentMethod'][0])
    {
        $request = $this->getCustomerTokenPaymentMethodRequest($customer_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\PaymentMethod[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PaymentMethod[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PaymentMethod[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\NotFoundError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerTokenPaymentMethodAsync
     *
     * Query Payment Methods for Customer by customer token (Sub-merchant context)
     *
     * @param  string $customer_token Represents the token associated to the customer. This can be used as a regular Payment Method and will use the default Payment Method linked to the Customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerTokenPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerTokenPaymentMethodAsync($customer_token, string $contentType = self::contentTypes['getCustomerTokenPaymentMethod'][0])
    {
        return $this->getCustomerTokenPaymentMethodAsyncWithHttpInfo($customer_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerTokenPaymentMethodAsyncWithHttpInfo
     *
     * Query Payment Methods for Customer by customer token (Sub-merchant context)
     *
     * @param  string $customer_token Represents the token associated to the customer. This can be used as a regular Payment Method and will use the default Payment Method linked to the Customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerTokenPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerTokenPaymentMethodAsyncWithHttpInfo($customer_token, string $contentType = self::contentTypes['getCustomerTokenPaymentMethod'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod[]';
        $request = $this->getCustomerTokenPaymentMethodRequest($customer_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerTokenPaymentMethod'
     *
     * @param  string $customer_token Represents the token associated to the customer. This can be used as a regular Payment Method and will use the default Payment Method linked to the Customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerTokenPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerTokenPaymentMethodRequest($customer_token, string $contentType = self::contentTypes['getCustomerTokenPaymentMethod'][0])
    {

        // verify the required parameter 'customer_token' is set
        if ($customer_token === null || (is_array($customer_token) && count($customer_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_token when calling getCustomerTokenPaymentMethod'
            );
        }


        $resourcePath = '/customer-token/{customerToken}/payment-method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_token !== null) {
            $resourcePath = str_replace(
                '{' . 'customerToken' . '}',
                ObjectSerializer::toPathValue($customer_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCustomer
     *
     * Create Customer for (Sub-merchant context)
     *
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomer'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Customer|\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function postCustomer($new_customer = null, string $contentType = self::contentTypes['postCustomer'][0])
    {
        list($response) = $this->postCustomerWithHttpInfo($new_customer, $contentType);
        return $response;
    }

    /**
     * Operation postCustomerWithHttpInfo
     *
     * Create Customer for (Sub-merchant context)
     *
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomer'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Customer|\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCustomerWithHttpInfo($new_customer = null, string $contentType = self::contentTypes['postCustomer'][0])
    {
        $request = $this->postCustomerRequest($new_customer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\Customer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Customer' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Customer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Customer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Customer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCustomerAsync
     *
     * Create Customer for (Sub-merchant context)
     *
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCustomerAsync($new_customer = null, string $contentType = self::contentTypes['postCustomer'][0])
    {
        return $this->postCustomerAsyncWithHttpInfo($new_customer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCustomerAsyncWithHttpInfo
     *
     * Create Customer for (Sub-merchant context)
     *
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCustomerAsyncWithHttpInfo($new_customer = null, string $contentType = self::contentTypes['postCustomer'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Customer';
        $request = $this->postCustomerRequest($new_customer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCustomer'
     *
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCustomerRequest($new_customer = null, string $contentType = self::contentTypes['postCustomer'][0])
    {



        $resourcePath = '/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($new_customer)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($new_customer));
            } else {
                $httpBody = $new_customer;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCustomerIdPaymentMethod
     *
     * Attach Payment Method to a Customer (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\LinkPaymentMethod $link_payment_method link_payment_method (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\AccountPostCustomerIdPaymentMethod400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function postCustomerIdPaymentMethod($customer_id, $link_payment_method = null, string $contentType = self::contentTypes['postCustomerIdPaymentMethod'][0])
    {
        list($response) = $this->postCustomerIdPaymentMethodWithHttpInfo($customer_id, $link_payment_method, $contentType);
        return $response;
    }

    /**
     * Operation postCustomerIdPaymentMethodWithHttpInfo
     *
     * Attach Payment Method to a Customer (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\LinkPaymentMethod $link_payment_method (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\PaymentMethod|\TheLogicStudio\ExactPay\Model\AccountPostCustomerIdPaymentMethod400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCustomerIdPaymentMethodWithHttpInfo($customer_id, $link_payment_method = null, string $contentType = self::contentTypes['postCustomerIdPaymentMethod'][0])
    {
        $request = $this->postCustomerIdPaymentMethodRequest($customer_id, $link_payment_method, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\AccountPostCustomerIdPaymentMethod400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountPostCustomerIdPaymentMethod400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountPostCustomerIdPaymentMethod400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountPostCustomerIdPaymentMethod400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCustomerIdPaymentMethodAsync
     *
     * Attach Payment Method to a Customer (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\LinkPaymentMethod $link_payment_method (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCustomerIdPaymentMethodAsync($customer_id, $link_payment_method = null, string $contentType = self::contentTypes['postCustomerIdPaymentMethod'][0])
    {
        return $this->postCustomerIdPaymentMethodAsyncWithHttpInfo($customer_id, $link_payment_method, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCustomerIdPaymentMethodAsyncWithHttpInfo
     *
     * Attach Payment Method to a Customer (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\LinkPaymentMethod $link_payment_method (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCustomerIdPaymentMethodAsyncWithHttpInfo($customer_id, $link_payment_method = null, string $contentType = self::contentTypes['postCustomerIdPaymentMethod'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\PaymentMethod';
        $request = $this->postCustomerIdPaymentMethodRequest($customer_id, $link_payment_method, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCustomerIdPaymentMethod'
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\LinkPaymentMethod $link_payment_method (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCustomerIdPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCustomerIdPaymentMethodRequest($customer_id, $link_payment_method = null, string $contentType = self::contentTypes['postCustomerIdPaymentMethod'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling postCustomerIdPaymentMethod'
            );
        }



        $resourcePath = '/customer/{customerId}/payment-method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($link_payment_method)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($link_payment_method));
            } else {
                $httpBody = $link_payment_method;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCustomerId
     *
     * Update Customer by ID (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCustomerId'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putCustomerId($customer_id, $new_customer = null, string $contentType = self::contentTypes['putCustomerId'][0])
    {
        $this->putCustomerIdWithHttpInfo($customer_id, $new_customer, $contentType);
    }

    /**
     * Operation putCustomerIdWithHttpInfo
     *
     * Update Customer by ID (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCustomerId'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCustomerIdWithHttpInfo($customer_id, $new_customer = null, string $contentType = self::contentTypes['putCustomerId'][0])
    {
        $request = $this->putCustomerIdRequest($customer_id, $new_customer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountPostCustomer400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\AccountGetCustomer404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCustomerIdAsync
     *
     * Update Customer by ID (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCustomerIdAsync($customer_id, $new_customer = null, string $contentType = self::contentTypes['putCustomerId'][0])
    {
        return $this->putCustomerIdAsyncWithHttpInfo($customer_id, $new_customer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCustomerIdAsyncWithHttpInfo
     *
     * Update Customer by ID (Sub-merchant context)
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCustomerIdAsyncWithHttpInfo($customer_id, $new_customer = null, string $contentType = self::contentTypes['putCustomerId'][0])
    {
        $returnType = '';
        $request = $this->putCustomerIdRequest($customer_id, $new_customer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCustomerId'
     *
     * @param  string $customer_id The Customer identifier. Represents the Customer that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\NewCustomer $new_customer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCustomerIdRequest($customer_id, $new_customer = null, string $contentType = self::contentTypes['putCustomerId'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling putCustomerId'
            );
        }



        $resourcePath = '/customer/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($new_customer)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($new_customer));
            } else {
                $httpBody = $new_customer;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
