<?php
/**
 * DocumentManagementApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TheLogicStudio\ExactPay\ApiException;
use TheLogicStudio\ExactPay\Configuration;
use TheLogicStudio\ExactPay\HeaderSelector;
use TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * DocumentManagementApi Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createDocumentRequest' => [
            'application/json',
        ],
        'deleteDocumentById' => [
            'application/json',
        ],
        'deleteDocumentRequestById' => [
            'application/json',
        ],
        'getDocumentById' => [
            'application/json',
        ],
        'getDocuments' => [
            'application/json',
        ],
        'getDownloadAllDocuments' => [
            'application/json',
        ],
        'getListDocumentRequests' => [
            'application/json',
        ],
        'getRetrieveDocument' => [
            'application/json',
        ],
        'getRetrieveDocumentRequest' => [
            'application/json',
        ],
        'listDocumentRequestByToken' => [
            'application/json',
        ],
        'putUpdateDocumentTypeById' => [
            'application/json',
        ],
        'updateDocumentRequest' => [
            'application/json',
        ],
        'uploadDocument' => [
            'multipart/form-data',
        ],
        'uploadDocumentByToken' => [
            'multipart/form-data',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDocumentRequest
     *
     * Request Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreateDocumentRequestRequest $create_document_request_request create_document_request_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentRequest'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestCreate|\TheLogicStudio\ExactPay\Model\ZodError[]|string|string|string|string
     */
    public function createDocumentRequest($organization_id, $onboarding_id, $create_document_request_request = null, string $contentType = self::contentTypes['createDocumentRequest'][0])
    {
        list($response) = $this->createDocumentRequestWithHttpInfo($organization_id, $onboarding_id, $create_document_request_request, $contentType);
        return $response;
    }

    /**
     * Operation createDocumentRequestWithHttpInfo
     *
     * Request Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreateDocumentRequestRequest $create_document_request_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentRequest'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestCreate|\TheLogicStudio\ExactPay\Model\ZodError[]|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDocumentRequestWithHttpInfo($organization_id, $onboarding_id, $create_document_request_request = null, string $contentType = self::contentTypes['createDocumentRequest'][0])
    {
        $request = $this->createDocumentRequestRequest($organization_id, $onboarding_id, $create_document_request_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestCreate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestCreate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestCreate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\ZodError[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\ZodError[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\ZodError[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestCreate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestCreate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\ZodError[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDocumentRequestAsync
     *
     * Request Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreateDocumentRequestRequest $create_document_request_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocumentRequestAsync($organization_id, $onboarding_id, $create_document_request_request = null, string $contentType = self::contentTypes['createDocumentRequest'][0])
    {
        return $this->createDocumentRequestAsyncWithHttpInfo($organization_id, $onboarding_id, $create_document_request_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDocumentRequestAsyncWithHttpInfo
     *
     * Request Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreateDocumentRequestRequest $create_document_request_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocumentRequestAsyncWithHttpInfo($organization_id, $onboarding_id, $create_document_request_request = null, string $contentType = self::contentTypes['createDocumentRequest'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestCreate';
        $request = $this->createDocumentRequestRequest($organization_id, $onboarding_id, $create_document_request_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDocumentRequest'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreateDocumentRequestRequest $create_document_request_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDocumentRequestRequest($organization_id, $onboarding_id, $create_document_request_request = null, string $contentType = self::contentTypes['createDocumentRequest'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createDocumentRequest'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling createDocumentRequest'
            );
        }



        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/document-request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_document_request_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_document_request_request));
            } else {
                $httpBody = $create_document_request_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDocumentById
     *
     * Delete Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentById'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDocumentById($organization_id, $onboarding_id, $document_id, string $contentType = self::contentTypes['deleteDocumentById'][0])
    {
        $this->deleteDocumentByIdWithHttpInfo($organization_id, $onboarding_id, $document_id, $contentType);
    }

    /**
     * Operation deleteDocumentByIdWithHttpInfo
     *
     * Delete Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentById'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDocumentByIdWithHttpInfo($organization_id, $onboarding_id, $document_id, string $contentType = self::contentTypes['deleteDocumentById'][0])
    {
        $request = $this->deleteDocumentByIdRequest($organization_id, $onboarding_id, $document_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDocumentByIdAsync
     *
     * Delete Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDocumentByIdAsync($organization_id, $onboarding_id, $document_id, string $contentType = self::contentTypes['deleteDocumentById'][0])
    {
        return $this->deleteDocumentByIdAsyncWithHttpInfo($organization_id, $onboarding_id, $document_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDocumentByIdAsyncWithHttpInfo
     *
     * Delete Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDocumentByIdAsyncWithHttpInfo($organization_id, $onboarding_id, $document_id, string $contentType = self::contentTypes['deleteDocumentById'][0])
    {
        $returnType = '';
        $request = $this->deleteDocumentByIdRequest($organization_id, $onboarding_id, $document_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDocumentById'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDocumentByIdRequest($organization_id, $onboarding_id, $document_id, string $contentType = self::contentTypes['deleteDocumentById'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteDocumentById'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling deleteDocumentById'
            );
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling deleteDocumentById'
            );
        }


        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/document/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDocumentRequestById
     *
     * Delete Document Request
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentRequestById'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDocumentRequestById($organization_id, $onboarding_id, $document_request_id, string $contentType = self::contentTypes['deleteDocumentRequestById'][0])
    {
        $this->deleteDocumentRequestByIdWithHttpInfo($organization_id, $onboarding_id, $document_request_id, $contentType);
    }

    /**
     * Operation deleteDocumentRequestByIdWithHttpInfo
     *
     * Delete Document Request
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentRequestById'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDocumentRequestByIdWithHttpInfo($organization_id, $onboarding_id, $document_request_id, string $contentType = self::contentTypes['deleteDocumentRequestById'][0])
    {
        $request = $this->deleteDocumentRequestByIdRequest($organization_id, $onboarding_id, $document_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDocumentRequestByIdAsync
     *
     * Delete Document Request
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentRequestById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDocumentRequestByIdAsync($organization_id, $onboarding_id, $document_request_id, string $contentType = self::contentTypes['deleteDocumentRequestById'][0])
    {
        return $this->deleteDocumentRequestByIdAsyncWithHttpInfo($organization_id, $onboarding_id, $document_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDocumentRequestByIdAsyncWithHttpInfo
     *
     * Delete Document Request
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentRequestById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDocumentRequestByIdAsyncWithHttpInfo($organization_id, $onboarding_id, $document_request_id, string $contentType = self::contentTypes['deleteDocumentRequestById'][0])
    {
        $returnType = '';
        $request = $this->deleteDocumentRequestByIdRequest($organization_id, $onboarding_id, $document_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDocumentRequestById'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentRequestById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDocumentRequestByIdRequest($organization_id, $onboarding_id, $document_request_id, string $contentType = self::contentTypes['deleteDocumentRequestById'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteDocumentRequestById'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling deleteDocumentRequestById'
            );
        }

        // verify the required parameter 'document_request_id' is set
        if ($document_request_id === null || (is_array($document_request_id) && count($document_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_request_id when calling deleteDocumentRequestById'
            );
        }


        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/document-request/{documentRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }
        // path params
        if ($document_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentRequestId' . '}',
                ObjectSerializer::toPathValue($document_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocumentById
     *
     * Download Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  bool $onboarding_is_deleted Indicates whether to download the Document for deleted Onboarding or not. If not sent, it will download the Document for currently active Onboardings under your Organization. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentById'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|string|string|string|string
     */
    public function getDocumentById($organization_id, $onboarding_id, $document_id, $onboarding_is_deleted = false, string $contentType = self::contentTypes['getDocumentById'][0])
    {
        list($response) = $this->getDocumentByIdWithHttpInfo($organization_id, $onboarding_id, $document_id, $onboarding_is_deleted, $contentType);
        return $response;
    }

    /**
     * Operation getDocumentByIdWithHttpInfo
     *
     * Download Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  bool $onboarding_is_deleted Indicates whether to download the Document for deleted Onboarding or not. If not sent, it will download the Document for currently active Onboardings under your Organization. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentById'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentByIdWithHttpInfo($organization_id, $onboarding_id, $document_id, $onboarding_is_deleted = false, string $contentType = self::contentTypes['getDocumentById'][0])
    {
        $request = $this->getDocumentByIdRequest($organization_id, $onboarding_id, $document_id, $onboarding_is_deleted, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentByIdAsync
     *
     * Download Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  bool $onboarding_is_deleted Indicates whether to download the Document for deleted Onboarding or not. If not sent, it will download the Document for currently active Onboardings under your Organization. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentByIdAsync($organization_id, $onboarding_id, $document_id, $onboarding_is_deleted = false, string $contentType = self::contentTypes['getDocumentById'][0])
    {
        return $this->getDocumentByIdAsyncWithHttpInfo($organization_id, $onboarding_id, $document_id, $onboarding_is_deleted, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentByIdAsyncWithHttpInfo
     *
     * Download Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  bool $onboarding_is_deleted Indicates whether to download the Document for deleted Onboarding or not. If not sent, it will download the Document for currently active Onboardings under your Organization. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentByIdAsyncWithHttpInfo($organization_id, $onboarding_id, $document_id, $onboarding_is_deleted = false, string $contentType = self::contentTypes['getDocumentById'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getDocumentByIdRequest($organization_id, $onboarding_id, $document_id, $onboarding_is_deleted, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocumentById'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  bool $onboarding_is_deleted Indicates whether to download the Document for deleted Onboarding or not. If not sent, it will download the Document for currently active Onboardings under your Organization. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentByIdRequest($organization_id, $onboarding_id, $document_id, $onboarding_is_deleted = false, string $contentType = self::contentTypes['getDocumentById'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getDocumentById'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling getDocumentById'
            );
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getDocumentById'
            );
        }



        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/document/{documentId}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $onboarding_is_deleted,
            'onboardingIsDeleted', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/zip', 'text/plain', 'plain/text', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocuments
     *
     * List Uploaded Documents
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Document[]|string|string|string|string
     */
    public function getDocuments($organization_id, $onboarding_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getDocuments'][0])
    {
        list($response) = $this->getDocumentsWithHttpInfo($organization_id, $onboarding_id, $limit, $skip, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getDocumentsWithHttpInfo
     *
     * List Uploaded Documents
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Document[]|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentsWithHttpInfo($organization_id, $onboarding_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getDocuments'][0])
    {
        $request = $this->getDocumentsRequest($organization_id, $onboarding_id, $limit, $skip, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\Document[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Document[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Document[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Document[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentsAsync
     *
     * List Uploaded Documents
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentsAsync($organization_id, $onboarding_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getDocuments'][0])
    {
        return $this->getDocumentsAsyncWithHttpInfo($organization_id, $onboarding_id, $limit, $skip, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentsAsyncWithHttpInfo
     *
     * List Uploaded Documents
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentsAsyncWithHttpInfo($organization_id, $onboarding_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getDocuments'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Document[]';
        $request = $this->getDocumentsRequest($organization_id, $onboarding_id, $limit, $skip, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocuments'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentsRequest($organization_id, $onboarding_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getDocuments'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getDocuments'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling getDocuments'
            );
        }

        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DocumentManagementApi.getDocuments, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DocumentManagementApi.getDocuments, must be bigger than or equal to 0.');
        }
        



        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            '$limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            '$sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', 'plain/text', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDownloadAllDocuments
     *
     * Download All Documents
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  bool $onboarding_is_deleted Indicates whether to download all of the Documents for deleted Onboarding or not. If not sent, it will download all the Documents for currently active Onboardings under your Organization. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDownloadAllDocuments'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|string|string|string|string
     */
    public function getDownloadAllDocuments($organization_id, $onboarding_id, $onboarding_is_deleted = false, string $contentType = self::contentTypes['getDownloadAllDocuments'][0])
    {
        list($response) = $this->getDownloadAllDocumentsWithHttpInfo($organization_id, $onboarding_id, $onboarding_is_deleted, $contentType);
        return $response;
    }

    /**
     * Operation getDownloadAllDocumentsWithHttpInfo
     *
     * Download All Documents
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  bool $onboarding_is_deleted Indicates whether to download all of the Documents for deleted Onboarding or not. If not sent, it will download all the Documents for currently active Onboardings under your Organization. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDownloadAllDocuments'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDownloadAllDocumentsWithHttpInfo($organization_id, $onboarding_id, $onboarding_is_deleted = false, string $contentType = self::contentTypes['getDownloadAllDocuments'][0])
    {
        $request = $this->getDownloadAllDocumentsRequest($organization_id, $onboarding_id, $onboarding_is_deleted, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDownloadAllDocumentsAsync
     *
     * Download All Documents
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  bool $onboarding_is_deleted Indicates whether to download all of the Documents for deleted Onboarding or not. If not sent, it will download all the Documents for currently active Onboardings under your Organization. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDownloadAllDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDownloadAllDocumentsAsync($organization_id, $onboarding_id, $onboarding_is_deleted = false, string $contentType = self::contentTypes['getDownloadAllDocuments'][0])
    {
        return $this->getDownloadAllDocumentsAsyncWithHttpInfo($organization_id, $onboarding_id, $onboarding_is_deleted, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDownloadAllDocumentsAsyncWithHttpInfo
     *
     * Download All Documents
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  bool $onboarding_is_deleted Indicates whether to download all of the Documents for deleted Onboarding or not. If not sent, it will download all the Documents for currently active Onboardings under your Organization. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDownloadAllDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDownloadAllDocumentsAsyncWithHttpInfo($organization_id, $onboarding_id, $onboarding_is_deleted = false, string $contentType = self::contentTypes['getDownloadAllDocuments'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getDownloadAllDocumentsRequest($organization_id, $onboarding_id, $onboarding_is_deleted, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDownloadAllDocuments'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  bool $onboarding_is_deleted Indicates whether to download all of the Documents for deleted Onboarding or not. If not sent, it will download all the Documents for currently active Onboardings under your Organization. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDownloadAllDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDownloadAllDocumentsRequest($organization_id, $onboarding_id, $onboarding_is_deleted = false, string $contentType = self::contentTypes['getDownloadAllDocuments'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getDownloadAllDocuments'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling getDownloadAllDocuments'
            );
        }



        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/document/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $onboarding_is_deleted,
            'onboardingIsDeleted', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/zip', 'text/plain', 'plain/text', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListDocumentRequests
     *
     * List Document Requests
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListDocumentRequests'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse[]|string|string|string|string
     */
    public function getListDocumentRequests($organization_id, $onboarding_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getListDocumentRequests'][0])
    {
        list($response) = $this->getListDocumentRequestsWithHttpInfo($organization_id, $onboarding_id, $limit, $skip, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getListDocumentRequestsWithHttpInfo
     *
     * List Document Requests
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListDocumentRequests'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse[]|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListDocumentRequestsWithHttpInfo($organization_id, $onboarding_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getListDocumentRequests'][0])
    {
        $request = $this->getListDocumentRequestsRequest($organization_id, $onboarding_id, $limit, $skip, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListDocumentRequestsAsync
     *
     * List Document Requests
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListDocumentRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListDocumentRequestsAsync($organization_id, $onboarding_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getListDocumentRequests'][0])
    {
        return $this->getListDocumentRequestsAsyncWithHttpInfo($organization_id, $onboarding_id, $limit, $skip, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListDocumentRequestsAsyncWithHttpInfo
     *
     * List Document Requests
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListDocumentRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListDocumentRequestsAsyncWithHttpInfo($organization_id, $onboarding_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getListDocumentRequests'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse[]';
        $request = $this->getListDocumentRequestsRequest($organization_id, $onboarding_id, $limit, $skip, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListDocumentRequests'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $sort Sets the sort order if the field names are passed. Sorting can be done by multiple fields in the specified order, &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). To sort by a &#x60;fieldName&#x60;, use the &#x60;fieldName:&#x60; followed by the sort order. To sort by fields in the nested object, use &#x60;objectName.fieldName&#x60; followed by the sort order. Sorting can be done by multiple fields by providing the &#x60;fieldNames&#x60; with sort direction as comma-separated values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListDocumentRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListDocumentRequestsRequest($organization_id, $onboarding_id, $limit = 100, $skip = 0, $sort = null, string $contentType = self::contentTypes['getListDocumentRequests'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getListDocumentRequests'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling getListDocumentRequests'
            );
        }

        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DocumentManagementApi.getListDocumentRequests, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DocumentManagementApi.getListDocumentRequests, must be bigger than or equal to 0.');
        }
        



        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/document-request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            '$limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            '$sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', 'plain/text', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRetrieveDocument
     *
     * Retrieve Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRetrieveDocument'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Document|string|string|string|string
     */
    public function getRetrieveDocument($organization_id, $onboarding_id, $document_id, string $contentType = self::contentTypes['getRetrieveDocument'][0])
    {
        list($response) = $this->getRetrieveDocumentWithHttpInfo($organization_id, $onboarding_id, $document_id, $contentType);
        return $response;
    }

    /**
     * Operation getRetrieveDocumentWithHttpInfo
     *
     * Retrieve Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRetrieveDocument'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Document|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRetrieveDocumentWithHttpInfo($organization_id, $onboarding_id, $document_id, string $contentType = self::contentTypes['getRetrieveDocument'][0])
    {
        $request = $this->getRetrieveDocumentRequest($organization_id, $onboarding_id, $document_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\Document' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Document' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Document', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Document';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRetrieveDocumentAsync
     *
     * Retrieve Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRetrieveDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRetrieveDocumentAsync($organization_id, $onboarding_id, $document_id, string $contentType = self::contentTypes['getRetrieveDocument'][0])
    {
        return $this->getRetrieveDocumentAsyncWithHttpInfo($organization_id, $onboarding_id, $document_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRetrieveDocumentAsyncWithHttpInfo
     *
     * Retrieve Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRetrieveDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRetrieveDocumentAsyncWithHttpInfo($organization_id, $onboarding_id, $document_id, string $contentType = self::contentTypes['getRetrieveDocument'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Document';
        $request = $this->getRetrieveDocumentRequest($organization_id, $onboarding_id, $document_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRetrieveDocument'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRetrieveDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRetrieveDocumentRequest($organization_id, $onboarding_id, $document_id, string $contentType = self::contentTypes['getRetrieveDocument'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getRetrieveDocument'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling getRetrieveDocument'
            );
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getRetrieveDocument'
            );
        }


        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/document/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', 'plain/text', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRetrieveDocumentRequest
     *
     * Retrieve Document Request
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRetrieveDocumentRequest'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse|string|string|string|string
     */
    public function getRetrieveDocumentRequest($organization_id, $onboarding_id, $document_request_id, string $contentType = self::contentTypes['getRetrieveDocumentRequest'][0])
    {
        list($response) = $this->getRetrieveDocumentRequestWithHttpInfo($organization_id, $onboarding_id, $document_request_id, $contentType);
        return $response;
    }

    /**
     * Operation getRetrieveDocumentRequestWithHttpInfo
     *
     * Retrieve Document Request
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRetrieveDocumentRequest'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRetrieveDocumentRequestWithHttpInfo($organization_id, $onboarding_id, $document_request_id, string $contentType = self::contentTypes['getRetrieveDocumentRequest'][0])
    {
        $request = $this->getRetrieveDocumentRequestRequest($organization_id, $onboarding_id, $document_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRetrieveDocumentRequestAsync
     *
     * Retrieve Document Request
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRetrieveDocumentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRetrieveDocumentRequestAsync($organization_id, $onboarding_id, $document_request_id, string $contentType = self::contentTypes['getRetrieveDocumentRequest'][0])
    {
        return $this->getRetrieveDocumentRequestAsyncWithHttpInfo($organization_id, $onboarding_id, $document_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRetrieveDocumentRequestAsyncWithHttpInfo
     *
     * Retrieve Document Request
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRetrieveDocumentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRetrieveDocumentRequestAsyncWithHttpInfo($organization_id, $onboarding_id, $document_request_id, string $contentType = self::contentTypes['getRetrieveDocumentRequest'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestResponse';
        $request = $this->getRetrieveDocumentRequestRequest($organization_id, $onboarding_id, $document_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRetrieveDocumentRequest'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRetrieveDocumentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRetrieveDocumentRequestRequest($organization_id, $onboarding_id, $document_request_id, string $contentType = self::contentTypes['getRetrieveDocumentRequest'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getRetrieveDocumentRequest'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling getRetrieveDocumentRequest'
            );
        }

        // verify the required parameter 'document_request_id' is set
        if ($document_request_id === null || (is_array($document_request_id) && count($document_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_request_id when calling getRetrieveDocumentRequest'
            );
        }


        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/document-request/{documentRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }
        // path params
        if ($document_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentRequestId' . '}',
                ObjectSerializer::toPathValue($document_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', 'plain/text', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDocumentRequestByToken
     *
     * List Document Requests by Token
     *
     * @param  string $document_request_token The Onboarding Application Document Request Token. The Token can be found in the Upload Document link URL sent via the Document Request email using [Request Document](/operations/createDocumentRequest) API endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDocumentRequestByToken'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\ListDocumentRequestByToken200ResponseInner[]|string|string|string
     */
    public function listDocumentRequestByToken($document_request_token, string $contentType = self::contentTypes['listDocumentRequestByToken'][0])
    {
        list($response) = $this->listDocumentRequestByTokenWithHttpInfo($document_request_token, $contentType);
        return $response;
    }

    /**
     * Operation listDocumentRequestByTokenWithHttpInfo
     *
     * List Document Requests by Token
     *
     * @param  string $document_request_token The Onboarding Application Document Request Token. The Token can be found in the Upload Document link URL sent via the Document Request email using [Request Document](/operations/createDocumentRequest) API endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDocumentRequestByToken'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\ListDocumentRequestByToken200ResponseInner[]|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDocumentRequestByTokenWithHttpInfo($document_request_token, string $contentType = self::contentTypes['listDocumentRequestByToken'][0])
    {
        $request = $this->listDocumentRequestByTokenRequest($document_request_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\ListDocumentRequestByToken200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\ListDocumentRequestByToken200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\ListDocumentRequestByToken200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\ListDocumentRequestByToken200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\ListDocumentRequestByToken200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDocumentRequestByTokenAsync
     *
     * List Document Requests by Token
     *
     * @param  string $document_request_token The Onboarding Application Document Request Token. The Token can be found in the Upload Document link URL sent via the Document Request email using [Request Document](/operations/createDocumentRequest) API endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDocumentRequestByToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDocumentRequestByTokenAsync($document_request_token, string $contentType = self::contentTypes['listDocumentRequestByToken'][0])
    {
        return $this->listDocumentRequestByTokenAsyncWithHttpInfo($document_request_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDocumentRequestByTokenAsyncWithHttpInfo
     *
     * List Document Requests by Token
     *
     * @param  string $document_request_token The Onboarding Application Document Request Token. The Token can be found in the Upload Document link URL sent via the Document Request email using [Request Document](/operations/createDocumentRequest) API endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDocumentRequestByToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDocumentRequestByTokenAsyncWithHttpInfo($document_request_token, string $contentType = self::contentTypes['listDocumentRequestByToken'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\ListDocumentRequestByToken200ResponseInner[]';
        $request = $this->listDocumentRequestByTokenRequest($document_request_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDocumentRequestByToken'
     *
     * @param  string $document_request_token The Onboarding Application Document Request Token. The Token can be found in the Upload Document link URL sent via the Document Request email using [Request Document](/operations/createDocumentRequest) API endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDocumentRequestByToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDocumentRequestByTokenRequest($document_request_token, string $contentType = self::contentTypes['listDocumentRequestByToken'][0])
    {

        // verify the required parameter 'document_request_token' is set
        if ($document_request_token === null || (is_array($document_request_token) && count($document_request_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_request_token when calling listDocumentRequestByToken'
            );
        }


        $resourcePath = '/document-request/{documentRequestToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_request_token !== null) {
            $resourcePath = str_replace(
                '{' . 'documentRequestToken' . '}',
                ObjectSerializer::toPathValue($document_request_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putUpdateDocumentTypeById
     *
     * Update Document Type
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\PutUpdateDocumentTypeByIdRequest $put_update_document_type_by_id_request put_update_document_type_by_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putUpdateDocumentTypeById'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putUpdateDocumentTypeById($organization_id, $onboarding_id, $document_id, $put_update_document_type_by_id_request = null, string $contentType = self::contentTypes['putUpdateDocumentTypeById'][0])
    {
        $this->putUpdateDocumentTypeByIdWithHttpInfo($organization_id, $onboarding_id, $document_id, $put_update_document_type_by_id_request, $contentType);
    }

    /**
     * Operation putUpdateDocumentTypeByIdWithHttpInfo
     *
     * Update Document Type
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\PutUpdateDocumentTypeByIdRequest $put_update_document_type_by_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putUpdateDocumentTypeById'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putUpdateDocumentTypeByIdWithHttpInfo($organization_id, $onboarding_id, $document_id, $put_update_document_type_by_id_request = null, string $contentType = self::contentTypes['putUpdateDocumentTypeById'][0])
    {
        $request = $this->putUpdateDocumentTypeByIdRequest($organization_id, $onboarding_id, $document_id, $put_update_document_type_by_id_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putUpdateDocumentTypeByIdAsync
     *
     * Update Document Type
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\PutUpdateDocumentTypeByIdRequest $put_update_document_type_by_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putUpdateDocumentTypeById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putUpdateDocumentTypeByIdAsync($organization_id, $onboarding_id, $document_id, $put_update_document_type_by_id_request = null, string $contentType = self::contentTypes['putUpdateDocumentTypeById'][0])
    {
        return $this->putUpdateDocumentTypeByIdAsyncWithHttpInfo($organization_id, $onboarding_id, $document_id, $put_update_document_type_by_id_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putUpdateDocumentTypeByIdAsyncWithHttpInfo
     *
     * Update Document Type
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\PutUpdateDocumentTypeByIdRequest $put_update_document_type_by_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putUpdateDocumentTypeById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putUpdateDocumentTypeByIdAsyncWithHttpInfo($organization_id, $onboarding_id, $document_id, $put_update_document_type_by_id_request = null, string $contentType = self::contentTypes['putUpdateDocumentTypeById'][0])
    {
        $returnType = '';
        $request = $this->putUpdateDocumentTypeByIdRequest($organization_id, $onboarding_id, $document_id, $put_update_document_type_by_id_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putUpdateDocumentTypeById'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_id The Document identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\PutUpdateDocumentTypeByIdRequest $put_update_document_type_by_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putUpdateDocumentTypeById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putUpdateDocumentTypeByIdRequest($organization_id, $onboarding_id, $document_id, $put_update_document_type_by_id_request = null, string $contentType = self::contentTypes['putUpdateDocumentTypeById'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling putUpdateDocumentTypeById'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling putUpdateDocumentTypeById'
            );
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling putUpdateDocumentTypeById'
            );
        }



        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/document/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['plain/text', 'text/plain', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_update_document_type_by_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_update_document_type_by_id_request));
            } else {
                $httpBody = $put_update_document_type_by_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDocumentRequest
     *
     * Update Document Request
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestUpdate $onboarding_document_request_update onboarding_document_request_update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentRequest'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateDocumentRequest($organization_id, $onboarding_id, $document_request_id, $onboarding_document_request_update = null, string $contentType = self::contentTypes['updateDocumentRequest'][0])
    {
        $this->updateDocumentRequestWithHttpInfo($organization_id, $onboarding_id, $document_request_id, $onboarding_document_request_update, $contentType);
    }

    /**
     * Operation updateDocumentRequestWithHttpInfo
     *
     * Update Document Request
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestUpdate $onboarding_document_request_update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentRequest'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDocumentRequestWithHttpInfo($organization_id, $onboarding_id, $document_request_id, $onboarding_document_request_update = null, string $contentType = self::contentTypes['updateDocumentRequest'][0])
    {
        $request = $this->updateDocumentRequestRequest($organization_id, $onboarding_id, $document_request_id, $onboarding_document_request_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\ZodError[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDocumentRequestAsync
     *
     * Update Document Request
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestUpdate $onboarding_document_request_update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDocumentRequestAsync($organization_id, $onboarding_id, $document_request_id, $onboarding_document_request_update = null, string $contentType = self::contentTypes['updateDocumentRequest'][0])
    {
        return $this->updateDocumentRequestAsyncWithHttpInfo($organization_id, $onboarding_id, $document_request_id, $onboarding_document_request_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDocumentRequestAsyncWithHttpInfo
     *
     * Update Document Request
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestUpdate $onboarding_document_request_update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDocumentRequestAsyncWithHttpInfo($organization_id, $onboarding_id, $document_request_id, $onboarding_document_request_update = null, string $contentType = self::contentTypes['updateDocumentRequest'][0])
    {
        $returnType = '';
        $request = $this->updateDocumentRequestRequest($organization_id, $onboarding_id, $document_request_id, $onboarding_document_request_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDocumentRequest'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $document_request_id The Document Request identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\OnboardingDocumentRequestUpdate $onboarding_document_request_update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocumentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDocumentRequestRequest($organization_id, $onboarding_id, $document_request_id, $onboarding_document_request_update = null, string $contentType = self::contentTypes['updateDocumentRequest'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateDocumentRequest'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling updateDocumentRequest'
            );
        }

        // verify the required parameter 'document_request_id' is set
        if ($document_request_id === null || (is_array($document_request_id) && count($document_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_request_id when calling updateDocumentRequest'
            );
        }



        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/document-request/{documentRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }
        // path params
        if ($document_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentRequestId' . '}',
                ObjectSerializer::toPathValue($document_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($onboarding_document_request_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($onboarding_document_request_update));
            } else {
                $httpBody = $onboarding_document_request_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadDocument
     *
     * Upload Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $name The Name of the Document being uploaded. (required)
     * @param  \TheLogicStudio\ExactPay\Model\DocumentUploadType $type type (required)
     * @param  \SplFileObject $files The binary data of the Document being uploaded. The following file types are supported &#x60;bmp&#x60;,&#x60;csv&#x60;,&#x60;doc&#x60;,&#x60;docx&#x60;,&#x60;jpg&#x60;,&#x60;pdf&#x60;,&#x60;png&#x60;,&#x60;rtf&#x60;,&#x60;txt&#x60;,&#x60;xls&#x60; and &#x60;xlsx&#x60;. An HTTP &#x60;500 Internal Server Error&#x60; code with a JSON response will be returned when the Document is not uploaded. (required)
     * @param  string $document_request The Document Request identifier if you are uploading the Document in response to a Document Request you created. (optional)
     * @param  string $onboarding_is_deleted A boolean string. To upload a Document for soft deleted Onboarding, pass \\\&quot;true\\\&quot;. This field is not required if you upload a Document for the active Onboarding. (optional)
     * @param  string $principal The unique identifier of the Principal you are uploading the Document for. This field is required if you upload the Document to one of the Principals added in the Onboarding Application. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDocument'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\UploadDocumentResponse|\TheLogicStudio\ExactPay\Model\ZodError[]|string|string|string|string|string|string
     */
    public function uploadDocument($organization_id, $onboarding_id, $name, $type, $files, $document_request = null, $onboarding_is_deleted = null, $principal = null, string $contentType = self::contentTypes['uploadDocument'][0])
    {
        list($response) = $this->uploadDocumentWithHttpInfo($organization_id, $onboarding_id, $name, $type, $files, $document_request, $onboarding_is_deleted, $principal, $contentType);
        return $response;
    }

    /**
     * Operation uploadDocumentWithHttpInfo
     *
     * Upload Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $name The Name of the Document being uploaded. (required)
     * @param  \TheLogicStudio\ExactPay\Model\DocumentUploadType $type (required)
     * @param  \SplFileObject $files The binary data of the Document being uploaded. The following file types are supported &#x60;bmp&#x60;,&#x60;csv&#x60;,&#x60;doc&#x60;,&#x60;docx&#x60;,&#x60;jpg&#x60;,&#x60;pdf&#x60;,&#x60;png&#x60;,&#x60;rtf&#x60;,&#x60;txt&#x60;,&#x60;xls&#x60; and &#x60;xlsx&#x60;. An HTTP &#x60;500 Internal Server Error&#x60; code with a JSON response will be returned when the Document is not uploaded. (required)
     * @param  string $document_request The Document Request identifier if you are uploading the Document in response to a Document Request you created. (optional)
     * @param  string $onboarding_is_deleted A boolean string. To upload a Document for soft deleted Onboarding, pass \\\&quot;true\\\&quot;. This field is not required if you upload a Document for the active Onboarding. (optional)
     * @param  string $principal The unique identifier of the Principal you are uploading the Document for. This field is required if you upload the Document to one of the Principals added in the Onboarding Application. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDocument'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\UploadDocumentResponse|\TheLogicStudio\ExactPay\Model\ZodError[]|string|string|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadDocumentWithHttpInfo($organization_id, $onboarding_id, $name, $type, $files, $document_request = null, $onboarding_is_deleted = null, $principal = null, string $contentType = self::contentTypes['uploadDocument'][0])
    {
        $request = $this->uploadDocumentRequest($organization_id, $onboarding_id, $name, $type, $files, $document_request, $onboarding_is_deleted, $principal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\UploadDocumentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\UploadDocumentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\UploadDocumentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\ZodError[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\ZodError[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\ZodError[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\UploadDocumentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\UploadDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\ZodError[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadDocumentAsync
     *
     * Upload Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $name The Name of the Document being uploaded. (required)
     * @param  \TheLogicStudio\ExactPay\Model\DocumentUploadType $type (required)
     * @param  \SplFileObject $files The binary data of the Document being uploaded. The following file types are supported &#x60;bmp&#x60;,&#x60;csv&#x60;,&#x60;doc&#x60;,&#x60;docx&#x60;,&#x60;jpg&#x60;,&#x60;pdf&#x60;,&#x60;png&#x60;,&#x60;rtf&#x60;,&#x60;txt&#x60;,&#x60;xls&#x60; and &#x60;xlsx&#x60;. An HTTP &#x60;500 Internal Server Error&#x60; code with a JSON response will be returned when the Document is not uploaded. (required)
     * @param  string $document_request The Document Request identifier if you are uploading the Document in response to a Document Request you created. (optional)
     * @param  string $onboarding_is_deleted A boolean string. To upload a Document for soft deleted Onboarding, pass \\\&quot;true\\\&quot;. This field is not required if you upload a Document for the active Onboarding. (optional)
     * @param  string $principal The unique identifier of the Principal you are uploading the Document for. This field is required if you upload the Document to one of the Principals added in the Onboarding Application. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadDocumentAsync($organization_id, $onboarding_id, $name, $type, $files, $document_request = null, $onboarding_is_deleted = null, $principal = null, string $contentType = self::contentTypes['uploadDocument'][0])
    {
        return $this->uploadDocumentAsyncWithHttpInfo($organization_id, $onboarding_id, $name, $type, $files, $document_request, $onboarding_is_deleted, $principal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadDocumentAsyncWithHttpInfo
     *
     * Upload Document
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $name The Name of the Document being uploaded. (required)
     * @param  \TheLogicStudio\ExactPay\Model\DocumentUploadType $type (required)
     * @param  \SplFileObject $files The binary data of the Document being uploaded. The following file types are supported &#x60;bmp&#x60;,&#x60;csv&#x60;,&#x60;doc&#x60;,&#x60;docx&#x60;,&#x60;jpg&#x60;,&#x60;pdf&#x60;,&#x60;png&#x60;,&#x60;rtf&#x60;,&#x60;txt&#x60;,&#x60;xls&#x60; and &#x60;xlsx&#x60;. An HTTP &#x60;500 Internal Server Error&#x60; code with a JSON response will be returned when the Document is not uploaded. (required)
     * @param  string $document_request The Document Request identifier if you are uploading the Document in response to a Document Request you created. (optional)
     * @param  string $onboarding_is_deleted A boolean string. To upload a Document for soft deleted Onboarding, pass \\\&quot;true\\\&quot;. This field is not required if you upload a Document for the active Onboarding. (optional)
     * @param  string $principal The unique identifier of the Principal you are uploading the Document for. This field is required if you upload the Document to one of the Principals added in the Onboarding Application. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadDocumentAsyncWithHttpInfo($organization_id, $onboarding_id, $name, $type, $files, $document_request = null, $onboarding_is_deleted = null, $principal = null, string $contentType = self::contentTypes['uploadDocument'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\UploadDocumentResponse';
        $request = $this->uploadDocumentRequest($organization_id, $onboarding_id, $name, $type, $files, $document_request, $onboarding_is_deleted, $principal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadDocument'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $onboarding_id The Onboarding Application identifier. (required)
     * @param  string $name The Name of the Document being uploaded. (required)
     * @param  \TheLogicStudio\ExactPay\Model\DocumentUploadType $type (required)
     * @param  \SplFileObject $files The binary data of the Document being uploaded. The following file types are supported &#x60;bmp&#x60;,&#x60;csv&#x60;,&#x60;doc&#x60;,&#x60;docx&#x60;,&#x60;jpg&#x60;,&#x60;pdf&#x60;,&#x60;png&#x60;,&#x60;rtf&#x60;,&#x60;txt&#x60;,&#x60;xls&#x60; and &#x60;xlsx&#x60;. An HTTP &#x60;500 Internal Server Error&#x60; code with a JSON response will be returned when the Document is not uploaded. (required)
     * @param  string $document_request The Document Request identifier if you are uploading the Document in response to a Document Request you created. (optional)
     * @param  string $onboarding_is_deleted A boolean string. To upload a Document for soft deleted Onboarding, pass \\\&quot;true\\\&quot;. This field is not required if you upload a Document for the active Onboarding. (optional)
     * @param  string $principal The unique identifier of the Principal you are uploading the Document for. This field is required if you upload the Document to one of the Principals added in the Onboarding Application. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadDocumentRequest($organization_id, $onboarding_id, $name, $type, $files, $document_request = null, $onboarding_is_deleted = null, $principal = null, string $contentType = self::contentTypes['uploadDocument'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling uploadDocument'
            );
        }

        // verify the required parameter 'onboarding_id' is set
        if ($onboarding_id === null || (is_array($onboarding_id) && count($onboarding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onboarding_id when calling uploadDocument'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling uploadDocument'
            );
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling uploadDocument'
            );
        }

        // verify the required parameter 'files' is set
        if ($files === null || (is_array($files) && count($files) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $files when calling uploadDocument'
            );
        }





        $resourcePath = '/organization/{organizationId}/onboarding/{onboardingId}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($onboarding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'onboardingId' . '}',
                ObjectSerializer::toPathValue($onboarding_id),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($document_request !== null) {
            $formParams['documentRequest'] = ObjectSerializer::toFormValue($document_request);
        }
        // form params
        if ($files !== null) {
            $multipart = true;
            $formParams['files'] = [];
            $paramFiles = is_array($files) ? $files : [$files];
            foreach ($paramFiles as $paramFile) {
                $formParams['files'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($onboarding_is_deleted !== null) {
            $formParams['onboardingIsDeleted'] = ObjectSerializer::toFormValue($onboarding_is_deleted);
        }
        // form params
        if ($principal !== null) {
            $formParams['principal'] = ObjectSerializer::toFormValue($principal);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'plain/text', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadDocumentByToken
     *
     * Upload Document using Token
     *
     * @param  string $token The Onboarding Token returned in [Create Onboarding](/operations/createOnboarding) response. This token is valid only for 10 mintues after the Onboarding Application is submitted. (required)
     * @param  string $name The Name of the Document being uploaded. (required)
     * @param  \TheLogicStudio\ExactPay\Model\DocumentUploadType $type type (required)
     * @param  \SplFileObject $files The binary data of the Document being uploaded. The following file types are supported &#x60;bmp&#x60;,&#x60;csv&#x60;,&#x60;doc&#x60;,&#x60;docx&#x60;,&#x60;jpg&#x60;,&#x60;pdf&#x60;,&#x60;png&#x60;,&#x60;rtf&#x60;,&#x60;txt&#x60;,&#x60;xls&#x60; and &#x60;xlsx&#x60;. An HTTP &#x60;500 Internal Server Error&#x60; code with a JSON response will be returned when the Document is not uploaded. (required)
     * @param  string $principal The unique identifier of the Principal you are uploading the Document for. This field is required if you upload the Document to one of the Principals added in the Onboarding Application. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDocumentByToken'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\UploadDocumentResponse|\TheLogicStudio\ExactPay\Model\ZodError[]|string|string|string|string|string|string
     */
    public function uploadDocumentByToken($token, $name, $type, $files, $principal = null, string $contentType = self::contentTypes['uploadDocumentByToken'][0])
    {
        list($response) = $this->uploadDocumentByTokenWithHttpInfo($token, $name, $type, $files, $principal, $contentType);
        return $response;
    }

    /**
     * Operation uploadDocumentByTokenWithHttpInfo
     *
     * Upload Document using Token
     *
     * @param  string $token The Onboarding Token returned in [Create Onboarding](/operations/createOnboarding) response. This token is valid only for 10 mintues after the Onboarding Application is submitted. (required)
     * @param  string $name The Name of the Document being uploaded. (required)
     * @param  \TheLogicStudio\ExactPay\Model\DocumentUploadType $type (required)
     * @param  \SplFileObject $files The binary data of the Document being uploaded. The following file types are supported &#x60;bmp&#x60;,&#x60;csv&#x60;,&#x60;doc&#x60;,&#x60;docx&#x60;,&#x60;jpg&#x60;,&#x60;pdf&#x60;,&#x60;png&#x60;,&#x60;rtf&#x60;,&#x60;txt&#x60;,&#x60;xls&#x60; and &#x60;xlsx&#x60;. An HTTP &#x60;500 Internal Server Error&#x60; code with a JSON response will be returned when the Document is not uploaded. (required)
     * @param  string $principal The unique identifier of the Principal you are uploading the Document for. This field is required if you upload the Document to one of the Principals added in the Onboarding Application. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDocumentByToken'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\UploadDocumentResponse|\TheLogicStudio\ExactPay\Model\ZodError[]|string|string|string|string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadDocumentByTokenWithHttpInfo($token, $name, $type, $files, $principal = null, string $contentType = self::contentTypes['uploadDocumentByToken'][0])
    {
        $request = $this->uploadDocumentByTokenRequest($token, $name, $type, $files, $principal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\UploadDocumentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\UploadDocumentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\UploadDocumentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\ZodError[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\ZodError[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\ZodError[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\UploadDocumentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\UploadDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\ZodError[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadDocumentByTokenAsync
     *
     * Upload Document using Token
     *
     * @param  string $token The Onboarding Token returned in [Create Onboarding](/operations/createOnboarding) response. This token is valid only for 10 mintues after the Onboarding Application is submitted. (required)
     * @param  string $name The Name of the Document being uploaded. (required)
     * @param  \TheLogicStudio\ExactPay\Model\DocumentUploadType $type (required)
     * @param  \SplFileObject $files The binary data of the Document being uploaded. The following file types are supported &#x60;bmp&#x60;,&#x60;csv&#x60;,&#x60;doc&#x60;,&#x60;docx&#x60;,&#x60;jpg&#x60;,&#x60;pdf&#x60;,&#x60;png&#x60;,&#x60;rtf&#x60;,&#x60;txt&#x60;,&#x60;xls&#x60; and &#x60;xlsx&#x60;. An HTTP &#x60;500 Internal Server Error&#x60; code with a JSON response will be returned when the Document is not uploaded. (required)
     * @param  string $principal The unique identifier of the Principal you are uploading the Document for. This field is required if you upload the Document to one of the Principals added in the Onboarding Application. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDocumentByToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadDocumentByTokenAsync($token, $name, $type, $files, $principal = null, string $contentType = self::contentTypes['uploadDocumentByToken'][0])
    {
        return $this->uploadDocumentByTokenAsyncWithHttpInfo($token, $name, $type, $files, $principal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadDocumentByTokenAsyncWithHttpInfo
     *
     * Upload Document using Token
     *
     * @param  string $token The Onboarding Token returned in [Create Onboarding](/operations/createOnboarding) response. This token is valid only for 10 mintues after the Onboarding Application is submitted. (required)
     * @param  string $name The Name of the Document being uploaded. (required)
     * @param  \TheLogicStudio\ExactPay\Model\DocumentUploadType $type (required)
     * @param  \SplFileObject $files The binary data of the Document being uploaded. The following file types are supported &#x60;bmp&#x60;,&#x60;csv&#x60;,&#x60;doc&#x60;,&#x60;docx&#x60;,&#x60;jpg&#x60;,&#x60;pdf&#x60;,&#x60;png&#x60;,&#x60;rtf&#x60;,&#x60;txt&#x60;,&#x60;xls&#x60; and &#x60;xlsx&#x60;. An HTTP &#x60;500 Internal Server Error&#x60; code with a JSON response will be returned when the Document is not uploaded. (required)
     * @param  string $principal The unique identifier of the Principal you are uploading the Document for. This field is required if you upload the Document to one of the Principals added in the Onboarding Application. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDocumentByToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadDocumentByTokenAsyncWithHttpInfo($token, $name, $type, $files, $principal = null, string $contentType = self::contentTypes['uploadDocumentByToken'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\UploadDocumentResponse';
        $request = $this->uploadDocumentByTokenRequest($token, $name, $type, $files, $principal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadDocumentByToken'
     *
     * @param  string $token The Onboarding Token returned in [Create Onboarding](/operations/createOnboarding) response. This token is valid only for 10 mintues after the Onboarding Application is submitted. (required)
     * @param  string $name The Name of the Document being uploaded. (required)
     * @param  \TheLogicStudio\ExactPay\Model\DocumentUploadType $type (required)
     * @param  \SplFileObject $files The binary data of the Document being uploaded. The following file types are supported &#x60;bmp&#x60;,&#x60;csv&#x60;,&#x60;doc&#x60;,&#x60;docx&#x60;,&#x60;jpg&#x60;,&#x60;pdf&#x60;,&#x60;png&#x60;,&#x60;rtf&#x60;,&#x60;txt&#x60;,&#x60;xls&#x60; and &#x60;xlsx&#x60;. An HTTP &#x60;500 Internal Server Error&#x60; code with a JSON response will be returned when the Document is not uploaded. (required)
     * @param  string $principal The unique identifier of the Principal you are uploading the Document for. This field is required if you upload the Document to one of the Principals added in the Onboarding Application. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDocumentByToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadDocumentByTokenRequest($token, $name, $type, $files, $principal = null, string $contentType = self::contentTypes['uploadDocumentByToken'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling uploadDocumentByToken'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling uploadDocumentByToken'
            );
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling uploadDocumentByToken'
            );
        }

        // verify the required parameter 'files' is set
        if ($files === null || (is_array($files) && count($files) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $files when calling uploadDocumentByToken'
            );
        }



        $resourcePath = '/document/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($files !== null) {
            $multipart = true;
            $formParams['files'] = [];
            $paramFiles = is_array($files) ? $files : [$files];
            foreach ($paramFiles as $paramFile) {
                $formParams['files'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($principal !== null) {
            $formParams['principal'] = ObjectSerializer::toFormValue($principal);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'plain/text', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
