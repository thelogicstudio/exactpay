<?php
/**
 * PaymentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TheLogicStudio\ExactPay\ApiException;
use TheLogicStudio\ExactPay\Configuration;
use TheLogicStudio\ExactPay\HeaderSelector;
use TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * PaymentsApi Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'accountCapturePayment' => [
            'application/json',
        ],
        'accountGetPayment' => [
            'application/json',
        ],
        'accountGetPayments' => [
            'application/json',
        ],
        'accountPostPayment' => [
            'application/json',
        ],
        'accountRefundPayment' => [
            'application/json',
        ],
        'accountVoidPayment' => [
            'application/json',
        ],
        'capturePayment' => [
            'application/json',
        ],
        'getPayment' => [
            'application/json',
        ],
        'getPayments' => [
            'application/json',
        ],
        'postPayment' => [
            'application/json',
        ],
        'refundPayment' => [
            'application/json',
        ],
        'voidPayment' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountCapturePayment
     *
     * Capture an existing authorization for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCapturePayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\CapturePayment400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountCapturePayment($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountCapturePayment'][0])
    {
        list($response) = $this->accountCapturePaymentWithHttpInfo($account_id, $payment_id, $referenced_payment, $contentType);
        return $response;
    }

    /**
     * Operation accountCapturePaymentWithHttpInfo
     *
     * Capture an existing authorization for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCapturePayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\CapturePayment400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountCapturePaymentWithHttpInfo($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountCapturePayment'][0])
    {
        $request = $this->accountCapturePaymentRequest($account_id, $payment_id, $referenced_payment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\CapturePayment400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\CapturePayment400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\CapturePayment400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\CapturePayment400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountCapturePaymentAsync
     *
     * Capture an existing authorization for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCapturePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCapturePaymentAsync($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountCapturePayment'][0])
    {
        return $this->accountCapturePaymentAsyncWithHttpInfo($account_id, $payment_id, $referenced_payment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountCapturePaymentAsyncWithHttpInfo
     *
     * Capture an existing authorization for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCapturePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCapturePaymentAsyncWithHttpInfo($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountCapturePayment'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
        $request = $this->accountCapturePaymentRequest($account_id, $payment_id, $referenced_payment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountCapturePayment'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCapturePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountCapturePaymentRequest($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountCapturePayment'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountCapturePayment'
            );
        }

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling accountCapturePayment'
            );
        }



        $resourcePath = '/account/{accountId}/payments/{paymentId}/capture';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($referenced_payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($referenced_payment));
            } else {
                $httpBody = $referenced_payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetPayment
     *
     * Get details of a specific Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountGetPayment($account_id, $payment_id, string $contentType = self::contentTypes['accountGetPayment'][0])
    {
        list($response) = $this->accountGetPaymentWithHttpInfo($account_id, $payment_id, $contentType);
        return $response;
    }

    /**
     * Operation accountGetPaymentWithHttpInfo
     *
     * Get details of a specific Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetPaymentWithHttpInfo($account_id, $payment_id, string $contentType = self::contentTypes['accountGetPayment'][0])
    {
        $request = $this->accountGetPaymentRequest($account_id, $payment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetPaymentAsync
     *
     * Get details of a specific Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetPaymentAsync($account_id, $payment_id, string $contentType = self::contentTypes['accountGetPayment'][0])
    {
        return $this->accountGetPaymentAsyncWithHttpInfo($account_id, $payment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetPaymentAsyncWithHttpInfo
     *
     * Get details of a specific Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetPaymentAsyncWithHttpInfo($account_id, $payment_id, string $contentType = self::contentTypes['accountGetPayment'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
        $request = $this->accountGetPaymentRequest($account_id, $payment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetPayment'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountGetPaymentRequest($account_id, $payment_id, string $contentType = self::contentTypes['accountGetPayment'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountGetPayment'
            );
        }

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling accountGetPayment'
            );
        }


        $resourcePath = '/account/{accountId}/payments/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetPayments
     *
     * Get Payments for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPayments'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountGetPayments($account_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['accountGetPayments'][0])
    {
        list($response) = $this->accountGetPaymentsWithHttpInfo($account_id, $sort, $limit, $skip, $contentType);
        return $response;
    }

    /**
     * Operation accountGetPaymentsWithHttpInfo
     *
     * Get Payments for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPayments'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetPaymentsWithHttpInfo($account_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['accountGetPayments'][0])
    {
        $request = $this->accountGetPaymentsRequest($account_id, $sort, $limit, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetPaymentsAsync
     *
     * Get Payments for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetPaymentsAsync($account_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['accountGetPayments'][0])
    {
        return $this->accountGetPaymentsAsyncWithHttpInfo($account_id, $sort, $limit, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetPaymentsAsyncWithHttpInfo
     *
     * Get Payments for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetPaymentsAsyncWithHttpInfo($account_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['accountGetPayments'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment[]';
        $request = $this->accountGetPaymentsRequest($account_id, $sort, $limit, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetPayments'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountGetPaymentsRequest($account_id, $sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['accountGetPayments'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountGetPayments'
            );
        }


        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PaymentsApi.accountGetPayments, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PaymentsApi.accountGetPayments, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/account/{accountId}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            '$sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            '$limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountPostPayment
     *
     * Create Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreatePayment $create_payment create_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPayment422Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountPostPayment($account_id, $create_payment = null, string $contentType = self::contentTypes['accountPostPayment'][0])
    {
        list($response) = $this->accountPostPaymentWithHttpInfo($account_id, $create_payment, $contentType);
        return $response;
    }

    /**
     * Operation accountPostPaymentWithHttpInfo
     *
     * Create Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreatePayment $create_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPayment422Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountPostPaymentWithHttpInfo($account_id, $create_payment = null, string $contentType = self::contentTypes['accountPostPayment'][0])
    {
        $request = $this->accountPostPaymentRequest($account_id, $create_payment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\TheLogicStudio\ExactPay\Model\PostPayment422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPayment422Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPayment422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPayment422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountPostPaymentAsync
     *
     * Create Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreatePayment $create_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPostPaymentAsync($account_id, $create_payment = null, string $contentType = self::contentTypes['accountPostPayment'][0])
    {
        return $this->accountPostPaymentAsyncWithHttpInfo($account_id, $create_payment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountPostPaymentAsyncWithHttpInfo
     *
     * Create Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreatePayment $create_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPostPaymentAsyncWithHttpInfo($account_id, $create_payment = null, string $contentType = self::contentTypes['accountPostPayment'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
        $request = $this->accountPostPaymentRequest($account_id, $create_payment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountPostPayment'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\CreatePayment $create_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountPostPaymentRequest($account_id, $create_payment = null, string $contentType = self::contentTypes['accountPostPayment'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountPostPayment'
            );
        }



        $resourcePath = '/account/{accountId}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_payment));
            } else {
                $httpBody = $create_payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountRefundPayment
     *
     * Refund a specific Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRefundPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\CapturePayment400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountRefundPayment($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountRefundPayment'][0])
    {
        list($response) = $this->accountRefundPaymentWithHttpInfo($account_id, $payment_id, $referenced_payment, $contentType);
        return $response;
    }

    /**
     * Operation accountRefundPaymentWithHttpInfo
     *
     * Refund a specific Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRefundPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\CapturePayment400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountRefundPaymentWithHttpInfo($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountRefundPayment'][0])
    {
        $request = $this->accountRefundPaymentRequest($account_id, $payment_id, $referenced_payment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\CapturePayment400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\CapturePayment400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\CapturePayment400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\CapturePayment400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountRefundPaymentAsync
     *
     * Refund a specific Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRefundPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountRefundPaymentAsync($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountRefundPayment'][0])
    {
        return $this->accountRefundPaymentAsyncWithHttpInfo($account_id, $payment_id, $referenced_payment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountRefundPaymentAsyncWithHttpInfo
     *
     * Refund a specific Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRefundPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountRefundPaymentAsyncWithHttpInfo($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountRefundPayment'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
        $request = $this->accountRefundPaymentRequest($account_id, $payment_id, $referenced_payment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountRefundPayment'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountRefundPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountRefundPaymentRequest($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountRefundPayment'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountRefundPayment'
            );
        }

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling accountRefundPayment'
            );
        }



        $resourcePath = '/account/{accountId}/payments/{paymentId}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($referenced_payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($referenced_payment));
            } else {
                $httpBody = $referenced_payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountVoidPayment
     *
     * Void a specific Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountVoidPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\CapturePayment400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function accountVoidPayment($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountVoidPayment'][0])
    {
        list($response) = $this->accountVoidPaymentWithHttpInfo($account_id, $payment_id, $referenced_payment, $contentType);
        return $response;
    }

    /**
     * Operation accountVoidPaymentWithHttpInfo
     *
     * Void a specific Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountVoidPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\CapturePayment400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountVoidPaymentWithHttpInfo($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountVoidPayment'][0])
    {
        $request = $this->accountVoidPaymentRequest($account_id, $payment_id, $referenced_payment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\CapturePayment400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\CapturePayment400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\CapturePayment400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\CapturePayment400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountVoidPaymentAsync
     *
     * Void a specific Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountVoidPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountVoidPaymentAsync($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountVoidPayment'][0])
    {
        return $this->accountVoidPaymentAsyncWithHttpInfo($account_id, $payment_id, $referenced_payment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountVoidPaymentAsyncWithHttpInfo
     *
     * Void a specific Payment for a given Account
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountVoidPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountVoidPaymentAsyncWithHttpInfo($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountVoidPayment'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
        $request = $this->accountVoidPaymentRequest($account_id, $payment_id, $referenced_payment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountVoidPayment'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountVoidPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountVoidPaymentRequest($account_id, $payment_id, $referenced_payment = null, string $contentType = self::contentTypes['accountVoidPayment'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountVoidPayment'
            );
        }

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling accountVoidPayment'
            );
        }



        $resourcePath = '/account/{accountId}/payments/{paymentId}/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($referenced_payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($referenced_payment));
            } else {
                $httpBody = $referenced_payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation capturePayment
     *
     * Capture an existing authorization
     *
     * @param  string $payment_id payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\CapturePayment400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function capturePayment($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['capturePayment'][0])
    {
        list($response) = $this->capturePaymentWithHttpInfo($payment_id, $referenced_payment, $contentType);
        return $response;
    }

    /**
     * Operation capturePaymentWithHttpInfo
     *
     * Capture an existing authorization
     *
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\CapturePayment400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function capturePaymentWithHttpInfo($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['capturePayment'][0])
    {
        $request = $this->capturePaymentRequest($payment_id, $referenced_payment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\CapturePayment400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\CapturePayment400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\CapturePayment400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\CapturePayment400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation capturePaymentAsync
     *
     * Capture an existing authorization
     *
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function capturePaymentAsync($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['capturePayment'][0])
    {
        return $this->capturePaymentAsyncWithHttpInfo($payment_id, $referenced_payment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation capturePaymentAsyncWithHttpInfo
     *
     * Capture an existing authorization
     *
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function capturePaymentAsyncWithHttpInfo($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['capturePayment'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
        $request = $this->capturePaymentRequest($payment_id, $referenced_payment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'capturePayment'
     *
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function capturePaymentRequest($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['capturePayment'][0])
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling capturePayment'
            );
        }



        $resourcePath = '/payments/{paymentId}/capture';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($referenced_payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($referenced_payment));
            } else {
                $httpBody = $referenced_payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayment
     *
     * Get details of a specific Payment
     *
     * @param  string $payment_id payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function getPayment($payment_id, string $contentType = self::contentTypes['getPayment'][0])
    {
        list($response) = $this->getPaymentWithHttpInfo($payment_id, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentWithHttpInfo
     *
     * Get details of a specific Payment
     *
     * @param  string $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentWithHttpInfo($payment_id, string $contentType = self::contentTypes['getPayment'][0])
    {
        $request = $this->getPaymentRequest($payment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentAsync
     *
     * Get details of a specific Payment
     *
     * @param  string $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAsync($payment_id, string $contentType = self::contentTypes['getPayment'][0])
    {
        return $this->getPaymentAsyncWithHttpInfo($payment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentAsyncWithHttpInfo
     *
     * Get details of a specific Payment
     *
     * @param  string $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAsyncWithHttpInfo($payment_id, string $contentType = self::contentTypes['getPayment'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
        $request = $this->getPaymentRequest($payment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayment'
     *
     * @param  string $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentRequest($payment_id, string $contentType = self::contentTypes['getPayment'][0])
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling getPayment'
            );
        }


        $resourcePath = '/payments/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayments
     *
     * Get Payments
     *
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function getPayments($sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['getPayments'][0])
    {
        list($response) = $this->getPaymentsWithHttpInfo($sort, $limit, $skip, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentsWithHttpInfo
     *
     * Get Payments
     *
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment[]|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentsWithHttpInfo($sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['getPayments'][0])
    {
        $request = $this->getPaymentsRequest($sort, $limit, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentsAsync
     *
     * Get Payments
     *
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsAsync($sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['getPayments'][0])
    {
        return $this->getPaymentsAsyncWithHttpInfo($sort, $limit, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentsAsyncWithHttpInfo
     *
     * Get Payments
     *
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsAsyncWithHttpInfo($sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['getPayments'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment[]';
        $request = $this->getPaymentsRequest($sort, $limit, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayments'
     *
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentsRequest($sort = null, $limit = 100, $skip = 0, string $contentType = self::contentTypes['getPayments'][0])
    {


        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PaymentsApi.getPayments, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PaymentsApi.getPayments, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            '$sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            '$limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPayment
     *
     * Create Payment
     *
     * @param  \TheLogicStudio\ExactPay\Model\CreatePayment $create_payment create_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPayment422Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function postPayment($create_payment = null, string $contentType = self::contentTypes['postPayment'][0])
    {
        list($response) = $this->postPaymentWithHttpInfo($create_payment, $contentType);
        return $response;
    }

    /**
     * Operation postPaymentWithHttpInfo
     *
     * Create Payment
     *
     * @param  \TheLogicStudio\ExactPay\Model\CreatePayment $create_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPayment422Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPaymentWithHttpInfo($create_payment = null, string $contentType = self::contentTypes['postPayment'][0])
    {
        $request = $this->postPaymentRequest($create_payment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\TheLogicStudio\ExactPay\Model\PostPayment422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPayment422Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPayment422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPayment422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postPaymentAsync
     *
     * Create Payment
     *
     * @param  \TheLogicStudio\ExactPay\Model\CreatePayment $create_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPaymentAsync($create_payment = null, string $contentType = self::contentTypes['postPayment'][0])
    {
        return $this->postPaymentAsyncWithHttpInfo($create_payment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPaymentAsyncWithHttpInfo
     *
     * Create Payment
     *
     * @param  \TheLogicStudio\ExactPay\Model\CreatePayment $create_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPaymentAsyncWithHttpInfo($create_payment = null, string $contentType = self::contentTypes['postPayment'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
        $request = $this->postPaymentRequest($create_payment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPayment'
     *
     * @param  \TheLogicStudio\ExactPay\Model\CreatePayment $create_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postPaymentRequest($create_payment = null, string $contentType = self::contentTypes['postPayment'][0])
    {



        $resourcePath = '/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_payment));
            } else {
                $httpBody = $create_payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundPayment
     *
     * Refund a specific payment
     *
     * @param  string $payment_id payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\CapturePayment400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function refundPayment($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['refundPayment'][0])
    {
        list($response) = $this->refundPaymentWithHttpInfo($payment_id, $referenced_payment, $contentType);
        return $response;
    }

    /**
     * Operation refundPaymentWithHttpInfo
     *
     * Refund a specific payment
     *
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\CapturePayment400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundPaymentWithHttpInfo($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['refundPayment'][0])
    {
        $request = $this->refundPaymentRequest($payment_id, $referenced_payment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\CapturePayment400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\CapturePayment400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\CapturePayment400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\CapturePayment400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundPaymentAsync
     *
     * Refund a specific payment
     *
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundPaymentAsync($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['refundPayment'][0])
    {
        return $this->refundPaymentAsyncWithHttpInfo($payment_id, $referenced_payment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundPaymentAsyncWithHttpInfo
     *
     * Refund a specific payment
     *
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundPaymentAsyncWithHttpInfo($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['refundPayment'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
        $request = $this->refundPaymentRequest($payment_id, $referenced_payment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundPayment'
     *
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refundPaymentRequest($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['refundPayment'][0])
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling refundPayment'
            );
        }



        $resourcePath = '/payments/{paymentId}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($referenced_payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($referenced_payment));
            } else {
                $httpBody = $referenced_payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidPayment
     *
     * Void a specific Payment
     *
     * @param  string $payment_id payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\CapturePayment400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response
     */
    public function voidPayment($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['voidPayment'][0])
    {
        list($response) = $this->voidPaymentWithHttpInfo($payment_id, $referenced_payment, $contentType);
        return $response;
    }

    /**
     * Operation voidPaymentWithHttpInfo
     *
     * Void a specific Payment
     *
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidPayment'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\Payment|\TheLogicStudio\ExactPay\Model\CapturePayment400Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response|\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidPaymentWithHttpInfo($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['voidPayment'][0])
    {
        $request = $this->voidPaymentRequest($payment_id, $referenced_payment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\TheLogicStudio\ExactPay\Model\CapturePayment400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\CapturePayment400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\CapturePayment400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\CapturePayment400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\PostPaymentMethod503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation voidPaymentAsync
     *
     * Void a specific Payment
     *
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidPaymentAsync($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['voidPayment'][0])
    {
        return $this->voidPaymentAsyncWithHttpInfo($payment_id, $referenced_payment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidPaymentAsyncWithHttpInfo
     *
     * Void a specific Payment
     *
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidPaymentAsyncWithHttpInfo($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['voidPayment'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\Payment';
        $request = $this->voidPaymentRequest($payment_id, $referenced_payment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidPayment'
     *
     * @param  string $payment_id (required)
     * @param  \TheLogicStudio\ExactPay\Model\ReferencedPayment $referenced_payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function voidPaymentRequest($payment_id, $referenced_payment = null, string $contentType = self::contentTypes['voidPayment'][0])
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling voidPayment'
            );
        }



        $resourcePath = '/payments/{paymentId}/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($referenced_payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($referenced_payment));
            } else {
                $httpBody = $referenced_payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
