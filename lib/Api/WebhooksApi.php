<?php
/**
 * WebhooksApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TheLogicStudio\ExactPay\ApiException;
use TheLogicStudio\ExactPay\Configuration;
use TheLogicStudio\ExactPay\HeaderSelector;
use TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * WebhooksApi Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WebhooksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'accountDeleteWebhook' => [
            'application/json',
        ],
        'accountDisableWebhook' => [
            'application/json',
        ],
        'accountEnableWebhook' => [
            'application/json',
        ],
        'accountGetListWebhooks' => [
            'application/json',
        ],
        'accountGetRetrieveWebhook' => [
            'application/json',
        ],
        'accountPostCreateWebhook' => [
            'application/json',
        ],
        'accountUpdateWebhook' => [
            'application/json',
        ],
        'organizationOrganizationIdWebhookGet' => [
            'application/json',
        ],
        'organizationOrganizationIdWebhookPost' => [
            'application/json',
        ],
        'organizationOrganizationIdWebhookWebhookIdDelete' => [
            'application/json',
        ],
        'organizationOrganizationIdWebhookWebhookIdDisablePut' => [
            'application/json',
        ],
        'organizationOrganizationIdWebhookWebhookIdEnablePut' => [
            'application/json',
        ],
        'organizationOrganizationIdWebhookWebhookIdGet' => [
            'application/json',
        ],
        'organizationOrganizationIdWebhookWebhookIdPut' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountDeleteWebhook
     *
     * Delete Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteWebhook'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountDeleteWebhook($account_id, $webhook_id, string $contentType = self::contentTypes['accountDeleteWebhook'][0])
    {
        $this->accountDeleteWebhookWithHttpInfo($account_id, $webhook_id, $contentType);
    }

    /**
     * Operation accountDeleteWebhookWithHttpInfo
     *
     * Delete Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteWebhook'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountDeleteWebhookWithHttpInfo($account_id, $webhook_id, string $contentType = self::contentTypes['accountDeleteWebhook'][0])
    {
        $request = $this->accountDeleteWebhookRequest($account_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountDeleteWebhookAsync
     *
     * Delete Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountDeleteWebhookAsync($account_id, $webhook_id, string $contentType = self::contentTypes['accountDeleteWebhook'][0])
    {
        return $this->accountDeleteWebhookAsyncWithHttpInfo($account_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountDeleteWebhookAsyncWithHttpInfo
     *
     * Delete Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountDeleteWebhookAsyncWithHttpInfo($account_id, $webhook_id, string $contentType = self::contentTypes['accountDeleteWebhook'][0])
    {
        $returnType = '';
        $request = $this->accountDeleteWebhookRequest($account_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountDeleteWebhook'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDeleteWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountDeleteWebhookRequest($account_id, $webhook_id, string $contentType = self::contentTypes['accountDeleteWebhook'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountDeleteWebhook'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling accountDeleteWebhook'
            );
        }


        $resourcePath = '/account/{accountId}/webhook/{webhookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountDisableWebhook
     *
     * Disable Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDisableWebhook'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountDisableWebhook($account_id, $webhook_id, string $contentType = self::contentTypes['accountDisableWebhook'][0])
    {
        $this->accountDisableWebhookWithHttpInfo($account_id, $webhook_id, $contentType);
    }

    /**
     * Operation accountDisableWebhookWithHttpInfo
     *
     * Disable Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDisableWebhook'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountDisableWebhookWithHttpInfo($account_id, $webhook_id, string $contentType = self::contentTypes['accountDisableWebhook'][0])
    {
        $request = $this->accountDisableWebhookRequest($account_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountDisableWebhookAsync
     *
     * Disable Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDisableWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountDisableWebhookAsync($account_id, $webhook_id, string $contentType = self::contentTypes['accountDisableWebhook'][0])
    {
        return $this->accountDisableWebhookAsyncWithHttpInfo($account_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountDisableWebhookAsyncWithHttpInfo
     *
     * Disable Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDisableWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountDisableWebhookAsyncWithHttpInfo($account_id, $webhook_id, string $contentType = self::contentTypes['accountDisableWebhook'][0])
    {
        $returnType = '';
        $request = $this->accountDisableWebhookRequest($account_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountDisableWebhook'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountDisableWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountDisableWebhookRequest($account_id, $webhook_id, string $contentType = self::contentTypes['accountDisableWebhook'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountDisableWebhook'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling accountDisableWebhook'
            );
        }


        $resourcePath = '/account/{accountId}/webhook/{webhookId}/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountEnableWebhook
     *
     * Enable Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountEnableWebhook'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountEnableWebhook($account_id, $webhook_id, string $contentType = self::contentTypes['accountEnableWebhook'][0])
    {
        $this->accountEnableWebhookWithHttpInfo($account_id, $webhook_id, $contentType);
    }

    /**
     * Operation accountEnableWebhookWithHttpInfo
     *
     * Enable Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountEnableWebhook'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountEnableWebhookWithHttpInfo($account_id, $webhook_id, string $contentType = self::contentTypes['accountEnableWebhook'][0])
    {
        $request = $this->accountEnableWebhookRequest($account_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountEnableWebhookAsync
     *
     * Enable Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountEnableWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountEnableWebhookAsync($account_id, $webhook_id, string $contentType = self::contentTypes['accountEnableWebhook'][0])
    {
        return $this->accountEnableWebhookAsyncWithHttpInfo($account_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountEnableWebhookAsyncWithHttpInfo
     *
     * Enable Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountEnableWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountEnableWebhookAsyncWithHttpInfo($account_id, $webhook_id, string $contentType = self::contentTypes['accountEnableWebhook'][0])
    {
        $returnType = '';
        $request = $this->accountEnableWebhookRequest($account_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountEnableWebhook'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountEnableWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountEnableWebhookRequest($account_id, $webhook_id, string $contentType = self::contentTypes['accountEnableWebhook'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountEnableWebhook'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling accountEnableWebhook'
            );
        }


        $resourcePath = '/account/{accountId}/webhook/{webhookId}/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetListWebhooks
     *
     * List Webhooks
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetListWebhooks'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\WebhookResponse[]|string
     */
    public function accountGetListWebhooks($account_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['accountGetListWebhooks'][0])
    {
        list($response) = $this->accountGetListWebhooksWithHttpInfo($account_id, $skip, $limit, $sort, $contentType);
        return $response;
    }

    /**
     * Operation accountGetListWebhooksWithHttpInfo
     *
     * List Webhooks
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetListWebhooks'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\WebhookResponse[]|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetListWebhooksWithHttpInfo($account_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['accountGetListWebhooks'][0])
    {
        $request = $this->accountGetListWebhooksRequest($account_id, $skip, $limit, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\WebhookResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\WebhookResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\WebhookResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\WebhookResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\WebhookResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetListWebhooksAsync
     *
     * List Webhooks
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetListWebhooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetListWebhooksAsync($account_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['accountGetListWebhooks'][0])
    {
        return $this->accountGetListWebhooksAsyncWithHttpInfo($account_id, $skip, $limit, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetListWebhooksAsyncWithHttpInfo
     *
     * List Webhooks
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetListWebhooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetListWebhooksAsyncWithHttpInfo($account_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['accountGetListWebhooks'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\WebhookResponse[]';
        $request = $this->accountGetListWebhooksRequest($account_id, $skip, $limit, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetListWebhooks'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetListWebhooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountGetListWebhooksRequest($account_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['accountGetListWebhooks'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountGetListWebhooks'
            );
        }


        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WebhooksApi.accountGetListWebhooks, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WebhooksApi.accountGetListWebhooks, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/account/{accountId}/webhook';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            '$limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            '$sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetRetrieveWebhook
     *
     * Retrieve Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetRetrieveWebhook'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\WebhookResponse|string|string
     */
    public function accountGetRetrieveWebhook($account_id, $webhook_id, string $contentType = self::contentTypes['accountGetRetrieveWebhook'][0])
    {
        list($response) = $this->accountGetRetrieveWebhookWithHttpInfo($account_id, $webhook_id, $contentType);
        return $response;
    }

    /**
     * Operation accountGetRetrieveWebhookWithHttpInfo
     *
     * Retrieve Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetRetrieveWebhook'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\WebhookResponse|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetRetrieveWebhookWithHttpInfo($account_id, $webhook_id, string $contentType = self::contentTypes['accountGetRetrieveWebhook'][0])
    {
        $request = $this->accountGetRetrieveWebhookRequest($account_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\WebhookResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\WebhookResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\WebhookResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\WebhookResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\WebhookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetRetrieveWebhookAsync
     *
     * Retrieve Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetRetrieveWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetRetrieveWebhookAsync($account_id, $webhook_id, string $contentType = self::contentTypes['accountGetRetrieveWebhook'][0])
    {
        return $this->accountGetRetrieveWebhookAsyncWithHttpInfo($account_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetRetrieveWebhookAsyncWithHttpInfo
     *
     * Retrieve Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetRetrieveWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetRetrieveWebhookAsyncWithHttpInfo($account_id, $webhook_id, string $contentType = self::contentTypes['accountGetRetrieveWebhook'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\WebhookResponse';
        $request = $this->accountGetRetrieveWebhookRequest($account_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetRetrieveWebhook'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountGetRetrieveWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountGetRetrieveWebhookRequest($account_id, $webhook_id, string $contentType = self::contentTypes['accountGetRetrieveWebhook'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountGetRetrieveWebhook'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling accountGetRetrieveWebhook'
            );
        }


        $resourcePath = '/account/{accountId}/webhook/{webhookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountPostCreateWebhook
     *
     * Create Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\WebhookRequest $webhook_request Fields that compose a webhook definition inside Exact Payments ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCreateWebhook'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\WebhookResponse|string|string
     */
    public function accountPostCreateWebhook($account_id, $webhook_request, string $contentType = self::contentTypes['accountPostCreateWebhook'][0])
    {
        list($response) = $this->accountPostCreateWebhookWithHttpInfo($account_id, $webhook_request, $contentType);
        return $response;
    }

    /**
     * Operation accountPostCreateWebhookWithHttpInfo
     *
     * Create Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\WebhookRequest $webhook_request Fields that compose a webhook definition inside Exact Payments ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCreateWebhook'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\WebhookResponse|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountPostCreateWebhookWithHttpInfo($account_id, $webhook_request, string $contentType = self::contentTypes['accountPostCreateWebhook'][0])
    {
        $request = $this->accountPostCreateWebhookRequest($account_id, $webhook_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\WebhookResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\WebhookResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\WebhookResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\WebhookResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\WebhookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountPostCreateWebhookAsync
     *
     * Create Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\WebhookRequest $webhook_request Fields that compose a webhook definition inside Exact Payments ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCreateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPostCreateWebhookAsync($account_id, $webhook_request, string $contentType = self::contentTypes['accountPostCreateWebhook'][0])
    {
        return $this->accountPostCreateWebhookAsyncWithHttpInfo($account_id, $webhook_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountPostCreateWebhookAsyncWithHttpInfo
     *
     * Create Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\WebhookRequest $webhook_request Fields that compose a webhook definition inside Exact Payments ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCreateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountPostCreateWebhookAsyncWithHttpInfo($account_id, $webhook_request, string $contentType = self::contentTypes['accountPostCreateWebhook'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\WebhookResponse';
        $request = $this->accountPostCreateWebhookRequest($account_id, $webhook_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountPostCreateWebhook'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  \TheLogicStudio\ExactPay\Model\WebhookRequest $webhook_request Fields that compose a webhook definition inside Exact Payments ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountPostCreateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountPostCreateWebhookRequest($account_id, $webhook_request, string $contentType = self::contentTypes['accountPostCreateWebhook'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountPostCreateWebhook'
            );
        }

        // verify the required parameter 'webhook_request' is set
        if ($webhook_request === null || (is_array($webhook_request) && count($webhook_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_request when calling accountPostCreateWebhook'
            );
        }


        $resourcePath = '/account/{accountId}/webhook';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($webhook_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($webhook_request));
            } else {
                $httpBody = $webhook_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountUpdateWebhook
     *
     * Update Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableWebhookRequest $updatable_webhook_request Fields that are updatable in the webhook definition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountUpdateWebhook'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountUpdateWebhook($account_id, $webhook_id, $updatable_webhook_request, string $contentType = self::contentTypes['accountUpdateWebhook'][0])
    {
        $this->accountUpdateWebhookWithHttpInfo($account_id, $webhook_id, $updatable_webhook_request, $contentType);
    }

    /**
     * Operation accountUpdateWebhookWithHttpInfo
     *
     * Update Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableWebhookRequest $updatable_webhook_request Fields that are updatable in the webhook definition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountUpdateWebhook'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountUpdateWebhookWithHttpInfo($account_id, $webhook_id, $updatable_webhook_request, string $contentType = self::contentTypes['accountUpdateWebhook'][0])
    {
        $request = $this->accountUpdateWebhookRequest($account_id, $webhook_id, $updatable_webhook_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountUpdateWebhookAsync
     *
     * Update Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableWebhookRequest $updatable_webhook_request Fields that are updatable in the webhook definition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountUpdateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountUpdateWebhookAsync($account_id, $webhook_id, $updatable_webhook_request, string $contentType = self::contentTypes['accountUpdateWebhook'][0])
    {
        return $this->accountUpdateWebhookAsyncWithHttpInfo($account_id, $webhook_id, $updatable_webhook_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountUpdateWebhookAsyncWithHttpInfo
     *
     * Update Webhook
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableWebhookRequest $updatable_webhook_request Fields that are updatable in the webhook definition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountUpdateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountUpdateWebhookAsyncWithHttpInfo($account_id, $webhook_id, $updatable_webhook_request, string $contentType = self::contentTypes['accountUpdateWebhook'][0])
    {
        $returnType = '';
        $request = $this->accountUpdateWebhookRequest($account_id, $webhook_id, $updatable_webhook_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountUpdateWebhook'
     *
     * @param  string $account_id The Account identifier. Represents the Merchant that this operation is going to be executed for. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableWebhookRequest $updatable_webhook_request Fields that are updatable in the webhook definition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountUpdateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountUpdateWebhookRequest($account_id, $webhook_id, $updatable_webhook_request, string $contentType = self::contentTypes['accountUpdateWebhook'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountUpdateWebhook'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling accountUpdateWebhook'
            );
        }

        // verify the required parameter 'updatable_webhook_request' is set
        if ($updatable_webhook_request === null || (is_array($updatable_webhook_request) && count($updatable_webhook_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updatable_webhook_request when calling accountUpdateWebhook'
            );
        }


        $resourcePath = '/account/{accountId}/webhook/{webhookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updatable_webhook_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updatable_webhook_request));
            } else {
                $httpBody = $updatable_webhook_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdWebhookGet
     *
     * List Webhooks
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\WebhookResponse[]|string
     */
    public function organizationOrganizationIdWebhookGet($organization_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['organizationOrganizationIdWebhookGet'][0])
    {
        list($response) = $this->organizationOrganizationIdWebhookGetWithHttpInfo($organization_id, $skip, $limit, $sort, $contentType);
        return $response;
    }

    /**
     * Operation organizationOrganizationIdWebhookGetWithHttpInfo
     *
     * List Webhooks
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\WebhookResponse[]|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdWebhookGetWithHttpInfo($organization_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['organizationOrganizationIdWebhookGet'][0])
    {
        $request = $this->organizationOrganizationIdWebhookGetRequest($organization_id, $skip, $limit, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\WebhookResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\WebhookResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\WebhookResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\WebhookResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\WebhookResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdWebhookGetAsync
     *
     * List Webhooks
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookGetAsync($organization_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['organizationOrganizationIdWebhookGet'][0])
    {
        return $this->organizationOrganizationIdWebhookGetAsyncWithHttpInfo($organization_id, $skip, $limit, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdWebhookGetAsyncWithHttpInfo
     *
     * List Webhooks
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookGetAsyncWithHttpInfo($organization_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['organizationOrganizationIdWebhookGet'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\WebhookResponse[]';
        $request = $this->organizationOrganizationIdWebhookGetRequest($organization_id, $skip, $limit, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdWebhookGet'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  int $skip The number of records to be skipped per call. By default, starts with &#x60;0&#x60; and you should provide the current value plus the &#x60;$limit&#x60; value in subsequent calls to retrieve following sets of values (pages). So it will skip the number of records on the previous page and bring the next set of records. (optional, default to 0)
     * @param  int $limit The maximum number of items to retrieve within the current page of results. Defaults to 100 if not set. (optional, default to 100)
     * @param  string $sort Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdWebhookGetRequest($organization_id, $skip = 0, $limit = 100, $sort = null, string $contentType = self::contentTypes['organizationOrganizationIdWebhookGet'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdWebhookGet'
            );
        }


        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WebhooksApi.organizationOrganizationIdWebhookGet, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WebhooksApi.organizationOrganizationIdWebhookGet, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/organization/{organizationId}/webhook';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            '$limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            '$sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdWebhookPost
     *
     * Create Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\WebhookRequest $webhook_request Fields that compose a webhook definition inside Exact Payments ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookPost'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\WebhookResponse|string|string
     */
    public function organizationOrganizationIdWebhookPost($organization_id, $webhook_request, string $contentType = self::contentTypes['organizationOrganizationIdWebhookPost'][0])
    {
        list($response) = $this->organizationOrganizationIdWebhookPostWithHttpInfo($organization_id, $webhook_request, $contentType);
        return $response;
    }

    /**
     * Operation organizationOrganizationIdWebhookPostWithHttpInfo
     *
     * Create Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\WebhookRequest $webhook_request Fields that compose a webhook definition inside Exact Payments ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookPost'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\WebhookResponse|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdWebhookPostWithHttpInfo($organization_id, $webhook_request, string $contentType = self::contentTypes['organizationOrganizationIdWebhookPost'][0])
    {
        $request = $this->organizationOrganizationIdWebhookPostRequest($organization_id, $webhook_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\TheLogicStudio\ExactPay\Model\WebhookResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\WebhookResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\WebhookResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\WebhookResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\WebhookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdWebhookPostAsync
     *
     * Create Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\WebhookRequest $webhook_request Fields that compose a webhook definition inside Exact Payments ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookPostAsync($organization_id, $webhook_request, string $contentType = self::contentTypes['organizationOrganizationIdWebhookPost'][0])
    {
        return $this->organizationOrganizationIdWebhookPostAsyncWithHttpInfo($organization_id, $webhook_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdWebhookPostAsyncWithHttpInfo
     *
     * Create Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\WebhookRequest $webhook_request Fields that compose a webhook definition inside Exact Payments ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookPostAsyncWithHttpInfo($organization_id, $webhook_request, string $contentType = self::contentTypes['organizationOrganizationIdWebhookPost'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\WebhookResponse';
        $request = $this->organizationOrganizationIdWebhookPostRequest($organization_id, $webhook_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdWebhookPost'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  \TheLogicStudio\ExactPay\Model\WebhookRequest $webhook_request Fields that compose a webhook definition inside Exact Payments ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdWebhookPostRequest($organization_id, $webhook_request, string $contentType = self::contentTypes['organizationOrganizationIdWebhookPost'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdWebhookPost'
            );
        }

        // verify the required parameter 'webhook_request' is set
        if ($webhook_request === null || (is_array($webhook_request) && count($webhook_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_request when calling organizationOrganizationIdWebhookPost'
            );
        }


        $resourcePath = '/organization/{organizationId}/webhook';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($webhook_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($webhook_request));
            } else {
                $httpBody = $webhook_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdDelete
     *
     * Delete Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdDelete'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationOrganizationIdWebhookWebhookIdDelete($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdDelete'][0])
    {
        $this->organizationOrganizationIdWebhookWebhookIdDeleteWithHttpInfo($organization_id, $webhook_id, $contentType);
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdDeleteWithHttpInfo
     *
     * Delete Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdDelete'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdWebhookWebhookIdDeleteWithHttpInfo($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdDelete'][0])
    {
        $request = $this->organizationOrganizationIdWebhookWebhookIdDeleteRequest($organization_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdDeleteAsync
     *
     * Delete Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookWebhookIdDeleteAsync($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdDelete'][0])
    {
        return $this->organizationOrganizationIdWebhookWebhookIdDeleteAsyncWithHttpInfo($organization_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdDeleteAsyncWithHttpInfo
     *
     * Delete Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookWebhookIdDeleteAsyncWithHttpInfo($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdDelete'][0])
    {
        $returnType = '';
        $request = $this->organizationOrganizationIdWebhookWebhookIdDeleteRequest($organization_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdWebhookWebhookIdDelete'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdWebhookWebhookIdDeleteRequest($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdDelete'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdWebhookWebhookIdDelete'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling organizationOrganizationIdWebhookWebhookIdDelete'
            );
        }


        $resourcePath = '/organization/{organizationId}/webhook/{webhookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdDisablePut
     *
     * Disable Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdDisablePut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationOrganizationIdWebhookWebhookIdDisablePut($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdDisablePut'][0])
    {
        $this->organizationOrganizationIdWebhookWebhookIdDisablePutWithHttpInfo($organization_id, $webhook_id, $contentType);
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdDisablePutWithHttpInfo
     *
     * Disable Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdDisablePut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdWebhookWebhookIdDisablePutWithHttpInfo($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdDisablePut'][0])
    {
        $request = $this->organizationOrganizationIdWebhookWebhookIdDisablePutRequest($organization_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdDisablePutAsync
     *
     * Disable Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdDisablePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookWebhookIdDisablePutAsync($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdDisablePut'][0])
    {
        return $this->organizationOrganizationIdWebhookWebhookIdDisablePutAsyncWithHttpInfo($organization_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdDisablePutAsyncWithHttpInfo
     *
     * Disable Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdDisablePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookWebhookIdDisablePutAsyncWithHttpInfo($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdDisablePut'][0])
    {
        $returnType = '';
        $request = $this->organizationOrganizationIdWebhookWebhookIdDisablePutRequest($organization_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdWebhookWebhookIdDisablePut'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdDisablePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdWebhookWebhookIdDisablePutRequest($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdDisablePut'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdWebhookWebhookIdDisablePut'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling organizationOrganizationIdWebhookWebhookIdDisablePut'
            );
        }


        $resourcePath = '/organization/{organizationId}/webhook/{webhookId}/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdEnablePut
     *
     * Enable Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdEnablePut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationOrganizationIdWebhookWebhookIdEnablePut($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdEnablePut'][0])
    {
        $this->organizationOrganizationIdWebhookWebhookIdEnablePutWithHttpInfo($organization_id, $webhook_id, $contentType);
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdEnablePutWithHttpInfo
     *
     * Enable Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdEnablePut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdWebhookWebhookIdEnablePutWithHttpInfo($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdEnablePut'][0])
    {
        $request = $this->organizationOrganizationIdWebhookWebhookIdEnablePutRequest($organization_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdEnablePutAsync
     *
     * Enable Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdEnablePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookWebhookIdEnablePutAsync($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdEnablePut'][0])
    {
        return $this->organizationOrganizationIdWebhookWebhookIdEnablePutAsyncWithHttpInfo($organization_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdEnablePutAsyncWithHttpInfo
     *
     * Enable Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdEnablePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookWebhookIdEnablePutAsyncWithHttpInfo($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdEnablePut'][0])
    {
        $returnType = '';
        $request = $this->organizationOrganizationIdWebhookWebhookIdEnablePutRequest($organization_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdWebhookWebhookIdEnablePut'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdEnablePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdWebhookWebhookIdEnablePutRequest($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdEnablePut'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdWebhookWebhookIdEnablePut'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling organizationOrganizationIdWebhookWebhookIdEnablePut'
            );
        }


        $resourcePath = '/organization/{organizationId}/webhook/{webhookId}/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdGet
     *
     * Retrieve Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\ExactPay\Model\WebhookResponse|string|string
     */
    public function organizationOrganizationIdWebhookWebhookIdGet($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdGet'][0])
    {
        list($response) = $this->organizationOrganizationIdWebhookWebhookIdGetWithHttpInfo($organization_id, $webhook_id, $contentType);
        return $response;
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdGetWithHttpInfo
     *
     * Retrieve Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\ExactPay\Model\WebhookResponse|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdWebhookWebhookIdGetWithHttpInfo($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdGet'][0])
    {
        $request = $this->organizationOrganizationIdWebhookWebhookIdGetRequest($organization_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\ExactPay\Model\WebhookResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\ExactPay\Model\WebhookResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\ExactPay\Model\WebhookResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\ExactPay\Model\WebhookResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\ExactPay\Model\WebhookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdGetAsync
     *
     * Retrieve Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookWebhookIdGetAsync($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdGet'][0])
    {
        return $this->organizationOrganizationIdWebhookWebhookIdGetAsyncWithHttpInfo($organization_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdGetAsyncWithHttpInfo
     *
     * Retrieve Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookWebhookIdGetAsyncWithHttpInfo($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdGet'][0])
    {
        $returnType = '\TheLogicStudio\ExactPay\Model\WebhookResponse';
        $request = $this->organizationOrganizationIdWebhookWebhookIdGetRequest($organization_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdWebhookWebhookIdGet'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdWebhookWebhookIdGetRequest($organization_id, $webhook_id, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdGet'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdWebhookWebhookIdGet'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling organizationOrganizationIdWebhookWebhookIdGet'
            );
        }


        $resourcePath = '/organization/{organizationId}/webhook/{webhookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdPut
     *
     * Update Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableWebhookRequest $updatable_webhook_request Fields that are updatable in the webhook definition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationOrganizationIdWebhookWebhookIdPut($organization_id, $webhook_id, $updatable_webhook_request, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdPut'][0])
    {
        $this->organizationOrganizationIdWebhookWebhookIdPutWithHttpInfo($organization_id, $webhook_id, $updatable_webhook_request, $contentType);
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdPutWithHttpInfo
     *
     * Update Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableWebhookRequest $updatable_webhook_request Fields that are updatable in the webhook definition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\ExactPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationOrganizationIdWebhookWebhookIdPutWithHttpInfo($organization_id, $webhook_id, $updatable_webhook_request, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdPut'][0])
    {
        $request = $this->organizationOrganizationIdWebhookWebhookIdPutRequest($organization_id, $webhook_id, $updatable_webhook_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdPutAsync
     *
     * Update Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableWebhookRequest $updatable_webhook_request Fields that are updatable in the webhook definition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookWebhookIdPutAsync($organization_id, $webhook_id, $updatable_webhook_request, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdPut'][0])
    {
        return $this->organizationOrganizationIdWebhookWebhookIdPutAsyncWithHttpInfo($organization_id, $webhook_id, $updatable_webhook_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationOrganizationIdWebhookWebhookIdPutAsyncWithHttpInfo
     *
     * Update Webhook
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableWebhookRequest $updatable_webhook_request Fields that are updatable in the webhook definition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationOrganizationIdWebhookWebhookIdPutAsyncWithHttpInfo($organization_id, $webhook_id, $updatable_webhook_request, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdPut'][0])
    {
        $returnType = '';
        $request = $this->organizationOrganizationIdWebhookWebhookIdPutRequest($organization_id, $webhook_id, $updatable_webhook_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationOrganizationIdWebhookWebhookIdPut'
     *
     * @param  string $organization_id The Organization identifier. (required)
     * @param  string $webhook_id The customers webhook definition Id (required)
     * @param  \TheLogicStudio\ExactPay\Model\UpdatableWebhookRequest $updatable_webhook_request Fields that are updatable in the webhook definition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['organizationOrganizationIdWebhookWebhookIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationOrganizationIdWebhookWebhookIdPutRequest($organization_id, $webhook_id, $updatable_webhook_request, string $contentType = self::contentTypes['organizationOrganizationIdWebhookWebhookIdPut'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationOrganizationIdWebhookWebhookIdPut'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling organizationOrganizationIdWebhookWebhookIdPut'
            );
        }

        // verify the required parameter 'updatable_webhook_request' is set
        if ($updatable_webhook_request === null || (is_array($updatable_webhook_request) && count($updatable_webhook_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updatable_webhook_request when calling organizationOrganizationIdWebhookWebhookIdPut'
            );
        }


        $resourcePath = '/organization/{organizationId}/webhook/{webhookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updatable_webhook_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updatable_webhook_request));
            } else {
                $httpBody = $updatable_webhook_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
