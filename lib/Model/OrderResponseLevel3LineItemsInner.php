<?php
/**
 * OrderResponseLevel3LineItemsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Model;

use \ArrayAccess;
use \TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * OrderResponseLevel3LineItemsInner Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderResponseLevel3LineItemsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderResponse_level3_lineItems_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'commodity_code' => 'string',
        'description' => 'string',
        'discount_amount' => 'int',
        'discount_indicator' => 'bool',
        'gross_net_indicator' => 'bool',
        'line_item_total' => 'int',
        'product_code' => 'string',
        'quantity' => 'float',
        'tax_amount' => 'int',
        'tax_rate' => 'float',
        'tax_type' => 'string',
        'unit_cost' => 'float',
        'unit_of_measure' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'commodity_code' => null,
        'description' => null,
        'discount_amount' => 'uint32',
        'discount_indicator' => null,
        'gross_net_indicator' => null,
        'line_item_total' => 'uint32',
        'product_code' => null,
        'quantity' => 'float',
        'tax_amount' => 'uint32',
        'tax_rate' => 'float',
        'tax_type' => null,
        'unit_cost' => 'float',
        'unit_of_measure' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'commodity_code' => false,
		'description' => false,
		'discount_amount' => false,
		'discount_indicator' => false,
		'gross_net_indicator' => false,
		'line_item_total' => false,
		'product_code' => false,
		'quantity' => false,
		'tax_amount' => false,
		'tax_rate' => false,
		'tax_type' => false,
		'unit_cost' => false,
		'unit_of_measure' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'commodity_code' => 'commodityCode',
        'description' => 'description',
        'discount_amount' => 'discountAmount',
        'discount_indicator' => 'discountIndicator',
        'gross_net_indicator' => 'grossNetIndicator',
        'line_item_total' => 'lineItemTotal',
        'product_code' => 'productCode',
        'quantity' => 'quantity',
        'tax_amount' => 'taxAmount',
        'tax_rate' => 'taxRate',
        'tax_type' => 'taxType',
        'unit_cost' => 'unitCost',
        'unit_of_measure' => 'unitOfMeasure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'commodity_code' => 'setCommodityCode',
        'description' => 'setDescription',
        'discount_amount' => 'setDiscountAmount',
        'discount_indicator' => 'setDiscountIndicator',
        'gross_net_indicator' => 'setGrossNetIndicator',
        'line_item_total' => 'setLineItemTotal',
        'product_code' => 'setProductCode',
        'quantity' => 'setQuantity',
        'tax_amount' => 'setTaxAmount',
        'tax_rate' => 'setTaxRate',
        'tax_type' => 'setTaxType',
        'unit_cost' => 'setUnitCost',
        'unit_of_measure' => 'setUnitOfMeasure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'commodity_code' => 'getCommodityCode',
        'description' => 'getDescription',
        'discount_amount' => 'getDiscountAmount',
        'discount_indicator' => 'getDiscountIndicator',
        'gross_net_indicator' => 'getGrossNetIndicator',
        'line_item_total' => 'getLineItemTotal',
        'product_code' => 'getProductCode',
        'quantity' => 'getQuantity',
        'tax_amount' => 'getTaxAmount',
        'tax_rate' => 'getTaxRate',
        'tax_type' => 'getTaxType',
        'unit_cost' => 'getUnitCost',
        'unit_of_measure' => 'getUnitOfMeasure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('commodity_code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('discount_indicator', $data ?? [], null);
        $this->setIfExists('gross_net_indicator', $data ?? [], null);
        $this->setIfExists('line_item_total', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('tax_type', $data ?? [], null);
        $this->setIfExists('unit_cost', $data ?? [], null);
        $this->setIfExists('unit_of_measure', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['discount_amount']) && ($this->container['discount_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['line_item_total']) && ($this->container['line_item_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'line_item_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['product_code']) && (mb_strlen($this->container['product_code']) > 12)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['tax_amount']) && ($this->container['tax_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'tax_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tax_rate']) && ($this->container['tax_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'tax_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unit_cost']) && ($this->container['unit_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'unit_cost', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets commodity_code
     *
     * @return string|null
     */
    public function getCommodityCode()
    {
        return $this->container['commodity_code'];
    }

    /**
     * Sets commodity_code
     *
     * @param string|null $commodity_code Identification number for the Purchase.
     *
     * @return self
     */
    public function setCommodityCode($commodity_code)
    {
        if (is_null($commodity_code)) {
            throw new \InvalidArgumentException('non-nullable commodity_code cannot be null');
        }
        $this->container['commodity_code'] = $commodity_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description for line item.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return int|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param int|null $discount_amount In smallest currency units, for example, in cents.
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        if (is_null($discount_amount)) {
            throw new \InvalidArgumentException('non-nullable discount_amount cannot be null');
        }

        if (($discount_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_amount when calling OrderResponseLevel3LineItemsInner., must be bigger than or equal to 0.');
        }

        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets discount_indicator
     *
     * @return bool|null
     */
    public function getDiscountIndicator()
    {
        return $this->container['discount_indicator'];
    }

    /**
     * Sets discount_indicator
     *
     * @param bool|null $discount_indicator discountIndicator value will be true or false.
     *
     * @return self
     */
    public function setDiscountIndicator($discount_indicator)
    {
        if (is_null($discount_indicator)) {
            throw new \InvalidArgumentException('non-nullable discount_indicator cannot be null');
        }
        $this->container['discount_indicator'] = $discount_indicator;

        return $this;
    }

    /**
     * Gets gross_net_indicator
     *
     * @return bool|null
     */
    public function getGrossNetIndicator()
    {
        return $this->container['gross_net_indicator'];
    }

    /**
     * Sets gross_net_indicator
     *
     * @param bool|null $gross_net_indicator grossNetIndicator value will be true or false.
     *
     * @return self
     */
    public function setGrossNetIndicator($gross_net_indicator)
    {
        if (is_null($gross_net_indicator)) {
            throw new \InvalidArgumentException('non-nullable gross_net_indicator cannot be null');
        }
        $this->container['gross_net_indicator'] = $gross_net_indicator;

        return $this;
    }

    /**
     * Gets line_item_total
     *
     * @return int|null
     */
    public function getLineItemTotal()
    {
        return $this->container['line_item_total'];
    }

    /**
     * Sets line_item_total
     *
     * @param int|null $line_item_total In smallest currency units, for example, in cents.
     *
     * @return self
     */
    public function setLineItemTotal($line_item_total)
    {
        if (is_null($line_item_total)) {
            throw new \InvalidArgumentException('non-nullable line_item_total cannot be null');
        }

        if (($line_item_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $line_item_total when calling OrderResponseLevel3LineItemsInner., must be bigger than or equal to 0.');
        }

        $this->container['line_item_total'] = $line_item_total;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code Code of the product.
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        if ((mb_strlen($product_code) > 12)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling OrderResponseLevel3LineItemsInner., must be smaller than or equal to 12.');
        }

        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity If present, must be greater than zero.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return int|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param int|null $tax_amount In smallest currency units, for example, in cents.
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            throw new \InvalidArgumentException('non-nullable tax_amount cannot be null');
        }

        if (($tax_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_amount when calling OrderResponseLevel3LineItemsInner., must be bigger than or equal to 0.');
        }

        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float|null $tax_rate Tax rate of the Order.
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            throw new \InvalidArgumentException('non-nullable tax_rate cannot be null');
        }

        if (($tax_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_rate when calling OrderResponseLevel3LineItemsInner., must be bigger than or equal to 0.');
        }

        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string|null
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string|null $tax_type Type of the tax.
     *
     * @return self
     */
    public function setTaxType($tax_type)
    {
        if (is_null($tax_type)) {
            throw new \InvalidArgumentException('non-nullable tax_type cannot be null');
        }
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return float|null
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param float|null $unit_cost In smallest currency units, for example, in cents in USD so 13.25 = 13 and one quarter cents.
     *
     * @return self
     */
    public function setUnitCost($unit_cost)
    {
        if (is_null($unit_cost)) {
            throw new \InvalidArgumentException('non-nullable unit_cost cannot be null');
        }

        if (($unit_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_cost when calling OrderResponseLevel3LineItemsInner., must be bigger than or equal to 0.');
        }

        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets unit_of_measure
     *
     * @return string|null
     */
    public function getUnitOfMeasure()
    {
        return $this->container['unit_of_measure'];
    }

    /**
     * Sets unit_of_measure
     *
     * @param string|null $unit_of_measure Unit to measure the tax.
     *
     * @return self
     */
    public function setUnitOfMeasure($unit_of_measure)
    {
        if (is_null($unit_of_measure)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measure cannot be null');
        }
        $this->container['unit_of_measure'] = $unit_of_measure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


