<?php
/**
 * Principal
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Model;

use \ArrayAccess;
use \TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * Principal Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Principal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Principal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_name' => 'string',
        'last_name' => 'string',
        'title' => '\TheLogicStudio\ExactPay\Model\TitleValues',
        'telephone' => 'string',
        'email' => 'string',
        'current_ownership_years' => 'float',
        'current_ownership_months' => 'float',
        'date_of_birth' => '\DateTime',
        'drivers_license_country' => 'string',
        'drivers_license' => 'string',
        'drivers_license_state' => 'string',
        'ssn' => 'string',
        'ssn_country' => 'string',
        'ssn_country_subdivision' => 'string',
        'percent_of_ownership' => 'float',
        'address' => '\TheLogicStudio\ExactPay\Model\PrincipalAddress',
        'nationality' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_name' => null,
        'last_name' => null,
        'title' => null,
        'telephone' => null,
        'email' => 'email',
        'current_ownership_years' => null,
        'current_ownership_months' => null,
        'date_of_birth' => 'date-time',
        'drivers_license_country' => null,
        'drivers_license' => null,
        'drivers_license_state' => null,
        'ssn' => null,
        'ssn_country' => null,
        'ssn_country_subdivision' => null,
        'percent_of_ownership' => null,
        'address' => null,
        'nationality' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'first_name' => false,
		'last_name' => false,
		'title' => false,
		'telephone' => false,
		'email' => false,
		'current_ownership_years' => false,
		'current_ownership_months' => false,
		'date_of_birth' => false,
		'drivers_license_country' => false,
		'drivers_license' => false,
		'drivers_license_state' => false,
		'ssn' => false,
		'ssn_country' => false,
		'ssn_country_subdivision' => false,
		'percent_of_ownership' => false,
		'address' => false,
		'nationality' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'title' => 'title',
        'telephone' => 'telephone',
        'email' => 'email',
        'current_ownership_years' => 'currentOwnershipYears',
        'current_ownership_months' => 'currentOwnershipMonths',
        'date_of_birth' => 'dateOfBirth',
        'drivers_license_country' => 'driversLicenseCountry',
        'drivers_license' => 'driversLicense',
        'drivers_license_state' => 'driversLicenseState',
        'ssn' => 'ssn',
        'ssn_country' => 'ssnCountry',
        'ssn_country_subdivision' => 'ssnCountrySubdivision',
        'percent_of_ownership' => 'percentOfOwnership',
        'address' => 'address',
        'nationality' => 'nationality'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'title' => 'setTitle',
        'telephone' => 'setTelephone',
        'email' => 'setEmail',
        'current_ownership_years' => 'setCurrentOwnershipYears',
        'current_ownership_months' => 'setCurrentOwnershipMonths',
        'date_of_birth' => 'setDateOfBirth',
        'drivers_license_country' => 'setDriversLicenseCountry',
        'drivers_license' => 'setDriversLicense',
        'drivers_license_state' => 'setDriversLicenseState',
        'ssn' => 'setSsn',
        'ssn_country' => 'setSsnCountry',
        'ssn_country_subdivision' => 'setSsnCountrySubdivision',
        'percent_of_ownership' => 'setPercentOfOwnership',
        'address' => 'setAddress',
        'nationality' => 'setNationality'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'title' => 'getTitle',
        'telephone' => 'getTelephone',
        'email' => 'getEmail',
        'current_ownership_years' => 'getCurrentOwnershipYears',
        'current_ownership_months' => 'getCurrentOwnershipMonths',
        'date_of_birth' => 'getDateOfBirth',
        'drivers_license_country' => 'getDriversLicenseCountry',
        'drivers_license' => 'getDriversLicense',
        'drivers_license_state' => 'getDriversLicenseState',
        'ssn' => 'getSsn',
        'ssn_country' => 'getSsnCountry',
        'ssn_country_subdivision' => 'getSsnCountrySubdivision',
        'percent_of_ownership' => 'getPercentOfOwnership',
        'address' => 'getAddress',
        'nationality' => 'getNationality'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DRIVERS_LICENSE_COUNTRY_USA = 'USA';
    public const DRIVERS_LICENSE_COUNTRY_CAN = 'CAN';
    public const SSN_COUNTRY_USA = 'USA';
    public const SSN_COUNTRY_CAN = 'CAN';
    public const NATIONALITY_USA = 'USA';
    public const NATIONALITY_CAN = 'CAN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDriversLicenseCountryAllowableValues()
    {
        return [
            self::DRIVERS_LICENSE_COUNTRY_USA,
            self::DRIVERS_LICENSE_COUNTRY_CAN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSsnCountryAllowableValues()
    {
        return [
            self::SSN_COUNTRY_USA,
            self::SSN_COUNTRY_CAN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNationalityAllowableValues()
    {
        return [
            self::NATIONALITY_USA,
            self::NATIONALITY_CAN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('telephone', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('current_ownership_years', $data ?? [], null);
        $this->setIfExists('current_ownership_months', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('drivers_license_country', $data ?? [], 'USA');
        $this->setIfExists('drivers_license', $data ?? [], null);
        $this->setIfExists('drivers_license_state', $data ?? [], null);
        $this->setIfExists('ssn', $data ?? [], null);
        $this->setIfExists('ssn_country', $data ?? [], 'USA');
        $this->setIfExists('ssn_country_subdivision', $data ?? [], null);
        $this->setIfExists('percent_of_ownership', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('nationality', $data ?? [], 'USA');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^(?!').*[a-zA-Z].*[\\w\\s']$/", $this->container['first_name'])) {
            $invalidProperties[] = "invalid value for 'first_name', must be conform to the pattern /^(?!').*[a-zA-Z].*[\\w\\s']$/.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['last_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^(?!').*[a-zA-Z].*[\\w\\s']$/", $this->container['last_name'])) {
            $invalidProperties[] = "invalid value for 'last_name', must be conform to the pattern /^(?!').*[a-zA-Z].*[\\w\\s']$/.";
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['telephone'] === null) {
            $invalidProperties[] = "'telephone' can't be null";
        }
        if ((mb_strlen($this->container['telephone']) > 10)) {
            $invalidProperties[] = "invalid value for 'telephone', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['telephone']) < 10)) {
            $invalidProperties[] = "invalid value for 'telephone', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/^[0-9]+$/", $this->container['telephone'])) {
            $invalidProperties[] = "invalid value for 'telephone', must be conform to the pattern /^[0-9]+$/.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if (!is_null($this->container['current_ownership_years']) && ($this->container['current_ownership_years'] < 0)) {
            $invalidProperties[] = "invalid value for 'current_ownership_years', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['current_ownership_months']) && ($this->container['current_ownership_months'] > 11)) {
            $invalidProperties[] = "invalid value for 'current_ownership_months', must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['current_ownership_months']) && ($this->container['current_ownership_months'] < 0)) {
            $invalidProperties[] = "invalid value for 'current_ownership_months', must be bigger than or equal to 0.";
        }

        if ($this->container['date_of_birth'] === null) {
            $invalidProperties[] = "'date_of_birth' can't be null";
        }
        $allowedValues = $this->getDriversLicenseCountryAllowableValues();
        if (!is_null($this->container['drivers_license_country']) && !in_array($this->container['drivers_license_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'drivers_license_country', must be one of '%s'",
                $this->container['drivers_license_country'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['drivers_license_country']) && (mb_strlen($this->container['drivers_license_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'drivers_license_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['drivers_license_country']) && (mb_strlen($this->container['drivers_license_country']) < 3)) {
            $invalidProperties[] = "invalid value for 'drivers_license_country', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['drivers_license'] === null) {
            $invalidProperties[] = "'drivers_license' can't be null";
        }
        if ((mb_strlen($this->container['drivers_license']) > 18)) {
            $invalidProperties[] = "invalid value for 'drivers_license', the character length must be smaller than or equal to 18.";
        }

        if ((mb_strlen($this->container['drivers_license']) < 0)) {
            $invalidProperties[] = "invalid value for 'drivers_license', the character length must be bigger than or equal to 0.";
        }

        if (!preg_match("/^[a-z0-9]+$/", $this->container['drivers_license'])) {
            $invalidProperties[] = "invalid value for 'drivers_license', must be conform to the pattern /^[a-z0-9]+$/.";
        }

        if ($this->container['drivers_license_state'] === null) {
            $invalidProperties[] = "'drivers_license_state' can't be null";
        }
        if ((mb_strlen($this->container['drivers_license_state']) > 2)) {
            $invalidProperties[] = "invalid value for 'drivers_license_state', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['drivers_license_state']) < 2)) {
            $invalidProperties[] = "invalid value for 'drivers_license_state', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['ssn'] === null) {
            $invalidProperties[] = "'ssn' can't be null";
        }
        if ((mb_strlen($this->container['ssn']) > 9)) {
            $invalidProperties[] = "invalid value for 'ssn', the character length must be smaller than or equal to 9.";
        }

        if ((mb_strlen($this->container['ssn']) < 9)) {
            $invalidProperties[] = "invalid value for 'ssn', the character length must be bigger than or equal to 9.";
        }

        $allowedValues = $this->getSsnCountryAllowableValues();
        if (!is_null($this->container['ssn_country']) && !in_array($this->container['ssn_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssn_country', must be one of '%s'",
                $this->container['ssn_country'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ssn_country']) && (mb_strlen($this->container['ssn_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'ssn_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['ssn_country']) && (mb_strlen($this->container['ssn_country']) < 3)) {
            $invalidProperties[] = "invalid value for 'ssn_country', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['ssn_country_subdivision'] === null) {
            $invalidProperties[] = "'ssn_country_subdivision' can't be null";
        }
        if ((mb_strlen($this->container['ssn_country_subdivision']) > 2)) {
            $invalidProperties[] = "invalid value for 'ssn_country_subdivision', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['ssn_country_subdivision']) < 2)) {
            $invalidProperties[] = "invalid value for 'ssn_country_subdivision', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['percent_of_ownership'] === null) {
            $invalidProperties[] = "'percent_of_ownership' can't be null";
        }
        if (($this->container['percent_of_ownership'] > 100)) {
            $invalidProperties[] = "invalid value for 'percent_of_ownership', must be smaller than or equal to 100.";
        }

        if (($this->container['percent_of_ownership'] < 0)) {
            $invalidProperties[] = "invalid value for 'percent_of_ownership', must be bigger than or equal to 0.";
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        $allowedValues = $this->getNationalityAllowableValues();
        if (!is_null($this->container['nationality']) && !in_array($this->container['nationality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nationality', must be one of '%s'",
                $this->container['nationality'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['nationality']) && (mb_strlen($this->container['nationality']) > 3)) {
            $invalidProperties[] = "invalid value for 'nationality', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['nationality']) && (mb_strlen($this->container['nationality']) < 3)) {
            $invalidProperties[] = "invalid value for 'nationality', the character length must be bigger than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The First Name of the Principal owner of the Business.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Principal., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Principal., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^(?!').*[a-zA-Z].*[\\w\\s']$/", $first_name))) {
            throw new \InvalidArgumentException("invalid value for \$first_name when calling Principal., must conform to the pattern /^(?!').*[a-zA-Z].*[\\w\\s']$/.");
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The Last Name of the Principal owner of the Business.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Principal., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($last_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Principal., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^(?!').*[a-zA-Z].*[\\w\\s']$/", $last_name))) {
            throw new \InvalidArgumentException("invalid value for \$last_name when calling Principal., must conform to the pattern /^(?!').*[a-zA-Z].*[\\w\\s']$/.");
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return \TheLogicStudio\ExactPay\Model\TitleValues
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param \TheLogicStudio\ExactPay\Model\TitleValues $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone Telephone Number of Principal Owner of the Business. USA phone number can't start with 0 0r 1. The value must be a valid number string.
     *
     * @return self
     */
    public function setTelephone($telephone)
    {
        if (is_null($telephone)) {
            throw new \InvalidArgumentException('non-nullable telephone cannot be null');
        }
        if ((mb_strlen($telephone) > 10)) {
            throw new \InvalidArgumentException('invalid length for $telephone when calling Principal., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($telephone) < 10)) {
            throw new \InvalidArgumentException('invalid length for $telephone when calling Principal., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[0-9]+$/", $telephone))) {
            throw new \InvalidArgumentException("invalid value for \$telephone when calling Principal., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The Principal's email.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets current_ownership_years
     *
     * @return float|null
     */
    public function getCurrentOwnershipYears()
    {
        return $this->container['current_ownership_years'];
    }

    /**
     * Sets current_ownership_years
     *
     * @param float|null $current_ownership_years Number of years the Principal's ownership in the Business. The value must be a non-negative number.
     *
     * @return self
     */
    public function setCurrentOwnershipYears($current_ownership_years)
    {
        if (is_null($current_ownership_years)) {
            throw new \InvalidArgumentException('non-nullable current_ownership_years cannot be null');
        }

        if (($current_ownership_years < 0)) {
            throw new \InvalidArgumentException('invalid value for $current_ownership_years when calling Principal., must be bigger than or equal to 0.');
        }

        $this->container['current_ownership_years'] = $current_ownership_years;

        return $this;
    }

    /**
     * Gets current_ownership_months
     *
     * @return float|null
     */
    public function getCurrentOwnershipMonths()
    {
        return $this->container['current_ownership_months'];
    }

    /**
     * Sets current_ownership_months
     *
     * @param float|null $current_ownership_months Number of months the Principal's ownership in the Business. The value must be a non-negative number.
     *
     * @return self
     */
    public function setCurrentOwnershipMonths($current_ownership_months)
    {
        if (is_null($current_ownership_months)) {
            throw new \InvalidArgumentException('non-nullable current_ownership_months cannot be null');
        }

        if (($current_ownership_months > 11)) {
            throw new \InvalidArgumentException('invalid value for $current_ownership_months when calling Principal., must be smaller than or equal to 11.');
        }
        if (($current_ownership_months < 0)) {
            throw new \InvalidArgumentException('invalid value for $current_ownership_months when calling Principal., must be bigger than or equal to 0.');
        }

        $this->container['current_ownership_months'] = $current_ownership_months;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime $date_of_birth Birth date of the Principal. The Principal must be 18 years or older.
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets drivers_license_country
     *
     * @return string|null
     */
    public function getDriversLicenseCountry()
    {
        return $this->container['drivers_license_country'];
    }

    /**
     * Sets drivers_license_country
     *
     * @param string|null $drivers_license_country The three-digit country code where the Principal's driving license was issued. Refer to the three-digit country code defined in ISO 3166-1 alpha-3.
     *
     * @return self
     */
    public function setDriversLicenseCountry($drivers_license_country)
    {
        if (is_null($drivers_license_country)) {
            throw new \InvalidArgumentException('non-nullable drivers_license_country cannot be null');
        }
        $allowedValues = $this->getDriversLicenseCountryAllowableValues();
        if (!in_array($drivers_license_country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'drivers_license_country', must be one of '%s'",
                    $drivers_license_country,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($drivers_license_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $drivers_license_country when calling Principal., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($drivers_license_country) < 3)) {
            throw new \InvalidArgumentException('invalid length for $drivers_license_country when calling Principal., must be bigger than or equal to 3.');
        }

        $this->container['drivers_license_country'] = $drivers_license_country;

        return $this;
    }

    /**
     * Gets drivers_license
     *
     * @return string
     */
    public function getDriversLicense()
    {
        return $this->container['drivers_license'];
    }

    /**
     * Sets drivers_license
     *
     * @param string $drivers_license Principal's driver license number.
     *
     * @return self
     */
    public function setDriversLicense($drivers_license)
    {
        if (is_null($drivers_license)) {
            throw new \InvalidArgumentException('non-nullable drivers_license cannot be null');
        }
        if ((mb_strlen($drivers_license) > 18)) {
            throw new \InvalidArgumentException('invalid length for $drivers_license when calling Principal., must be smaller than or equal to 18.');
        }
        if ((mb_strlen($drivers_license) < 0)) {
            throw new \InvalidArgumentException('invalid length for $drivers_license when calling Principal., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/^[a-z0-9]+$/", $drivers_license))) {
            throw new \InvalidArgumentException("invalid value for \$drivers_license when calling Principal., must conform to the pattern /^[a-z0-9]+$/.");
        }

        $this->container['drivers_license'] = $drivers_license;

        return $this;
    }

    /**
     * Gets drivers_license_state
     *
     * @return string
     */
    public function getDriversLicenseState()
    {
        return $this->container['drivers_license_state'];
    }

    /**
     * Sets drivers_license_state
     *
     * @param string $drivers_license_state The two-digit country subdivision where the Principal's driving license was issued. Refer to the two-digit country subdivision code defined in ISO 3166-2 for the countries listed in ISO 3166-1.
     *
     * @return self
     */
    public function setDriversLicenseState($drivers_license_state)
    {
        if (is_null($drivers_license_state)) {
            throw new \InvalidArgumentException('non-nullable drivers_license_state cannot be null');
        }
        if ((mb_strlen($drivers_license_state) > 2)) {
            throw new \InvalidArgumentException('invalid length for $drivers_license_state when calling Principal., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($drivers_license_state) < 2)) {
            throw new \InvalidArgumentException('invalid length for $drivers_license_state when calling Principal., must be bigger than or equal to 2.');
        }

        $this->container['drivers_license_state'] = $drivers_license_state;

        return $this;
    }

    /**
     * Gets ssn
     *
     * @return string
     */
    public function getSsn()
    {
        return $this->container['ssn'];
    }

    /**
     * Sets ssn
     *
     * @param string $ssn Principal's Social Security Number(SSN) for USA or Social Insurance Number(SIN) for Canada.
     *
     * @return self
     */
    public function setSsn($ssn)
    {
        if (is_null($ssn)) {
            throw new \InvalidArgumentException('non-nullable ssn cannot be null');
        }
        if ((mb_strlen($ssn) > 9)) {
            throw new \InvalidArgumentException('invalid length for $ssn when calling Principal., must be smaller than or equal to 9.');
        }
        if ((mb_strlen($ssn) < 9)) {
            throw new \InvalidArgumentException('invalid length for $ssn when calling Principal., must be bigger than or equal to 9.');
        }

        $this->container['ssn'] = $ssn;

        return $this;
    }

    /**
     * Gets ssn_country
     *
     * @return string|null
     */
    public function getSsnCountry()
    {
        return $this->container['ssn_country'];
    }

    /**
     * Sets ssn_country
     *
     * @param string|null $ssn_country The three-digit country code where the Principal's SSN / SIN was issued. Choose `USA` for SSN or `CAN` for SIN. Refer to the three-digit country code defined in ISO 3166-1 alpha-3.
     *
     * @return self
     */
    public function setSsnCountry($ssn_country)
    {
        if (is_null($ssn_country)) {
            throw new \InvalidArgumentException('non-nullable ssn_country cannot be null');
        }
        $allowedValues = $this->getSsnCountryAllowableValues();
        if (!in_array($ssn_country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssn_country', must be one of '%s'",
                    $ssn_country,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($ssn_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $ssn_country when calling Principal., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($ssn_country) < 3)) {
            throw new \InvalidArgumentException('invalid length for $ssn_country when calling Principal., must be bigger than or equal to 3.');
        }

        $this->container['ssn_country'] = $ssn_country;

        return $this;
    }

    /**
     * Gets ssn_country_subdivision
     *
     * @return string
     */
    public function getSsnCountrySubdivision()
    {
        return $this->container['ssn_country_subdivision'];
    }

    /**
     * Sets ssn_country_subdivision
     *
     * @param string $ssn_country_subdivision The two-digit country subdivision where the Principal's SSN / SIN was issued. Refer to the two-digit country subdivision code defined in  ISO 3166-2 for the countries listed in ISO 3166-1.
     *
     * @return self
     */
    public function setSsnCountrySubdivision($ssn_country_subdivision)
    {
        if (is_null($ssn_country_subdivision)) {
            throw new \InvalidArgumentException('non-nullable ssn_country_subdivision cannot be null');
        }
        if ((mb_strlen($ssn_country_subdivision) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ssn_country_subdivision when calling Principal., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ssn_country_subdivision) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ssn_country_subdivision when calling Principal., must be bigger than or equal to 2.');
        }

        $this->container['ssn_country_subdivision'] = $ssn_country_subdivision;

        return $this;
    }

    /**
     * Gets percent_of_ownership
     *
     * @return float
     */
    public function getPercentOfOwnership()
    {
        return $this->container['percent_of_ownership'];
    }

    /**
     * Sets percent_of_ownership
     *
     * @param float $percent_of_ownership The percentage of ownership held by the Principal in the business. The value must be a non-negative number. At most, The total ownership rate for all Principals can be 100 percent.
     *
     * @return self
     */
    public function setPercentOfOwnership($percent_of_ownership)
    {
        if (is_null($percent_of_ownership)) {
            throw new \InvalidArgumentException('non-nullable percent_of_ownership cannot be null');
        }

        if (($percent_of_ownership > 100)) {
            throw new \InvalidArgumentException('invalid value for $percent_of_ownership when calling Principal., must be smaller than or equal to 100.');
        }
        if (($percent_of_ownership < 0)) {
            throw new \InvalidArgumentException('invalid value for $percent_of_ownership when calling Principal., must be bigger than or equal to 0.');
        }

        $this->container['percent_of_ownership'] = $percent_of_ownership;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \TheLogicStudio\ExactPay\Model\PrincipalAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \TheLogicStudio\ExactPay\Model\PrincipalAddress $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality The nationality of the Principal.
     *
     * @return self
     */
    public function setNationality($nationality)
    {
        if (is_null($nationality)) {
            throw new \InvalidArgumentException('non-nullable nationality cannot be null');
        }
        $allowedValues = $this->getNationalityAllowableValues();
        if (!in_array($nationality, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nationality', must be one of '%s'",
                    $nationality,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($nationality) > 3)) {
            throw new \InvalidArgumentException('invalid length for $nationality when calling Principal., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($nationality) < 3)) {
            throw new \InvalidArgumentException('invalid length for $nationality when calling Principal., must be bigger than or equal to 3.');
        }

        $this->container['nationality'] = $nationality;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


