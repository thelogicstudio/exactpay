<?php
/**
 * ChargebackReportDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Model;

use \ArrayAccess;
use \TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * ChargebackReportDetails Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChargebackReportDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChargebackReportDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'organization' => 'string',
        'payment_reference' => 'string',
        'payment_date' => 'string',
        'account_number' => 'string',
        'routing_number' => 'string',
        'fund_amt' => 'string',
        'batch_reference' => 'string',
        'batch_type' => 'string',
        'customer_batch_reference' => 'string',
        'customer_name' => 'string',
        'merchant_number' => 'string',
        'external_mid' => 'string',
        'store_number' => 'string',
        'chain' => 'string',
        'batch_amt' => 'float',
        'amount' => 'float',
        'surchg_amount' => 'float',
        'convnce_amt' => 'float',
        'card_type' => 'string',
        'charge_type' => 'string',
        'charge_type_description' => 'string',
        'card_plan' => 'string',
        'card_no' => 'string',
        'chk_num' => 'string',
        'transaction_date' => 'string',
        'settlement_date' => 'string',
        'authorization_code' => 'string',
        'chargeback_control_no' => 'string',
        'roc_text' => 'string',
        'trn_aci' => 'string',
        'card_scheme_ref' => 'string',
        'trn_ref_num' => 'string',
        'settlement_method' => 'string',
        'currency_code' => 'string',
        'cb_acq_ref_id' => 'string',
        'chgbk_rsn_code' => 'string',
        'chgbk_rsn_desc' => 'string',
        'mer_ref' => 'string',
        'purch_id' => 'string',
        'cust_cod' => 'string',
        'trn_arn' => 'string',
        'term_id' => 'string',
        'ent_num' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'organization' => null,
        'payment_reference' => null,
        'payment_date' => null,
        'account_number' => null,
        'routing_number' => null,
        'fund_amt' => null,
        'batch_reference' => null,
        'batch_type' => null,
        'customer_batch_reference' => null,
        'customer_name' => null,
        'merchant_number' => null,
        'external_mid' => null,
        'store_number' => null,
        'chain' => null,
        'batch_amt' => null,
        'amount' => null,
        'surchg_amount' => null,
        'convnce_amt' => null,
        'card_type' => null,
        'charge_type' => null,
        'charge_type_description' => null,
        'card_plan' => null,
        'card_no' => null,
        'chk_num' => null,
        'transaction_date' => null,
        'settlement_date' => null,
        'authorization_code' => null,
        'chargeback_control_no' => null,
        'roc_text' => null,
        'trn_aci' => null,
        'card_scheme_ref' => null,
        'trn_ref_num' => null,
        'settlement_method' => null,
        'currency_code' => null,
        'cb_acq_ref_id' => null,
        'chgbk_rsn_code' => null,
        'chgbk_rsn_desc' => null,
        'mer_ref' => null,
        'purch_id' => null,
        'cust_cod' => null,
        'trn_arn' => null,
        'term_id' => null,
        'ent_num' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'organization' => false,
		'payment_reference' => false,
		'payment_date' => false,
		'account_number' => false,
		'routing_number' => false,
		'fund_amt' => false,
		'batch_reference' => false,
		'batch_type' => false,
		'customer_batch_reference' => false,
		'customer_name' => false,
		'merchant_number' => false,
		'external_mid' => false,
		'store_number' => false,
		'chain' => false,
		'batch_amt' => false,
		'amount' => false,
		'surchg_amount' => false,
		'convnce_amt' => false,
		'card_type' => false,
		'charge_type' => false,
		'charge_type_description' => false,
		'card_plan' => false,
		'card_no' => false,
		'chk_num' => false,
		'transaction_date' => false,
		'settlement_date' => false,
		'authorization_code' => false,
		'chargeback_control_no' => false,
		'roc_text' => false,
		'trn_aci' => false,
		'card_scheme_ref' => false,
		'trn_ref_num' => false,
		'settlement_method' => false,
		'currency_code' => false,
		'cb_acq_ref_id' => false,
		'chgbk_rsn_code' => false,
		'chgbk_rsn_desc' => false,
		'mer_ref' => false,
		'purch_id' => false,
		'cust_cod' => false,
		'trn_arn' => false,
		'term_id' => false,
		'ent_num' => false,
		'created_at' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization' => 'organization',
        'payment_reference' => 'paymentReference',
        'payment_date' => 'paymentDate',
        'account_number' => 'accountNumber',
        'routing_number' => 'routingNumber',
        'fund_amt' => 'fundAmt',
        'batch_reference' => 'batchReference',
        'batch_type' => 'batchType',
        'customer_batch_reference' => 'customerBatchReference',
        'customer_name' => 'customerName',
        'merchant_number' => 'merchantNumber',
        'external_mid' => 'externalMid',
        'store_number' => 'storeNumber',
        'chain' => 'chain',
        'batch_amt' => 'batchAmt',
        'amount' => 'amount',
        'surchg_amount' => 'surchgAmount',
        'convnce_amt' => 'convnceAmt',
        'card_type' => 'cardType',
        'charge_type' => 'chargeType',
        'charge_type_description' => 'chargeTypeDescription',
        'card_plan' => 'cardPlan',
        'card_no' => 'cardNo',
        'chk_num' => 'chkNum',
        'transaction_date' => 'transactionDate',
        'settlement_date' => 'settlementDate',
        'authorization_code' => 'authorizationCode',
        'chargeback_control_no' => 'chargebackControlNo',
        'roc_text' => 'rocText',
        'trn_aci' => 'trnAci',
        'card_scheme_ref' => 'cardSchemeRef',
        'trn_ref_num' => 'trnRefNum',
        'settlement_method' => 'settlementMethod',
        'currency_code' => 'currencyCode',
        'cb_acq_ref_id' => 'cbAcqRefId',
        'chgbk_rsn_code' => 'chgbkRsnCode',
        'chgbk_rsn_desc' => 'chgbkRsnDesc',
        'mer_ref' => 'merRef',
        'purch_id' => 'purchId',
        'cust_cod' => 'custCod',
        'trn_arn' => 'trnArn',
        'term_id' => 'termId',
        'ent_num' => 'entNum',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization' => 'setOrganization',
        'payment_reference' => 'setPaymentReference',
        'payment_date' => 'setPaymentDate',
        'account_number' => 'setAccountNumber',
        'routing_number' => 'setRoutingNumber',
        'fund_amt' => 'setFundAmt',
        'batch_reference' => 'setBatchReference',
        'batch_type' => 'setBatchType',
        'customer_batch_reference' => 'setCustomerBatchReference',
        'customer_name' => 'setCustomerName',
        'merchant_number' => 'setMerchantNumber',
        'external_mid' => 'setExternalMid',
        'store_number' => 'setStoreNumber',
        'chain' => 'setChain',
        'batch_amt' => 'setBatchAmt',
        'amount' => 'setAmount',
        'surchg_amount' => 'setSurchgAmount',
        'convnce_amt' => 'setConvnceAmt',
        'card_type' => 'setCardType',
        'charge_type' => 'setChargeType',
        'charge_type_description' => 'setChargeTypeDescription',
        'card_plan' => 'setCardPlan',
        'card_no' => 'setCardNo',
        'chk_num' => 'setChkNum',
        'transaction_date' => 'setTransactionDate',
        'settlement_date' => 'setSettlementDate',
        'authorization_code' => 'setAuthorizationCode',
        'chargeback_control_no' => 'setChargebackControlNo',
        'roc_text' => 'setRocText',
        'trn_aci' => 'setTrnAci',
        'card_scheme_ref' => 'setCardSchemeRef',
        'trn_ref_num' => 'setTrnRefNum',
        'settlement_method' => 'setSettlementMethod',
        'currency_code' => 'setCurrencyCode',
        'cb_acq_ref_id' => 'setCbAcqRefId',
        'chgbk_rsn_code' => 'setChgbkRsnCode',
        'chgbk_rsn_desc' => 'setChgbkRsnDesc',
        'mer_ref' => 'setMerRef',
        'purch_id' => 'setPurchId',
        'cust_cod' => 'setCustCod',
        'trn_arn' => 'setTrnArn',
        'term_id' => 'setTermId',
        'ent_num' => 'setEntNum',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization' => 'getOrganization',
        'payment_reference' => 'getPaymentReference',
        'payment_date' => 'getPaymentDate',
        'account_number' => 'getAccountNumber',
        'routing_number' => 'getRoutingNumber',
        'fund_amt' => 'getFundAmt',
        'batch_reference' => 'getBatchReference',
        'batch_type' => 'getBatchType',
        'customer_batch_reference' => 'getCustomerBatchReference',
        'customer_name' => 'getCustomerName',
        'merchant_number' => 'getMerchantNumber',
        'external_mid' => 'getExternalMid',
        'store_number' => 'getStoreNumber',
        'chain' => 'getChain',
        'batch_amt' => 'getBatchAmt',
        'amount' => 'getAmount',
        'surchg_amount' => 'getSurchgAmount',
        'convnce_amt' => 'getConvnceAmt',
        'card_type' => 'getCardType',
        'charge_type' => 'getChargeType',
        'charge_type_description' => 'getChargeTypeDescription',
        'card_plan' => 'getCardPlan',
        'card_no' => 'getCardNo',
        'chk_num' => 'getChkNum',
        'transaction_date' => 'getTransactionDate',
        'settlement_date' => 'getSettlementDate',
        'authorization_code' => 'getAuthorizationCode',
        'chargeback_control_no' => 'getChargebackControlNo',
        'roc_text' => 'getRocText',
        'trn_aci' => 'getTrnAci',
        'card_scheme_ref' => 'getCardSchemeRef',
        'trn_ref_num' => 'getTrnRefNum',
        'settlement_method' => 'getSettlementMethod',
        'currency_code' => 'getCurrencyCode',
        'cb_acq_ref_id' => 'getCbAcqRefId',
        'chgbk_rsn_code' => 'getChgbkRsnCode',
        'chgbk_rsn_desc' => 'getChgbkRsnDesc',
        'mer_ref' => 'getMerRef',
        'purch_id' => 'getPurchId',
        'cust_cod' => 'getCustCod',
        'trn_arn' => 'getTrnArn',
        'term_id' => 'getTermId',
        'ent_num' => 'getEntNum',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('payment_reference', $data ?? [], null);
        $this->setIfExists('payment_date', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('routing_number', $data ?? [], null);
        $this->setIfExists('fund_amt', $data ?? [], null);
        $this->setIfExists('batch_reference', $data ?? [], null);
        $this->setIfExists('batch_type', $data ?? [], null);
        $this->setIfExists('customer_batch_reference', $data ?? [], null);
        $this->setIfExists('customer_name', $data ?? [], null);
        $this->setIfExists('merchant_number', $data ?? [], null);
        $this->setIfExists('external_mid', $data ?? [], null);
        $this->setIfExists('store_number', $data ?? [], null);
        $this->setIfExists('chain', $data ?? [], null);
        $this->setIfExists('batch_amt', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('surchg_amount', $data ?? [], null);
        $this->setIfExists('convnce_amt', $data ?? [], null);
        $this->setIfExists('card_type', $data ?? [], null);
        $this->setIfExists('charge_type', $data ?? [], null);
        $this->setIfExists('charge_type_description', $data ?? [], null);
        $this->setIfExists('card_plan', $data ?? [], null);
        $this->setIfExists('card_no', $data ?? [], null);
        $this->setIfExists('chk_num', $data ?? [], null);
        $this->setIfExists('transaction_date', $data ?? [], null);
        $this->setIfExists('settlement_date', $data ?? [], null);
        $this->setIfExists('authorization_code', $data ?? [], null);
        $this->setIfExists('chargeback_control_no', $data ?? [], null);
        $this->setIfExists('roc_text', $data ?? [], null);
        $this->setIfExists('trn_aci', $data ?? [], null);
        $this->setIfExists('card_scheme_ref', $data ?? [], null);
        $this->setIfExists('trn_ref_num', $data ?? [], null);
        $this->setIfExists('settlement_method', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('cb_acq_ref_id', $data ?? [], null);
        $this->setIfExists('chgbk_rsn_code', $data ?? [], null);
        $this->setIfExists('chgbk_rsn_desc', $data ?? [], null);
        $this->setIfExists('mer_ref', $data ?? [], null);
        $this->setIfExists('purch_id', $data ?? [], null);
        $this->setIfExists('cust_cod', $data ?? [], null);
        $this->setIfExists('trn_arn', $data ?? [], null);
        $this->setIfExists('term_id', $data ?? [], null);
        $this->setIfExists('ent_num', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization
     *
     * @return string|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string|null $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        if (is_null($organization)) {
            throw new \InvalidArgumentException('non-nullable organization cannot be null');
        }
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets payment_reference
     *
     * @return string|null
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param string|null $payment_reference payment_reference
     *
     * @return self
     */
    public function setPaymentReference($payment_reference)
    {
        if (is_null($payment_reference)) {
            throw new \InvalidArgumentException('non-nullable payment_reference cannot be null');
        }
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return string|null
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param string|null $payment_date payment_date
     *
     * @return self
     */
    public function setPaymentDate($payment_date)
    {
        if (is_null($payment_date)) {
            throw new \InvalidArgumentException('non-nullable payment_date cannot be null');
        }
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number account_number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string|null
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string|null $routing_number routing_number
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        if (is_null($routing_number)) {
            throw new \InvalidArgumentException('non-nullable routing_number cannot be null');
        }
        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets fund_amt
     *
     * @return string|null
     */
    public function getFundAmt()
    {
        return $this->container['fund_amt'];
    }

    /**
     * Sets fund_amt
     *
     * @param string|null $fund_amt fund_amt
     *
     * @return self
     */
    public function setFundAmt($fund_amt)
    {
        if (is_null($fund_amt)) {
            throw new \InvalidArgumentException('non-nullable fund_amt cannot be null');
        }
        $this->container['fund_amt'] = $fund_amt;

        return $this;
    }

    /**
     * Gets batch_reference
     *
     * @return string|null
     */
    public function getBatchReference()
    {
        return $this->container['batch_reference'];
    }

    /**
     * Sets batch_reference
     *
     * @param string|null $batch_reference batch_reference
     *
     * @return self
     */
    public function setBatchReference($batch_reference)
    {
        if (is_null($batch_reference)) {
            throw new \InvalidArgumentException('non-nullable batch_reference cannot be null');
        }
        $this->container['batch_reference'] = $batch_reference;

        return $this;
    }

    /**
     * Gets batch_type
     *
     * @return string|null
     */
    public function getBatchType()
    {
        return $this->container['batch_type'];
    }

    /**
     * Sets batch_type
     *
     * @param string|null $batch_type batch_type
     *
     * @return self
     */
    public function setBatchType($batch_type)
    {
        if (is_null($batch_type)) {
            throw new \InvalidArgumentException('non-nullable batch_type cannot be null');
        }
        $this->container['batch_type'] = $batch_type;

        return $this;
    }

    /**
     * Gets customer_batch_reference
     *
     * @return string|null
     */
    public function getCustomerBatchReference()
    {
        return $this->container['customer_batch_reference'];
    }

    /**
     * Sets customer_batch_reference
     *
     * @param string|null $customer_batch_reference customer_batch_reference
     *
     * @return self
     */
    public function setCustomerBatchReference($customer_batch_reference)
    {
        if (is_null($customer_batch_reference)) {
            throw new \InvalidArgumentException('non-nullable customer_batch_reference cannot be null');
        }
        $this->container['customer_batch_reference'] = $customer_batch_reference;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string|null
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string|null $customer_name customer_name
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        if (is_null($customer_name)) {
            throw new \InvalidArgumentException('non-nullable customer_name cannot be null');
        }
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets merchant_number
     *
     * @return string|null
     */
    public function getMerchantNumber()
    {
        return $this->container['merchant_number'];
    }

    /**
     * Sets merchant_number
     *
     * @param string|null $merchant_number merchant_number
     *
     * @return self
     */
    public function setMerchantNumber($merchant_number)
    {
        if (is_null($merchant_number)) {
            throw new \InvalidArgumentException('non-nullable merchant_number cannot be null');
        }
        $this->container['merchant_number'] = $merchant_number;

        return $this;
    }

    /**
     * Gets external_mid
     *
     * @return string|null
     */
    public function getExternalMid()
    {
        return $this->container['external_mid'];
    }

    /**
     * Sets external_mid
     *
     * @param string|null $external_mid external_mid
     *
     * @return self
     */
    public function setExternalMid($external_mid)
    {
        if (is_null($external_mid)) {
            throw new \InvalidArgumentException('non-nullable external_mid cannot be null');
        }
        $this->container['external_mid'] = $external_mid;

        return $this;
    }

    /**
     * Gets store_number
     *
     * @return string|null
     */
    public function getStoreNumber()
    {
        return $this->container['store_number'];
    }

    /**
     * Sets store_number
     *
     * @param string|null $store_number store_number
     *
     * @return self
     */
    public function setStoreNumber($store_number)
    {
        if (is_null($store_number)) {
            throw new \InvalidArgumentException('non-nullable store_number cannot be null');
        }
        $this->container['store_number'] = $store_number;

        return $this;
    }

    /**
     * Gets chain
     *
     * @return string|null
     */
    public function getChain()
    {
        return $this->container['chain'];
    }

    /**
     * Sets chain
     *
     * @param string|null $chain chain
     *
     * @return self
     */
    public function setChain($chain)
    {
        if (is_null($chain)) {
            throw new \InvalidArgumentException('non-nullable chain cannot be null');
        }
        $this->container['chain'] = $chain;

        return $this;
    }

    /**
     * Gets batch_amt
     *
     * @return float|null
     */
    public function getBatchAmt()
    {
        return $this->container['batch_amt'];
    }

    /**
     * Sets batch_amt
     *
     * @param float|null $batch_amt batch_amt
     *
     * @return self
     */
    public function setBatchAmt($batch_amt)
    {
        if (is_null($batch_amt)) {
            throw new \InvalidArgumentException('non-nullable batch_amt cannot be null');
        }
        $this->container['batch_amt'] = $batch_amt;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets surchg_amount
     *
     * @return float|null
     */
    public function getSurchgAmount()
    {
        return $this->container['surchg_amount'];
    }

    /**
     * Sets surchg_amount
     *
     * @param float|null $surchg_amount surchg_amount
     *
     * @return self
     */
    public function setSurchgAmount($surchg_amount)
    {
        if (is_null($surchg_amount)) {
            throw new \InvalidArgumentException('non-nullable surchg_amount cannot be null');
        }
        $this->container['surchg_amount'] = $surchg_amount;

        return $this;
    }

    /**
     * Gets convnce_amt
     *
     * @return float|null
     */
    public function getConvnceAmt()
    {
        return $this->container['convnce_amt'];
    }

    /**
     * Sets convnce_amt
     *
     * @param float|null $convnce_amt convnce_amt
     *
     * @return self
     */
    public function setConvnceAmt($convnce_amt)
    {
        if (is_null($convnce_amt)) {
            throw new \InvalidArgumentException('non-nullable convnce_amt cannot be null');
        }
        $this->container['convnce_amt'] = $convnce_amt;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string|null
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string|null $card_type card_type
     *
     * @return self
     */
    public function setCardType($card_type)
    {
        if (is_null($card_type)) {
            throw new \InvalidArgumentException('non-nullable card_type cannot be null');
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets charge_type
     *
     * @return string|null
     */
    public function getChargeType()
    {
        return $this->container['charge_type'];
    }

    /**
     * Sets charge_type
     *
     * @param string|null $charge_type charge_type
     *
     * @return self
     */
    public function setChargeType($charge_type)
    {
        if (is_null($charge_type)) {
            throw new \InvalidArgumentException('non-nullable charge_type cannot be null');
        }
        $this->container['charge_type'] = $charge_type;

        return $this;
    }

    /**
     * Gets charge_type_description
     *
     * @return string|null
     */
    public function getChargeTypeDescription()
    {
        return $this->container['charge_type_description'];
    }

    /**
     * Sets charge_type_description
     *
     * @param string|null $charge_type_description charge_type_description
     *
     * @return self
     */
    public function setChargeTypeDescription($charge_type_description)
    {
        if (is_null($charge_type_description)) {
            throw new \InvalidArgumentException('non-nullable charge_type_description cannot be null');
        }
        $this->container['charge_type_description'] = $charge_type_description;

        return $this;
    }

    /**
     * Gets card_plan
     *
     * @return string|null
     */
    public function getCardPlan()
    {
        return $this->container['card_plan'];
    }

    /**
     * Sets card_plan
     *
     * @param string|null $card_plan card_plan
     *
     * @return self
     */
    public function setCardPlan($card_plan)
    {
        if (is_null($card_plan)) {
            throw new \InvalidArgumentException('non-nullable card_plan cannot be null');
        }
        $this->container['card_plan'] = $card_plan;

        return $this;
    }

    /**
     * Gets card_no
     *
     * @return string|null
     */
    public function getCardNo()
    {
        return $this->container['card_no'];
    }

    /**
     * Sets card_no
     *
     * @param string|null $card_no card_no
     *
     * @return self
     */
    public function setCardNo($card_no)
    {
        if (is_null($card_no)) {
            throw new \InvalidArgumentException('non-nullable card_no cannot be null');
        }
        $this->container['card_no'] = $card_no;

        return $this;
    }

    /**
     * Gets chk_num
     *
     * @return string|null
     */
    public function getChkNum()
    {
        return $this->container['chk_num'];
    }

    /**
     * Sets chk_num
     *
     * @param string|null $chk_num chk_num
     *
     * @return self
     */
    public function setChkNum($chk_num)
    {
        if (is_null($chk_num)) {
            throw new \InvalidArgumentException('non-nullable chk_num cannot be null');
        }
        $this->container['chk_num'] = $chk_num;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return string|null
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param string|null $transaction_date transaction_date
     *
     * @return self
     */
    public function setTransactionDate($transaction_date)
    {
        if (is_null($transaction_date)) {
            throw new \InvalidArgumentException('non-nullable transaction_date cannot be null');
        }
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets settlement_date
     *
     * @return string|null
     */
    public function getSettlementDate()
    {
        return $this->container['settlement_date'];
    }

    /**
     * Sets settlement_date
     *
     * @param string|null $settlement_date settlement_date
     *
     * @return self
     */
    public function setSettlementDate($settlement_date)
    {
        if (is_null($settlement_date)) {
            throw new \InvalidArgumentException('non-nullable settlement_date cannot be null');
        }
        $this->container['settlement_date'] = $settlement_date;

        return $this;
    }

    /**
     * Gets authorization_code
     *
     * @return string|null
     */
    public function getAuthorizationCode()
    {
        return $this->container['authorization_code'];
    }

    /**
     * Sets authorization_code
     *
     * @param string|null $authorization_code authorization_code
     *
     * @return self
     */
    public function setAuthorizationCode($authorization_code)
    {
        if (is_null($authorization_code)) {
            throw new \InvalidArgumentException('non-nullable authorization_code cannot be null');
        }
        $this->container['authorization_code'] = $authorization_code;

        return $this;
    }

    /**
     * Gets chargeback_control_no
     *
     * @return string|null
     */
    public function getChargebackControlNo()
    {
        return $this->container['chargeback_control_no'];
    }

    /**
     * Sets chargeback_control_no
     *
     * @param string|null $chargeback_control_no chargeback_control_no
     *
     * @return self
     */
    public function setChargebackControlNo($chargeback_control_no)
    {
        if (is_null($chargeback_control_no)) {
            throw new \InvalidArgumentException('non-nullable chargeback_control_no cannot be null');
        }
        $this->container['chargeback_control_no'] = $chargeback_control_no;

        return $this;
    }

    /**
     * Gets roc_text
     *
     * @return string|null
     */
    public function getRocText()
    {
        return $this->container['roc_text'];
    }

    /**
     * Sets roc_text
     *
     * @param string|null $roc_text roc_text
     *
     * @return self
     */
    public function setRocText($roc_text)
    {
        if (is_null($roc_text)) {
            throw new \InvalidArgumentException('non-nullable roc_text cannot be null');
        }
        $this->container['roc_text'] = $roc_text;

        return $this;
    }

    /**
     * Gets trn_aci
     *
     * @return string|null
     */
    public function getTrnAci()
    {
        return $this->container['trn_aci'];
    }

    /**
     * Sets trn_aci
     *
     * @param string|null $trn_aci trn_aci
     *
     * @return self
     */
    public function setTrnAci($trn_aci)
    {
        if (is_null($trn_aci)) {
            throw new \InvalidArgumentException('non-nullable trn_aci cannot be null');
        }
        $this->container['trn_aci'] = $trn_aci;

        return $this;
    }

    /**
     * Gets card_scheme_ref
     *
     * @return string|null
     */
    public function getCardSchemeRef()
    {
        return $this->container['card_scheme_ref'];
    }

    /**
     * Sets card_scheme_ref
     *
     * @param string|null $card_scheme_ref card_scheme_ref
     *
     * @return self
     */
    public function setCardSchemeRef($card_scheme_ref)
    {
        if (is_null($card_scheme_ref)) {
            throw new \InvalidArgumentException('non-nullable card_scheme_ref cannot be null');
        }
        $this->container['card_scheme_ref'] = $card_scheme_ref;

        return $this;
    }

    /**
     * Gets trn_ref_num
     *
     * @return string|null
     */
    public function getTrnRefNum()
    {
        return $this->container['trn_ref_num'];
    }

    /**
     * Sets trn_ref_num
     *
     * @param string|null $trn_ref_num trn_ref_num
     *
     * @return self
     */
    public function setTrnRefNum($trn_ref_num)
    {
        if (is_null($trn_ref_num)) {
            throw new \InvalidArgumentException('non-nullable trn_ref_num cannot be null');
        }
        $this->container['trn_ref_num'] = $trn_ref_num;

        return $this;
    }

    /**
     * Gets settlement_method
     *
     * @return string|null
     */
    public function getSettlementMethod()
    {
        return $this->container['settlement_method'];
    }

    /**
     * Sets settlement_method
     *
     * @param string|null $settlement_method settlement_method
     *
     * @return self
     */
    public function setSettlementMethod($settlement_method)
    {
        if (is_null($settlement_method)) {
            throw new \InvalidArgumentException('non-nullable settlement_method cannot be null');
        }
        $this->container['settlement_method'] = $settlement_method;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets cb_acq_ref_id
     *
     * @return string|null
     */
    public function getCbAcqRefId()
    {
        return $this->container['cb_acq_ref_id'];
    }

    /**
     * Sets cb_acq_ref_id
     *
     * @param string|null $cb_acq_ref_id cb_acq_ref_id
     *
     * @return self
     */
    public function setCbAcqRefId($cb_acq_ref_id)
    {
        if (is_null($cb_acq_ref_id)) {
            throw new \InvalidArgumentException('non-nullable cb_acq_ref_id cannot be null');
        }
        $this->container['cb_acq_ref_id'] = $cb_acq_ref_id;

        return $this;
    }

    /**
     * Gets chgbk_rsn_code
     *
     * @return string|null
     */
    public function getChgbkRsnCode()
    {
        return $this->container['chgbk_rsn_code'];
    }

    /**
     * Sets chgbk_rsn_code
     *
     * @param string|null $chgbk_rsn_code chgbk_rsn_code
     *
     * @return self
     */
    public function setChgbkRsnCode($chgbk_rsn_code)
    {
        if (is_null($chgbk_rsn_code)) {
            throw new \InvalidArgumentException('non-nullable chgbk_rsn_code cannot be null');
        }
        $this->container['chgbk_rsn_code'] = $chgbk_rsn_code;

        return $this;
    }

    /**
     * Gets chgbk_rsn_desc
     *
     * @return string|null
     */
    public function getChgbkRsnDesc()
    {
        return $this->container['chgbk_rsn_desc'];
    }

    /**
     * Sets chgbk_rsn_desc
     *
     * @param string|null $chgbk_rsn_desc chgbk_rsn_desc
     *
     * @return self
     */
    public function setChgbkRsnDesc($chgbk_rsn_desc)
    {
        if (is_null($chgbk_rsn_desc)) {
            throw new \InvalidArgumentException('non-nullable chgbk_rsn_desc cannot be null');
        }
        $this->container['chgbk_rsn_desc'] = $chgbk_rsn_desc;

        return $this;
    }

    /**
     * Gets mer_ref
     *
     * @return string|null
     */
    public function getMerRef()
    {
        return $this->container['mer_ref'];
    }

    /**
     * Sets mer_ref
     *
     * @param string|null $mer_ref mer_ref
     *
     * @return self
     */
    public function setMerRef($mer_ref)
    {
        if (is_null($mer_ref)) {
            throw new \InvalidArgumentException('non-nullable mer_ref cannot be null');
        }
        $this->container['mer_ref'] = $mer_ref;

        return $this;
    }

    /**
     * Gets purch_id
     *
     * @return string|null
     */
    public function getPurchId()
    {
        return $this->container['purch_id'];
    }

    /**
     * Sets purch_id
     *
     * @param string|null $purch_id purch_id
     *
     * @return self
     */
    public function setPurchId($purch_id)
    {
        if (is_null($purch_id)) {
            throw new \InvalidArgumentException('non-nullable purch_id cannot be null');
        }
        $this->container['purch_id'] = $purch_id;

        return $this;
    }

    /**
     * Gets cust_cod
     *
     * @return string|null
     */
    public function getCustCod()
    {
        return $this->container['cust_cod'];
    }

    /**
     * Sets cust_cod
     *
     * @param string|null $cust_cod cust_cod
     *
     * @return self
     */
    public function setCustCod($cust_cod)
    {
        if (is_null($cust_cod)) {
            throw new \InvalidArgumentException('non-nullable cust_cod cannot be null');
        }
        $this->container['cust_cod'] = $cust_cod;

        return $this;
    }

    /**
     * Gets trn_arn
     *
     * @return string|null
     */
    public function getTrnArn()
    {
        return $this->container['trn_arn'];
    }

    /**
     * Sets trn_arn
     *
     * @param string|null $trn_arn trn_arn
     *
     * @return self
     */
    public function setTrnArn($trn_arn)
    {
        if (is_null($trn_arn)) {
            throw new \InvalidArgumentException('non-nullable trn_arn cannot be null');
        }
        $this->container['trn_arn'] = $trn_arn;

        return $this;
    }

    /**
     * Gets term_id
     *
     * @return string|null
     */
    public function getTermId()
    {
        return $this->container['term_id'];
    }

    /**
     * Sets term_id
     *
     * @param string|null $term_id term_id
     *
     * @return self
     */
    public function setTermId($term_id)
    {
        if (is_null($term_id)) {
            throw new \InvalidArgumentException('non-nullable term_id cannot be null');
        }
        $this->container['term_id'] = $term_id;

        return $this;
    }

    /**
     * Gets ent_num
     *
     * @return string|null
     */
    public function getEntNum()
    {
        return $this->container['ent_num'];
    }

    /**
     * Sets ent_num
     *
     * @param string|null $ent_num ent_num
     *
     * @return self
     */
    public function setEntNum($ent_num)
    {
        if (is_null($ent_num)) {
            throw new \InvalidArgumentException('non-nullable ent_num cannot be null');
        }
        $this->container['ent_num'] = $ent_num;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


