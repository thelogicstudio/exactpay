<?php
/**
 * Dwolla
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Model;

use \ArrayAccess;
use \TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * Dwolla Class Doc Comment
 *
 * @category Class
 * @description Information about Onboarding details with Dwolla for ACH Payment enablement. Only Accounts are onboarded with Dwolla. Organizations are not onboarded with Dwolla and the status will always be &#x60;na&#x60; for Organizations.
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Dwolla implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Dwolla';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_classification' => '\TheLogicStudio\ExactPay\Model\BusinessClassification',
        'id' => 'string',
        'status' => 'string',
        'created_at' => 'string',
        'document_needed' => 'string',
        'type' => 'string',
        'beneficial_ownership_certify_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_classification' => null,
        'id' => null,
        'status' => null,
        'created_at' => null,
        'document_needed' => null,
        'type' => null,
        'beneficial_ownership_certify_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'business_classification' => false,
		'id' => false,
		'status' => false,
		'created_at' => false,
		'document_needed' => false,
		'type' => false,
		'beneficial_ownership_certify_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_classification' => 'businessClassification',
        'id' => 'id',
        'status' => 'status',
        'created_at' => 'createdAt',
        'document_needed' => 'documentNeeded',
        'type' => 'type',
        'beneficial_ownership_certify_status' => 'beneficialOwnershipCertifyStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_classification' => 'setBusinessClassification',
        'id' => 'setId',
        'status' => 'setStatus',
        'created_at' => 'setCreatedAt',
        'document_needed' => 'setDocumentNeeded',
        'type' => 'setType',
        'beneficial_ownership_certify_status' => 'setBeneficialOwnershipCertifyStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_classification' => 'getBusinessClassification',
        'id' => 'getId',
        'status' => 'getStatus',
        'created_at' => 'getCreatedAt',
        'document_needed' => 'getDocumentNeeded',
        'type' => 'getType',
        'beneficial_ownership_certify_status' => 'getBeneficialOwnershipCertifyStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_NA = 'na';
    public const STATUS_STARTED = 'started';
    public const STATUS_REVERIFICATION_NEEDED = 'reverification_needed';
    public const STATUS_VERIFICATION_DOCUMENT_NEEDED = 'verification_document_needed';
    public const STATUS_BENEFICIAL_OWNER_REVERIFICATION_NEEDED = 'beneficial_owner_reverification_needed';
    public const STATUS_BENEFICIAL_OWNER_DOCUMENT_NEEDED = 'beneficial_owner_document_needed';
    public const STATUS_COMPLETED = 'completed';
    public const STATUS_SUSPENDED = 'suspended';
    public const TYPE_UNVERIFIED = 'unverified';
    public const TYPE_PERSONAL = 'personal';
    public const TYPE_BUSINESS = 'business';
    public const TYPE_RECEIVE_ONLY = 'receive-only';
    public const BENEFICIAL_OWNERSHIP_CERTIFY_STATUS_UNCERTIFIED = 'uncertified';
    public const BENEFICIAL_OWNERSHIP_CERTIFY_STATUS_CERTIFIED = 'certified';
    public const BENEFICIAL_OWNERSHIP_CERTIFY_STATUS_RECTIFY = 'rectify';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NA,
            self::STATUS_STARTED,
            self::STATUS_REVERIFICATION_NEEDED,
            self::STATUS_VERIFICATION_DOCUMENT_NEEDED,
            self::STATUS_BENEFICIAL_OWNER_REVERIFICATION_NEEDED,
            self::STATUS_BENEFICIAL_OWNER_DOCUMENT_NEEDED,
            self::STATUS_COMPLETED,
            self::STATUS_SUSPENDED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UNVERIFIED,
            self::TYPE_PERSONAL,
            self::TYPE_BUSINESS,
            self::TYPE_RECEIVE_ONLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBeneficialOwnershipCertifyStatusAllowableValues()
    {
        return [
            self::BENEFICIAL_OWNERSHIP_CERTIFY_STATUS_UNCERTIFIED,
            self::BENEFICIAL_OWNERSHIP_CERTIFY_STATUS_CERTIFIED,
            self::BENEFICIAL_OWNERSHIP_CERTIFY_STATUS_RECTIFY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('business_classification', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('document_needed', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('beneficial_ownership_certify_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBeneficialOwnershipCertifyStatusAllowableValues();
        if (!is_null($this->container['beneficial_ownership_certify_status']) && !in_array($this->container['beneficial_ownership_certify_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'beneficial_ownership_certify_status', must be one of '%s'",
                $this->container['beneficial_ownership_certify_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_classification
     *
     * @return \TheLogicStudio\ExactPay\Model\BusinessClassification|null
     */
    public function getBusinessClassification()
    {
        return $this->container['business_classification'];
    }

    /**
     * Sets business_classification
     *
     * @param \TheLogicStudio\ExactPay\Model\BusinessClassification|null $business_classification business_classification
     *
     * @return self
     */
    public function setBusinessClassification($business_classification)
    {
        if (is_null($business_classification)) {
            throw new \InvalidArgumentException('non-nullable business_classification cannot be null');
        }
        $this->container['business_classification'] = $business_classification;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The Customer Identifier received from Dwolla for the onboarded Account. This field will be populated when the merchant is onboarded with Dwolla for ACH Payment processing.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of Onboarding with Dwolla when ACH Payment is enabled for the onboarded Account. When ACH Payment enablement is not needed for the Account or the onboarded entity is an Organization then the status will be updated as `na` (Not Applicable).
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date and time when the Account is created or verified with Dwolla.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets document_needed
     *
     * @return string|null
     */
    public function getDocumentNeeded()
    {
        return $this->container['document_needed'];
    }

    /**
     * Sets document_needed
     *
     * @param string|null $document_needed The documentation needed for Dwolla to verify the identity of the Business or the Owner's information. This field will be populated when the Dwolla's Onboarding status is `verification_document_needed`.
     *
     * @return self
     */
    public function setDocumentNeeded($document_needed)
    {
        if (is_null($document_needed)) {
            throw new \InvalidArgumentException('non-nullable document_needed cannot be null');
        }
        $this->container['document_needed'] = $document_needed;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The customer type as provisioned by Dwolla for the Account when the merchant is Onboarded with Dwolla.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets beneficial_ownership_certify_status
     *
     * @return string|null
     */
    public function getBeneficialOwnershipCertifyStatus()
    {
        return $this->container['beneficial_ownership_certify_status'];
    }

    /**
     * Sets beneficial_ownership_certify_status
     *
     * @param string|null $beneficial_ownership_certify_status The certification status of the Beneficial Owner (Principal) with Dwolla. This field will be populated when the Beneficial Owner's certification status is set or updated in Dwolla's system.
     *
     * @return self
     */
    public function setBeneficialOwnershipCertifyStatus($beneficial_ownership_certify_status)
    {
        if (is_null($beneficial_ownership_certify_status)) {
            throw new \InvalidArgumentException('non-nullable beneficial_ownership_certify_status cannot be null');
        }
        $allowedValues = $this->getBeneficialOwnershipCertifyStatusAllowableValues();
        if (!in_array($beneficial_ownership_certify_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'beneficial_ownership_certify_status', must be one of '%s'",
                    $beneficial_ownership_certify_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['beneficial_ownership_certify_status'] = $beneficial_ownership_certify_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


