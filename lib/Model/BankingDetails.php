<?php
/**
 * BankingDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Model;

use \ArrayAccess;
use \TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * BankingDetails Class Doc Comment
 *
 * @category Class
 * @description Banking details of the Applicant&#39;s business for ACH Payments.
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BankingDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BankingDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bank_name' => 'string',
        'routing_number' => 'string',
        'dda_number' => 'string',
        'bank_number' => 'string',
        'plaid_access_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bank_name' => null,
        'routing_number' => null,
        'dda_number' => null,
        'bank_number' => null,
        'plaid_access_token' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bank_name' => false,
		'routing_number' => false,
		'dda_number' => false,
		'bank_number' => false,
		'plaid_access_token' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bank_name' => 'bankName',
        'routing_number' => 'routingNumber',
        'dda_number' => 'ddaNumber',
        'bank_number' => 'bankNumber',
        'plaid_access_token' => 'plaidAccessToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bank_name' => 'setBankName',
        'routing_number' => 'setRoutingNumber',
        'dda_number' => 'setDdaNumber',
        'bank_number' => 'setBankNumber',
        'plaid_access_token' => 'setPlaidAccessToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bank_name' => 'getBankName',
        'routing_number' => 'getRoutingNumber',
        'dda_number' => 'getDdaNumber',
        'bank_number' => 'getBankNumber',
        'plaid_access_token' => 'getPlaidAccessToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('routing_number', $data ?? [], null);
        $this->setIfExists('dda_number', $data ?? [], null);
        $this->setIfExists('bank_number', $data ?? [], null);
        $this->setIfExists('plaid_access_token', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bank_name'] === null) {
            $invalidProperties[] = "'bank_name' can't be null";
        }
        if (!preg_match("/^(?=.*[a-zA-Z])[a-zA-Z\\s'-.&,\/()]+/", $this->container['bank_name'])) {
            $invalidProperties[] = "invalid value for 'bank_name', must be conform to the pattern /^(?=.*[a-zA-Z])[a-zA-Z\\s'-.&,\/()]+/.";
        }

        if ($this->container['routing_number'] === null) {
            $invalidProperties[] = "'routing_number' can't be null";
        }
        if (!preg_match("/^[0-9]+$/", $this->container['routing_number'])) {
            $invalidProperties[] = "invalid value for 'routing_number', must be conform to the pattern /^[0-9]+$/.";
        }

        if ($this->container['dda_number'] === null) {
            $invalidProperties[] = "'dda_number' can't be null";
        }
        if ((mb_strlen($this->container['dda_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'dda_number', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['dda_number']) < 3)) {
            $invalidProperties[] = "invalid value for 'dda_number', the character length must be bigger than or equal to 3.";
        }

        if (!preg_match("/^[0-9]+$/", $this->container['dda_number'])) {
            $invalidProperties[] = "invalid value for 'dda_number', must be conform to the pattern /^[0-9]+$/.";
        }

        if (!is_null($this->container['bank_number']) && !preg_match("/^[0-9]+$/", $this->container['bank_number'])) {
            $invalidProperties[] = "invalid value for 'bank_number', must be conform to the pattern /^[0-9]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bank_name
     *
     * @return string
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string $bank_name Name of the Bank where the business holds the Demand Deposit Account(DDA) or the Current Account to which they wanted to receive the funds via ACH.
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (is_null($bank_name)) {
            throw new \InvalidArgumentException('non-nullable bank_name cannot be null');
        }

        if ((!preg_match("/^(?=.*[a-zA-Z])[a-zA-Z\\s'-.&,\/()]+/", $bank_name))) {
            throw new \InvalidArgumentException("invalid value for \$bank_name when calling BankingDetails., must conform to the pattern /^(?=.*[a-zA-Z])[a-zA-Z\\s'-.&,\/()]+/.");
        }

        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string $routing_number 9-digit Routing Number for the Organization or Account based in USA (or) 3-digit Institution number for the Organization or Account based in Canada. The value must be a non-negative number string.
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        if (is_null($routing_number)) {
            throw new \InvalidArgumentException('non-nullable routing_number cannot be null');
        }

        if ((!preg_match("/^[0-9]+$/", $routing_number))) {
            throw new \InvalidArgumentException("invalid value for \$routing_number when calling BankingDetails., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets dda_number
     *
     * @return string
     */
    public function getDdaNumber()
    {
        return $this->container['dda_number'];
    }

    /**
     * Sets dda_number
     *
     * @param string $dda_number Demand Deposit Account (or) Checking Account number. The value must be a non-negative number string.
     *
     * @return self
     */
    public function setDdaNumber($dda_number)
    {
        if (is_null($dda_number)) {
            throw new \InvalidArgumentException('non-nullable dda_number cannot be null');
        }
        if ((mb_strlen($dda_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $dda_number when calling BankingDetails., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($dda_number) < 3)) {
            throw new \InvalidArgumentException('invalid length for $dda_number when calling BankingDetails., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^[0-9]+$/", $dda_number))) {
            throw new \InvalidArgumentException("invalid value for \$dda_number when calling BankingDetails., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['dda_number'] = $dda_number;

        return $this;
    }

    /**
     * Gets bank_number
     *
     * @return string|null
     */
    public function getBankNumber()
    {
        return $this->container['bank_number'];
    }

    /**
     * Sets bank_number
     *
     * @param string|null $bank_number A bank transit number is a unique 5-digit number used to identify the bank branch in Canada. This is only applicable for businesses based in Canada. The value must be a non-negative number string.
     *
     * @return self
     */
    public function setBankNumber($bank_number)
    {
        if (is_null($bank_number)) {
            throw new \InvalidArgumentException('non-nullable bank_number cannot be null');
        }

        if ((!preg_match("/^[0-9]+$/", $bank_number))) {
            throw new \InvalidArgumentException("invalid value for \$bank_number when calling BankingDetails., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['bank_number'] = $bank_number;

        return $this;
    }

    /**
     * Gets plaid_access_token
     *
     * @return string|null
     */
    public function getPlaidAccessToken()
    {
        return $this->container['plaid_access_token'];
    }

    /**
     * Sets plaid_access_token
     *
     * @param string|null $plaid_access_token Plaid Access Token for the bank account verified through Plaid integration. When the Plaid access token is provided, the bank account will be added as a Verified Funding Source. Otherwise, the bank account will be added as Unverified Funding Source.
     *
     * @return self
     */
    public function setPlaidAccessToken($plaid_access_token)
    {
        if (is_null($plaid_access_token)) {
            throw new \InvalidArgumentException('non-nullable plaid_access_token cannot be null');
        }
        $this->container['plaid_access_token'] = $plaid_access_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


