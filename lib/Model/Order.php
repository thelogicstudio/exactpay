<?php
/**
 * Order
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Model;

use \ArrayAccess;
use \TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'int',
        'surcharge_amount' => 'int',
        'tax_amount' => 'int',
        'capture' => 'bool',
        'description' => 'string',
        'reference' => '\TheLogicStudio\ExactPay\Model\Reference',
        'billing' => '\TheLogicStudio\ExactPay\Model\BillingCustomer',
        'soft_descriptor' => '\TheLogicStudio\ExactPay\Model\SoftDescriptor',
        'level3' => '\TheLogicStudio\ExactPay\Model\Level3',
        'options' => '\TheLogicStudio\ExactPay\Model\OrderOptions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => 'int32',
        'surcharge_amount' => 'int32',
        'tax_amount' => 'uint32',
        'capture' => null,
        'description' => null,
        'reference' => null,
        'billing' => null,
        'soft_descriptor' => null,
        'level3' => null,
        'options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
		'surcharge_amount' => false,
		'tax_amount' => false,
		'capture' => false,
		'description' => false,
		'reference' => false,
		'billing' => false,
		'soft_descriptor' => false,
		'level3' => false,
		'options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'surcharge_amount' => 'surchargeAmount',
        'tax_amount' => 'taxAmount',
        'capture' => 'capture',
        'description' => 'description',
        'reference' => 'reference',
        'billing' => 'billing',
        'soft_descriptor' => 'softDescriptor',
        'level3' => 'level3',
        'options' => 'options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'surcharge_amount' => 'setSurchargeAmount',
        'tax_amount' => 'setTaxAmount',
        'capture' => 'setCapture',
        'description' => 'setDescription',
        'reference' => 'setReference',
        'billing' => 'setBilling',
        'soft_descriptor' => 'setSoftDescriptor',
        'level3' => 'setLevel3',
        'options' => 'setOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'surcharge_amount' => 'getSurchargeAmount',
        'tax_amount' => 'getTaxAmount',
        'capture' => 'getCapture',
        'description' => 'getDescription',
        'reference' => 'getReference',
        'billing' => 'getBilling',
        'soft_descriptor' => 'getSoftDescriptor',
        'level3' => 'getLevel3',
        'options' => 'getOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('surcharge_amount', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('capture', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('billing', $data ?? [], null);
        $this->setIfExists('soft_descriptor', $data ?? [], null);
        $this->setIfExists('level3', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] > 999999999)) {
            $invalidProperties[] = "invalid value for 'amount', must be smaller than or equal to 999999999.";
        }

        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['surcharge_amount']) && ($this->container['surcharge_amount'] > 999999999)) {
            $invalidProperties[] = "invalid value for 'surcharge_amount', must be smaller than or equal to 999999999.";
        }

        if (!is_null($this->container['surcharge_amount']) && ($this->container['surcharge_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'surcharge_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tax_amount']) && ($this->container['tax_amount'] > 999999999)) {
            $invalidProperties[] = "invalid value for 'tax_amount', must be smaller than or equal to 999999999.";
        }

        if (!is_null($this->container['tax_amount']) && ($this->container['tax_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'tax_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Amount in smallest currency unit, for example, in cents, including all surcharges, taxes etc.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling Order., must be smaller than or equal to 999999999.');
        }
        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets surcharge_amount
     *
     * @return int|null
     */
    public function getSurchargeAmount()
    {
        return $this->container['surcharge_amount'];
    }

    /**
     * Sets surcharge_amount
     *
     * @param int|null $surcharge_amount The surcharge amount in smallest currency units, for example, in cents in USD This is assumed to already be included in the amount.
     *
     * @return self
     */
    public function setSurchargeAmount($surcharge_amount)
    {
        if (is_null($surcharge_amount)) {
            throw new \InvalidArgumentException('non-nullable surcharge_amount cannot be null');
        }

        if (($surcharge_amount > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $surcharge_amount when calling Order., must be smaller than or equal to 999999999.');
        }
        if (($surcharge_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $surcharge_amount when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['surcharge_amount'] = $surcharge_amount;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return int|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param int|null $tax_amount The tax amount in smallest currency units, for example, in cents in USD This is assumed to already be included in the amount. Sales tax in the US, or PST for Canadian merchants.
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            throw new \InvalidArgumentException('non-nullable tax_amount cannot be null');
        }

        if (($tax_amount > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $tax_amount when calling Order., must be smaller than or equal to 999999999.');
        }
        if (($tax_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_amount when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets capture
     *
     * @return bool|null
     */
    public function getCapture()
    {
        return $this->container['capture'];
    }

    /**
     * Sets capture
     *
     * @param bool|null $capture Set this to false if you only want to authorize for the amount when the order is paid. Defaults to true.
     *
     * @return self
     */
    public function setCapture($capture)
    {
        if (is_null($capture)) {
            throw new \InvalidArgumentException('non-nullable capture cannot be null');
        }
        $this->container['capture'] = $capture;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of the order.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return \TheLogicStudio\ExactPay\Model\Reference
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param \TheLogicStudio\ExactPay\Model\Reference $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \TheLogicStudio\ExactPay\Model\BillingCustomer|null
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \TheLogicStudio\ExactPay\Model\BillingCustomer|null $billing billing
     *
     * @return self
     */
    public function setBilling($billing)
    {
        if (is_null($billing)) {
            throw new \InvalidArgumentException('non-nullable billing cannot be null');
        }
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets soft_descriptor
     *
     * @return \TheLogicStudio\ExactPay\Model\SoftDescriptor|null
     */
    public function getSoftDescriptor()
    {
        return $this->container['soft_descriptor'];
    }

    /**
     * Sets soft_descriptor
     *
     * @param \TheLogicStudio\ExactPay\Model\SoftDescriptor|null $soft_descriptor soft_descriptor
     *
     * @return self
     */
    public function setSoftDescriptor($soft_descriptor)
    {
        if (is_null($soft_descriptor)) {
            throw new \InvalidArgumentException('non-nullable soft_descriptor cannot be null');
        }
        $this->container['soft_descriptor'] = $soft_descriptor;

        return $this;
    }

    /**
     * Gets level3
     *
     * @return \TheLogicStudio\ExactPay\Model\Level3|null
     */
    public function getLevel3()
    {
        return $this->container['level3'];
    }

    /**
     * Sets level3
     *
     * @param \TheLogicStudio\ExactPay\Model\Level3|null $level3 level3
     *
     * @return self
     */
    public function setLevel3($level3)
    {
        if (is_null($level3)) {
            throw new \InvalidArgumentException('non-nullable level3 cannot be null');
        }
        $this->container['level3'] = $level3;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \TheLogicStudio\ExactPay\Model\OrderOptions|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \TheLogicStudio\ExactPay\Model\OrderOptions|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


