<?php
/**
 * MastercardRuleMerchantOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Model;

use \ArrayAccess;
use \TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * MastercardRuleMerchantOptions Class Doc Comment
 *
 * @category Class
 * @description Contains the fields in the merchant match portion of the [Master Card Match API](https://developer.mastercard.com/match/documentation/api-reference) Response that will be evaluated as part of the criteria.
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MastercardRuleMerchantOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MastercardRuleMerchantOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string[]',
        'doing_business_as_name' => 'string[]',
        'national_tax_id' => 'string[]',
        'service_prov_legal' => 'string[]',
        'service_prov_dba' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'doing_business_as_name' => null,
        'national_tax_id' => null,
        'service_prov_legal' => null,
        'service_prov_dba' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'doing_business_as_name' => false,
		'national_tax_id' => false,
		'service_prov_legal' => false,
		'service_prov_dba' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'doing_business_as_name' => 'DoingBusinessAsName',
        'national_tax_id' => 'NationalTaxId',
        'service_prov_legal' => 'ServiceProvLegal',
        'service_prov_dba' => 'ServiceProvDBA'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'doing_business_as_name' => 'setDoingBusinessAsName',
        'national_tax_id' => 'setNationalTaxId',
        'service_prov_legal' => 'setServiceProvLegal',
        'service_prov_dba' => 'setServiceProvDba'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'doing_business_as_name' => 'getDoingBusinessAsName',
        'national_tax_id' => 'getNationalTaxId',
        'service_prov_legal' => 'getServiceProvLegal',
        'service_prov_dba' => 'getServiceProvDba'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const NAME_M00 = 'M00';
    public const NAME_M01 = 'M01';
    public const NAME_M02 = 'M02';
    public const DOING_BUSINESS_AS_NAME_M00 = 'M00';
    public const DOING_BUSINESS_AS_NAME_M01 = 'M01';
    public const DOING_BUSINESS_AS_NAME_M02 = 'M02';
    public const NATIONAL_TAX_ID_M00 = 'M00';
    public const NATIONAL_TAX_ID_M01 = 'M01';
    public const NATIONAL_TAX_ID_M02 = 'M02';
    public const SERVICE_PROV_LEGAL_M00 = 'M00';
    public const SERVICE_PROV_LEGAL_M01 = 'M01';
    public const SERVICE_PROV_LEGAL_M02 = 'M02';
    public const SERVICE_PROV_DBA_M00 = 'M00';
    public const SERVICE_PROV_DBA_M01 = 'M01';
    public const SERVICE_PROV_DBA_M02 = 'M02';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNameAllowableValues()
    {
        return [
            self::NAME_M00,
            self::NAME_M01,
            self::NAME_M02,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDoingBusinessAsNameAllowableValues()
    {
        return [
            self::DOING_BUSINESS_AS_NAME_M00,
            self::DOING_BUSINESS_AS_NAME_M01,
            self::DOING_BUSINESS_AS_NAME_M02,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNationalTaxIdAllowableValues()
    {
        return [
            self::NATIONAL_TAX_ID_M00,
            self::NATIONAL_TAX_ID_M01,
            self::NATIONAL_TAX_ID_M02,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceProvLegalAllowableValues()
    {
        return [
            self::SERVICE_PROV_LEGAL_M00,
            self::SERVICE_PROV_LEGAL_M01,
            self::SERVICE_PROV_LEGAL_M02,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceProvDbaAllowableValues()
    {
        return [
            self::SERVICE_PROV_DBA_M00,
            self::SERVICE_PROV_DBA_M01,
            self::SERVICE_PROV_DBA_M02,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('doing_business_as_name', $data ?? [], null);
        $this->setIfExists('national_tax_id', $data ?? [], null);
        $this->setIfExists('service_prov_legal', $data ?? [], null);
        $this->setIfExists('service_prov_dba', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (count($this->container['name']) > 3)) {
            $invalidProperties[] = "invalid value for 'name', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['name']) && (count($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['doing_business_as_name']) && (count($this->container['doing_business_as_name']) > 3)) {
            $invalidProperties[] = "invalid value for 'doing_business_as_name', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['doing_business_as_name']) && (count($this->container['doing_business_as_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'doing_business_as_name', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['national_tax_id']) && (count($this->container['national_tax_id']) > 3)) {
            $invalidProperties[] = "invalid value for 'national_tax_id', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['national_tax_id']) && (count($this->container['national_tax_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'national_tax_id', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['service_prov_legal']) && (count($this->container['service_prov_legal']) > 3)) {
            $invalidProperties[] = "invalid value for 'service_prov_legal', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['service_prov_legal']) && (count($this->container['service_prov_legal']) < 1)) {
            $invalidProperties[] = "invalid value for 'service_prov_legal', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['service_prov_dba']) && (count($this->container['service_prov_dba']) > 3)) {
            $invalidProperties[] = "invalid value for 'service_prov_dba', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['service_prov_dba']) && (count($this->container['service_prov_dba']) < 1)) {
            $invalidProperties[] = "invalid value for 'service_prov_dba', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string[]|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string[]|null $name The list of values to match for this specific field in the response from Master Card Match API.  *M00* represents No Match, *M01* represents a Partial Match and *M02* represents an Exact Match.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $allowedValues = $this->getNameAllowableValues();
        if (array_diff($name, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((count($name) > 3)) {
            throw new \InvalidArgumentException('invalid value for $name when calling MastercardRuleMerchantOptions., number of items must be less than or equal to 3.');
        }
        if ((count($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling MastercardRuleMerchantOptions., number of items must be greater than or equal to 1.');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets doing_business_as_name
     *
     * @return string[]|null
     */
    public function getDoingBusinessAsName()
    {
        return $this->container['doing_business_as_name'];
    }

    /**
     * Sets doing_business_as_name
     *
     * @param string[]|null $doing_business_as_name The list of values to match for this specific field in the response from Master Card Match API.  *M00* represents No Match, *M01* represents a Partial Match and *M02* represents an Exact Match.
     *
     * @return self
     */
    public function setDoingBusinessAsName($doing_business_as_name)
    {
        if (is_null($doing_business_as_name)) {
            throw new \InvalidArgumentException('non-nullable doing_business_as_name cannot be null');
        }
        $allowedValues = $this->getDoingBusinessAsNameAllowableValues();
        if (array_diff($doing_business_as_name, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'doing_business_as_name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((count($doing_business_as_name) > 3)) {
            throw new \InvalidArgumentException('invalid value for $doing_business_as_name when calling MastercardRuleMerchantOptions., number of items must be less than or equal to 3.');
        }
        if ((count($doing_business_as_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $doing_business_as_name when calling MastercardRuleMerchantOptions., number of items must be greater than or equal to 1.');
        }
        $this->container['doing_business_as_name'] = $doing_business_as_name;

        return $this;
    }

    /**
     * Gets national_tax_id
     *
     * @return string[]|null
     */
    public function getNationalTaxId()
    {
        return $this->container['national_tax_id'];
    }

    /**
     * Sets national_tax_id
     *
     * @param string[]|null $national_tax_id The list of values to match for this specific field in the response from Master Card Match API.  *M00* represents No Match, *M01* represents a Partial Match and *M02* represents an Exact Match.
     *
     * @return self
     */
    public function setNationalTaxId($national_tax_id)
    {
        if (is_null($national_tax_id)) {
            throw new \InvalidArgumentException('non-nullable national_tax_id cannot be null');
        }
        $allowedValues = $this->getNationalTaxIdAllowableValues();
        if (array_diff($national_tax_id, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'national_tax_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((count($national_tax_id) > 3)) {
            throw new \InvalidArgumentException('invalid value for $national_tax_id when calling MastercardRuleMerchantOptions., number of items must be less than or equal to 3.');
        }
        if ((count($national_tax_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $national_tax_id when calling MastercardRuleMerchantOptions., number of items must be greater than or equal to 1.');
        }
        $this->container['national_tax_id'] = $national_tax_id;

        return $this;
    }

    /**
     * Gets service_prov_legal
     *
     * @return string[]|null
     */
    public function getServiceProvLegal()
    {
        return $this->container['service_prov_legal'];
    }

    /**
     * Sets service_prov_legal
     *
     * @param string[]|null $service_prov_legal The list of values to match for this specific field in the response from Master Card Match API.  *M00* represents No Match, *M01* represents a Partial Match and *M02* represents an Exact Match.
     *
     * @return self
     */
    public function setServiceProvLegal($service_prov_legal)
    {
        if (is_null($service_prov_legal)) {
            throw new \InvalidArgumentException('non-nullable service_prov_legal cannot be null');
        }
        $allowedValues = $this->getServiceProvLegalAllowableValues();
        if (array_diff($service_prov_legal, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'service_prov_legal', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((count($service_prov_legal) > 3)) {
            throw new \InvalidArgumentException('invalid value for $service_prov_legal when calling MastercardRuleMerchantOptions., number of items must be less than or equal to 3.');
        }
        if ((count($service_prov_legal) < 1)) {
            throw new \InvalidArgumentException('invalid length for $service_prov_legal when calling MastercardRuleMerchantOptions., number of items must be greater than or equal to 1.');
        }
        $this->container['service_prov_legal'] = $service_prov_legal;

        return $this;
    }

    /**
     * Gets service_prov_dba
     *
     * @return string[]|null
     */
    public function getServiceProvDba()
    {
        return $this->container['service_prov_dba'];
    }

    /**
     * Sets service_prov_dba
     *
     * @param string[]|null $service_prov_dba The list of values to match for this specific field in the response from Master Card Match API.  *M00* represents No Match, *M01* represents a Partial Match and *M02* represents an Exact Match.
     *
     * @return self
     */
    public function setServiceProvDba($service_prov_dba)
    {
        if (is_null($service_prov_dba)) {
            throw new \InvalidArgumentException('non-nullable service_prov_dba cannot be null');
        }
        $allowedValues = $this->getServiceProvDbaAllowableValues();
        if (array_diff($service_prov_dba, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'service_prov_dba', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((count($service_prov_dba) > 3)) {
            throw new \InvalidArgumentException('invalid value for $service_prov_dba when calling MastercardRuleMerchantOptions., number of items must be less than or equal to 3.');
        }
        if ((count($service_prov_dba) < 1)) {
            throw new \InvalidArgumentException('invalid length for $service_prov_dba when calling MastercardRuleMerchantOptions., number of items must be greater than or equal to 1.');
        }
        $this->container['service_prov_dba'] = $service_prov_dba;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


