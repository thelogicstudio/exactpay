<?php
/**
 * OrderResponseLevel3
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Embedded Payments
 *
 * Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\ExactPay\Model;

use \ArrayAccess;
use \TheLogicStudio\ExactPay\ObjectSerializer;

/**
 * OrderResponseLevel3 Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\ExactPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderResponseLevel3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderResponse_level3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tax_amount' => 'int',
        'tax_rate' => 'int',
        'alt_tax_amount' => 'int',
        'alt_tax_id' => 'string',
        'duty_amount' => 'int',
        'freight_amount' => 'int',
        'discount_amount' => 'int',
        'ship_from_zip' => 'string',
        'ship_to' => '\TheLogicStudio\ExactPay\Model\OrderResponseLevel3ShipTo',
        'line_items' => '\TheLogicStudio\ExactPay\Model\OrderResponseLevel3LineItemsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tax_amount' => null,
        'tax_rate' => null,
        'alt_tax_amount' => null,
        'alt_tax_id' => null,
        'duty_amount' => null,
        'freight_amount' => null,
        'discount_amount' => null,
        'ship_from_zip' => null,
        'ship_to' => null,
        'line_items' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tax_amount' => false,
		'tax_rate' => false,
		'alt_tax_amount' => false,
		'alt_tax_id' => false,
		'duty_amount' => false,
		'freight_amount' => false,
		'discount_amount' => false,
		'ship_from_zip' => false,
		'ship_to' => false,
		'line_items' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tax_amount' => 'taxAmount',
        'tax_rate' => 'taxRate',
        'alt_tax_amount' => 'altTaxAmount',
        'alt_tax_id' => 'altTaxId',
        'duty_amount' => 'dutyAmount',
        'freight_amount' => 'freightAmount',
        'discount_amount' => 'discountAmount',
        'ship_from_zip' => 'shipFromZip',
        'ship_to' => 'shipTo',
        'line_items' => 'lineItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tax_amount' => 'setTaxAmount',
        'tax_rate' => 'setTaxRate',
        'alt_tax_amount' => 'setAltTaxAmount',
        'alt_tax_id' => 'setAltTaxId',
        'duty_amount' => 'setDutyAmount',
        'freight_amount' => 'setFreightAmount',
        'discount_amount' => 'setDiscountAmount',
        'ship_from_zip' => 'setShipFromZip',
        'ship_to' => 'setShipTo',
        'line_items' => 'setLineItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tax_amount' => 'getTaxAmount',
        'tax_rate' => 'getTaxRate',
        'alt_tax_amount' => 'getAltTaxAmount',
        'alt_tax_id' => 'getAltTaxId',
        'duty_amount' => 'getDutyAmount',
        'freight_amount' => 'getFreightAmount',
        'discount_amount' => 'getDiscountAmount',
        'ship_from_zip' => 'getShipFromZip',
        'ship_to' => 'getShipTo',
        'line_items' => 'getLineItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('alt_tax_amount', $data ?? [], null);
        $this->setIfExists('alt_tax_id', $data ?? [], null);
        $this->setIfExists('duty_amount', $data ?? [], null);
        $this->setIfExists('freight_amount', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('ship_from_zip', $data ?? [], null);
        $this->setIfExists('ship_to', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tax_amount
     *
     * @return int|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param int|null $tax_amount In smallest currency units, for example, in cents.
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            throw new \InvalidArgumentException('non-nullable tax_amount cannot be null');
        }
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return int|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param int|null $tax_rate Tax rate of the Order.
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            throw new \InvalidArgumentException('non-nullable tax_rate cannot be null');
        }
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets alt_tax_amount
     *
     * @return int|null
     */
    public function getAltTaxAmount()
    {
        return $this->container['alt_tax_amount'];
    }

    /**
     * Sets alt_tax_amount
     *
     * @param int|null $alt_tax_amount In smallest currency units, for example, in cents.
     *
     * @return self
     */
    public function setAltTaxAmount($alt_tax_amount)
    {
        if (is_null($alt_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable alt_tax_amount cannot be null');
        }
        $this->container['alt_tax_amount'] = $alt_tax_amount;

        return $this;
    }

    /**
     * Gets alt_tax_id
     *
     * @return string|null
     */
    public function getAltTaxId()
    {
        return $this->container['alt_tax_id'];
    }

    /**
     * Sets alt_tax_id
     *
     * @param string|null $alt_tax_id alt_tax_id
     *
     * @return self
     */
    public function setAltTaxId($alt_tax_id)
    {
        if (is_null($alt_tax_id)) {
            throw new \InvalidArgumentException('non-nullable alt_tax_id cannot be null');
        }
        $this->container['alt_tax_id'] = $alt_tax_id;

        return $this;
    }

    /**
     * Gets duty_amount
     *
     * @return int|null
     */
    public function getDutyAmount()
    {
        return $this->container['duty_amount'];
    }

    /**
     * Sets duty_amount
     *
     * @param int|null $duty_amount In smallest currency units, for example, in cents.
     *
     * @return self
     */
    public function setDutyAmount($duty_amount)
    {
        if (is_null($duty_amount)) {
            throw new \InvalidArgumentException('non-nullable duty_amount cannot be null');
        }
        $this->container['duty_amount'] = $duty_amount;

        return $this;
    }

    /**
     * Gets freight_amount
     *
     * @return int|null
     */
    public function getFreightAmount()
    {
        return $this->container['freight_amount'];
    }

    /**
     * Sets freight_amount
     *
     * @param int|null $freight_amount In smallest currency units, for example, in cents.
     *
     * @return self
     */
    public function setFreightAmount($freight_amount)
    {
        if (is_null($freight_amount)) {
            throw new \InvalidArgumentException('non-nullable freight_amount cannot be null');
        }
        $this->container['freight_amount'] = $freight_amount;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return int|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param int|null $discount_amount In smallest currency units, for example, in cents.
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        if (is_null($discount_amount)) {
            throw new \InvalidArgumentException('non-nullable discount_amount cannot be null');
        }
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets ship_from_zip
     *
     * @return string|null
     */
    public function getShipFromZip()
    {
        return $this->container['ship_from_zip'];
    }

    /**
     * Sets ship_from_zip
     *
     * @param string|null $ship_from_zip The postal code where the customer is located. Five-digit (example: 33558) or nine-digit (33558-3321) format is acceptable for the USA. Six digit(A0A 0A0) or (A0A0A0) format is acceptable for Canada.
     *
     * @return self
     */
    public function setShipFromZip($ship_from_zip)
    {
        if (is_null($ship_from_zip)) {
            throw new \InvalidArgumentException('non-nullable ship_from_zip cannot be null');
        }
        $this->container['ship_from_zip'] = $ship_from_zip;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \TheLogicStudio\ExactPay\Model\OrderResponseLevel3ShipTo|null
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \TheLogicStudio\ExactPay\Model\OrderResponseLevel3ShipTo|null $ship_to ship_to
     *
     * @return self
     */
    public function setShipTo($ship_to)
    {
        if (is_null($ship_to)) {
            throw new \InvalidArgumentException('non-nullable ship_to cannot be null');
        }
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \TheLogicStudio\ExactPay\Model\OrderResponseLevel3LineItemsInner[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \TheLogicStudio\ExactPay\Model\OrderResponseLevel3LineItemsInner[]|null $line_items line_items
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


